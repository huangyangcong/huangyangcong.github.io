<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Thread.activeCount死循环的问题</title>
    <url>/2019/05/26/Thread-activeCount%E6%AD%BB%E5%BE%AA%E7%8E%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">    public static volatile int race &#x3D; 0;</span><br><span class="line">    public static void increace() &#123;</span><br><span class="line">        race++;</span><br><span class="line">    &#125;</span><br><span class="line">    private static final int THREAD_COUNT &#x3D; 20;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread[] threads &#x3D; new Thread[THREAD_COUNT];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            threads[i] &#x3D; new Thread(new Runnable() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; 300; i++) &#123;</span><br><span class="line">                        increace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        while (Thread.activeCount() &gt; 0) &#123;</span><br><span class="line">            Thread.currentThread().getThreadGroup().list();</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(race);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台一直输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.ThreadGroup[name&#x3D;main,maxpri&#x3D;10]</span><br><span class="line">    Thread[main,5,main]</span><br><span class="line">java.lang.ThreadGroup[name&#x3D;main,maxpri&#x3D;10]</span><br><span class="line">    Thread[main,5,main]</span><br><span class="line">java.lang.ThreadGroup[name&#x3D;main,maxpri&#x3D;10]</span><br><span class="line">    Thread[main,5,main]</span><br><span class="line">java.lang.ThreadGroup[name&#x3D;main,maxpri&#x3D;10]</span><br><span class="line">    Thread[main,5,main]</span><br></pre></td></tr></table></figure>
<p>所以将Thread.activeCount的判断值改为Thread.activeCount &gt; 1即可。</p>
<hr>
]]></content>
      <categories>
        <category>java</category>
        <category>thread</category>
      </categories>
      <tags>
        <tag>thread</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>apache部署</title>
    <url>/2019/10/25/apache%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;httpd&#x2F;httpd-2.4.41.tar.gz</span><br><span class="line">tar -zxvf httpd-2.4.33.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-2.4.41 --with-included-apr --enable-so --enable-deflate&#x3D;shared --enable-mods-shared&#x3D;most --enable-rewrite&#x3D;shared --enable-mpms-shared --with-pcre</span><br><span class="line"></span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-2.4.41 \   #指定安装位置</span><br><span class="line">--with-included-apr \  #httpd依赖的包apr，可支持httpd跨平台运作</span><br><span class="line">--enable-so \    #启用DSO</span><br><span class="line">--enable-deflate&#x3D;shared \   #动态共享的方式编译deflate，后面的参数同理</span><br><span class="line">--enable-mods-shared&#x3D;most \</span><br><span class="line">--enable-rewrite&#x3D;shared \</span><br><span class="line">--enable-mpms-shared \　　#2.4版本使用动态更换mpm模式必须使用该参数</span><br><span class="line">--with-pcre  #正则相关的库</span><br></pre></td></tr></table></figure>

<h4 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主配置文件：&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httd.conf ，这个是httpd最主要的配置文档</span><br><span class="line"></span><br><span class="line">扩展配置文件：&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf ，这个是httpd的额外配置文档</span><br><span class="line"></span><br><span class="line">文档根目录： &#x2F;var&#x2F;www&#x2F;html ，这个是apache 首页的文档目录 ，即输入http:&#x2F;&#x2F;127.0.0.1  显示页面所在的目录</span><br><span class="line"></span><br><span class="line">服务脚本：&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;httpd </span><br><span class="line"></span><br><span class="line">错误目录：&#x2F;var&#x2F;www&#x2F;error  ，服务器设定错误，请求的资源错误或浏览器访问出现错误等错误文件的存储目录</span><br><span class="line"></span><br><span class="line">CGI目录： &#x2F;var&#x2F;www&#x2F;cgi-bin&#x2F;   ，预设为CGI运行脚本的存储目录</span><br><span class="line"></span><br><span class="line">日志目录：&#x2F;var&#x2F;log&#x2F;httpd  ，client端登录httpd时，记录的登录日志等信息存储目录</span><br><span class="line"></span><br><span class="line">脚本配置文件： &#x2F;etc&#x2F;sysconfig&#x2F;httpd</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line"></span><br><span class="line">DocumentRoot  &quot;&#x2F;var&#x2F;www&#x2F;html&quot; 默认访问文件夹位置</span><br><span class="line"></span><br><span class="line">&lt;Directory &#x2F;&gt;     #对文件授权</span><br><span class="line">    Options FollowSymLinks  #授权范围</span><br><span class="line">    AllowOverride None</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">DirectoryIndex index.html index.html.var 默认首页</span><br><span class="line">Listen 80 #监听端口</span><br></pre></td></tr></table></figure>

<h4 id="授权参数"><a href="#授权参数" class="headerlink" title="授权参数"></a>授权参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Indexes</td>
<td>允许目录浏览，当客户仅指定要访问的目录，但没有指定要访问的文件，且目录下不存在默认文档时，显示该目录中的文件及子目录列表索引</td>
</tr>
<tr>
<td>MultiViews</td>
<td>允许内容协商的多重视图，允许返回指定的访问目录下的相关联的文件</td>
</tr>
<tr>
<td>All</td>
<td>All包含了除MultiViews之外的所有特性，如没有指定options，默认为All</td>
</tr>
<tr>
<td>ExecCGI</td>
<td>允许在该目录下执行CGI脚本</td>
</tr>
<tr>
<td>FollowSymLinks</td>
<td>允许跟踪符号链接到源文件</td>
</tr>
<tr>
<td>Includes</td>
<td>允许服务器端包含功能</td>
</tr>
<tr>
<td>IncludesNoExec</td>
<td>允许服务器端包含功能，但禁止执行CGI脚本</td>
</tr>
<tr>
<td>None</td>
<td>不调用options参数</td>
</tr>
</tbody></table>
<h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看版本</span><br><span class="line">httpd  -v</span><br><span class="line"></span><br><span class="line">查看语法是否正确</span><br><span class="line">httpd -t</span><br><span class="line"></span><br><span class="line">查看加载模块</span><br><span class="line">httpd -l </span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">httpd -k start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">停止</span><br><span class="line">httpd -k stop </span><br><span class="line"></span><br><span class="line">通常使用这个启动</span><br><span class="line">apachectl start</span><br><span class="line"></span><br><span class="line">通常使用这个重启</span><br><span class="line">apachectl graceful</span><br></pre></td></tr></table></figure>

<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4>]]></content>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>centos</title>
    <url>/2019/11/08/centos/</url>
    <content><![CDATA[<h4 id="mini-centos-初始化安装"><a href="#mini-centos-初始化安装" class="headerlink" title="mini centos 初始化安装"></a>mini centos 初始化安装</h4><ul>
<li>vmware tool 灰色<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启时可以重新安装</span><br></pre></td></tr></table></figure></li>
<li>安装vmware tool<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install perl gcc kernel-devel</span><br><span class="line">su root  &#x2F;&#x2F;切换到root用户</span><br><span class="line">mkdir &#x2F;mnt&#x2F;cdrom   &#x2F;&#x2F;创建CD挂载目录</span><br><span class="line">mount &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom</span><br><span class="line">cd &#x2F;mnt&#x2F;cdrom</span><br><span class="line">cp  VMwareTools.x.x.x.tar &#x2F;tmp </span><br><span class="line">cd tmp</span><br><span class="line">tar -xvf VMwareTools.x.x.x.tar</span><br><span class="line">进入目录安装</span><br></pre></td></tr></table></figure></li>
<li>安装vmtools还是无法复制粘贴<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">菜单栏-虚拟机-设置-选项-右侧下“增强型键盘”选为“在可用时使用”</span><br></pre></td></tr></table></figure></li>
<li>配置网络vi /etc/sysconfig/network-scripts/，ONBOOT=no<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">PROXY_METHOD&#x3D;none</span><br><span class="line">BROWSER_ONLY&#x3D;no</span><br><span class="line">BOOTPROTO&#x3D;dhcp</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6_AUTOCONF&#x3D;yes</span><br><span class="line">IPV6_DEFROUTE&#x3D;yes</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy</span><br><span class="line">NAME&#x3D;ens33</span><br><span class="line">UUID&#x3D;c02aadee-742b-40f7-aa65-8dece35b4eae</span><br><span class="line">DEVICE&#x3D;ens33</span><br><span class="line">ONBOOT&#x3D;yes</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2019/08/17/docker/</url>
    <content><![CDATA[<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname kongkong;</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine;</span><br><span class="line">sudo yum install -y yum-utils   device-mapper-persistent-data   lvm2;</span><br><span class="line">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo;</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io;</span><br><span class="line"></span><br><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock -H tcp:&#x2F;&#x2F;0.0.0.0:2375</span><br><span class="line"></span><br><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;odvokayq.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">sudo systemctl start docker;</span><br></pre></td></tr></table></figure>

<h3 id="镜像切换"><a href="#镜像切换" class="headerlink" title="镜像切换"></a>镜像切换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;odvokayq.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --restart&#x3D;unless-stopped -p 80:80 -p 443:443 rancher&#x2F;rancher</span><br><span class="line">sudo docker run -d --restart&#x3D;unless-stopped -p 80:80 -p 443:443 registry.cn-hangzhou.aliyuncs.com&#x2F;ychuang&#x2F;rancher:v2.4.0-rc12</span><br><span class="line">kubectl create secret docker-registry pipeline-docker-registry --namespace&#x3D;default --docker-server&#x3D;registry.cn-hangzhou.aliyuncs.com --docker-username&#x3D;1352640897@qq.com --docker-password&#x3D;hyc123456 --docker-email&#x3D;1352640897@qq.com</span><br><span class="line"></span><br><span class="line">Can not find RKE state file: open</span><br><span class="line">修改主机名,为小写</span><br><span class="line">hostnamectl set-hostname kongkong;</span><br></pre></td></tr></table></figure>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker #添加docker用户组</span><br><span class="line">sudo gpasswd -a $XXX docker #检测当前用户是否已经在docker用户组中，其中XXX为用户名，例如我的，hyc</span><br><span class="line">sudo gpasswd -a $USER docker #将当前用户添加至docker用户组</span><br><span class="line">newgrp docker #更新docker用户组</span><br></pre></td></tr></table></figure>

<h4 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -v &#x2F;var&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home \</span><br><span class="line">  -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">  jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>


<h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示Exited状态的容器</span><br><span class="line">sudo docker ps -a|grep Exited|awk &#39;&#123;print $1&#125;&#39;</span><br><span class="line">#批量删除Exited状态的容器</span><br><span class="line">sudo docker rm &#96;docker ps -a|grep Exited|awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">#删除未运行的容器</span><br><span class="line">sudo docker rm $(sudo docker ps -a -q)</span><br><span class="line">#删除孤立容器</span><br><span class="line">sudo docker container prune</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>dubbo服务接收过程</title>
    <url>/2019/08/06/dubbo%E6%9C%8D%E5%8A%A1%E6%8E%A5%E6%94%B6%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Snowflake分布式id</title>
    <url>/2019/09/12/Snowflake%E5%88%86%E5%B8%83%E5%BC%8Fid/</url>
    <content><![CDATA[<h4 id="twitter"><a href="#twitter" class="headerlink" title="twitter"></a>twitter</h4><ul>
<li>SnowflakeIdWorker<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SnowflakeIdWorker &#123;</span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Constants&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 回拨超时错误</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final static String ERROR_CLOCK_BACK &#x3D; &quot;时间回拨，拒绝为超出%d毫秒生成ID&quot;;</span><br><span class="line"></span><br><span class="line">    private final static String ERROR_ATTR_LIMIT &#x3D; &quot;%s属性的范围为0-%d&quot;;</span><br><span class="line"></span><br><span class="line">    private final static String MSG_UID_PARSE &#x3D; &quot;&#123;\&quot;UID\&quot;:\&quot;%s\&quot;,\&quot;timestamp\&quot;:\&quot;%s\&quot;,\&quot;workerId\&quot;:\&quot;%d\&quot;,\&quot;dataCenterId\&quot;:\&quot;%d\&quot;,\&quot;sequence\&quot;:\&quot;%d\&quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">    private final static String DATE_PATTERN_DEFAULT &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Fields&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 开始时间截 (2017-12-25)，用于用当前时间戳减去这个时间戳，算出偏移量</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long twepoch &#x3D; 1514131200000L;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 机器id所占的位数(表示只允许workId的范围为：0-1023)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long workerIdBits &#x3D; 5L;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 数据标识id所占的位数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long datacenterIdBits &#x3D; 5L;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public final long maxWorkerId &#x3D; -1L ^ (-1L &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 支持的最大数据标识id，结果是31</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long maxDatacenterId &#x3D; -1L ^ (-1L &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 序列在id中占的位数 (表示只允许sequenceId的范围为：0-4095)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long sequenceBits &#x3D; 12L;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 机器ID向左移12位</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long workerIdShift &#x3D; sequenceBits;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 数据标识id向左移17位(12+5)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long datacenterIdShift &#x3D; sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 时间截向左移22位(5+5+12)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long timestampLeftShift &#x3D; sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 生成序列的掩码，(防止溢出:位与运算保证计算的结果范围始终是 0-4095，0b111111111111&#x3D;0xfff&#x3D;4095)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private final long sequenceMask &#x3D; -1L ^ (-1L &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 工作机器ID(0~31)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private long workerId;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 数据中心ID(0~31)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private long datacenterId;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 毫秒内序列(0~4095)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private long sequence &#x3D; 0L;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上次生成ID的时间截</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private long lastTimestamp &#x3D; -1L;</span><br><span class="line"></span><br><span class="line">    private boolean isClock &#x3D; true;</span><br><span class="line"></span><br><span class="line">    public void setClock(boolean clock) &#123;</span><br><span class="line">        isClock &#x3D; clock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Constructors&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构造函数</span><br><span class="line">     *</span><br><span class="line">     * @param port 端口 (0~31)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public SnowflakeIdWorker(long port) &#123;</span><br><span class="line">        this.datacenterId &#x3D; NetUtils.getMachineNum(31);</span><br><span class="line">        this.workerId &#x3D; NetUtils.getPortNum(datacenterId, maxWorkerId, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构造函数</span><br><span class="line">     *</span><br><span class="line">     * @param workerId     工作ID (0~31)</span><br><span class="line">     * @param datacenterId 数据中心ID (0~31)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public SnowflakeIdWorker(long workerId, long datacenterId) &#123;</span><br><span class="line">        if (workerId &gt; maxWorkerId || workerId &lt; 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(String.format(ERROR_ATTR_LIMIT, &quot;workerId&quot;, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        if (datacenterId &gt; maxDatacenterId || datacenterId &lt; 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(String.format(ERROR_ATTR_LIMIT, &quot;datacenterId&quot;, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        this.workerId &#x3D; workerId;</span><br><span class="line">        this.datacenterId &#x3D; datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Methods&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="line">     *</span><br><span class="line">     * @return SnowflakeId</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public synchronized long nextId() &#123;</span><br><span class="line">        long timestamp &#x3D; timeGen();</span><br><span class="line">        &#x2F;&#x2F; 闰秒：如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br><span class="line">        if (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            long offset &#x3D; lastTimestamp - timestamp;</span><br><span class="line">            if (offset &lt;&#x3D; 5) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F; 时间偏差大小小于5ms，则等待两倍时间</span><br><span class="line">                    wait(offset &lt;&lt; 1);</span><br><span class="line">                    timestamp &#x3D; timeGen();</span><br><span class="line">                    if (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 还是小于，抛异常并上报</span><br><span class="line">                        throw new RuntimeException(String.format(ERROR_CLOCK_BACK, lastTimestamp - timestamp));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    throw new RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new RuntimeException(String.format(ERROR_CLOCK_BACK, lastTimestamp - timestamp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 解决跨毫秒生成ID序列号始终为偶数的缺陷:如果是同一时间生成的，则进行毫秒内序列</span><br><span class="line">        if (lastTimestamp &#x3D;&#x3D; timestamp) &#123;</span><br><span class="line">            &#x2F;&#x2F; 通过位与运算保证计算的结果范围始终是 0-4095</span><br><span class="line">            sequence &#x3D; (sequence + 1) &amp; sequenceMask;</span><br><span class="line">            &#x2F;&#x2F; 毫秒内序列溢出</span><br><span class="line">            if (sequence &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                &#x2F;&#x2F; 阻塞到下一个毫秒,获得新的时间戳</span><br><span class="line">                timestamp &#x3D; tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 时间戳改变，毫秒内序列重置</span><br><span class="line">            sequence &#x3D; 0L;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 上次生成ID的时间截</span><br><span class="line">        lastTimestamp &#x3D; timestamp;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">         * 1.左移运算是为了将数值移动到对应的段(41、5、5，12那段因为本来就在最右，因此不用左移)</span><br><span class="line">         * 2.然后对每个左移后的值(la、lb、lc、sequence)做位或运算，是为了把各个短的数据合并起来，合并成一个二进制数</span><br><span class="line">         * 3.最后转换成10进制，就是最终生成的id(64位的ID)</span><br><span class="line">         *&#x2F;</span><br><span class="line">        return ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift) | (workerId &lt;&lt; workerIdShift) | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @方法名称 parseUID</span><br><span class="line">     * @功能描述 &lt;pre&gt;反解析UID&lt;&#x2F;pre&gt;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseUID(Long uid) &#123;</span><br><span class="line">        &#x2F;&#x2F; 总位数</span><br><span class="line">        long totalBits &#x3D; 64L;</span><br><span class="line">        &#x2F;&#x2F; 标识</span><br><span class="line">        long signBits &#x3D; 1L;</span><br><span class="line">        &#x2F;&#x2F; 时间戳</span><br><span class="line">        long timestampBits &#x3D; 41L;</span><br><span class="line">        &#x2F;&#x2F; 解析Uid：标识 -- 时间戳 -- 数据中心 -- 机器码 --序列</span><br><span class="line">        long sequence &#x3D; (uid &lt;&lt; (totalBits - sequenceBits)) &gt;&gt;&gt; (totalBits - sequenceBits);</span><br><span class="line">        long dataCenterId &#x3D; (uid &lt;&lt; (timestampBits + signBits)) &gt;&gt;&gt; (totalBits - datacenterIdBits);</span><br><span class="line">        long workerId &#x3D; (uid &lt;&lt; (timestampBits + signBits + datacenterIdBits)) &gt;&gt;&gt; (totalBits - workerIdBits);</span><br><span class="line">        long deltaSeconds &#x3D; uid &gt;&gt;&gt; (datacenterIdBits + workerIdBits + sequenceBits);</span><br><span class="line">        &#x2F;&#x2F; 时间处理(补上开始时间戳)</span><br><span class="line">        Date thatTime &#x3D; new Date(twepoch + deltaSeconds);</span><br><span class="line">        String date &#x3D; new SimpleDateFormat(DATE_PATTERN_DEFAULT).format(thatTime);</span><br><span class="line">        &#x2F;&#x2F; 格式化输出</span><br><span class="line">        return String.format(MSG_UID_PARSE, uid, date, workerId, dataCenterId, sequence);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @方法名称 parseUID</span><br><span class="line">     * @功能描述 &lt;pre&gt;反解析UID(字符串截取，性能相对差；不推荐使用)&lt;&#x2F;pre&gt;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseUID(String uid) &#123;</span><br><span class="line">        uid &#x3D; Long.toBinaryString(Long.parseLong(uid));</span><br><span class="line">        int len &#x3D; uid.length();</span><br><span class="line">        &#x2F;* 解析Uid：标识 -- 时间戳 -- 数据中心 -- 机器码 --序列 *&#x2F;</span><br><span class="line">        &#x2F;&#x2F; sequence起始数</span><br><span class="line">        int sequenceStart &#x3D; len &lt; workerIdShift ? 0 : (int) (len - workerIdShift);</span><br><span class="line">        &#x2F;&#x2F; worker起始数</span><br><span class="line">        int workerStart &#x3D; len &lt; datacenterIdShift ? 0 : (int) (len - datacenterIdShift);</span><br><span class="line">        &#x2F;&#x2F; 时间起始数</span><br><span class="line">        int timeStart &#x3D; len &lt; timestampLeftShift ? 0 : (int) (len - timestampLeftShift);</span><br><span class="line">        String sequence &#x3D; uid.substring(sequenceStart, len);</span><br><span class="line">        String workerId &#x3D; sequenceStart &#x3D;&#x3D; 0 ? &quot;0&quot; : uid.substring(workerStart, sequenceStart);</span><br><span class="line">        String dataCenterId &#x3D; workerStart &#x3D;&#x3D; 0 ? &quot;0&quot; : uid.substring(timeStart, workerStart);</span><br><span class="line">        &#x2F;&#x2F; 时间处理(补上开始时间戳)</span><br><span class="line">        String time &#x3D; timeStart &#x3D;&#x3D; 0 ? &quot;0&quot; : uid.substring(0, timeStart);</span><br><span class="line">        Date timeDate &#x3D; new Date(Long.parseLong(time, 2) + twepoch);</span><br><span class="line">        String date &#x3D; new SimpleDateFormat(DATE_PATTERN_DEFAULT).format(timeDate);</span><br><span class="line">        &#x2F;&#x2F; 格式化输出</span><br><span class="line">        return String.format(MSG_UID_PARSE, uid, date, Integer.valueOf(workerId, 2), Integer.valueOf(dataCenterId, 2), Integer.valueOf(sequence, 2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 保证返回的毫秒数在参数之后(阻塞到下一个毫秒，直到获得新的时间戳)</span><br><span class="line">     *</span><br><span class="line">     * @param lastTimestamp 上次生成ID的时间截</span><br><span class="line">     * @return 当前时间戳</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected long tilNextMillis(long lastTimestamp) &#123;</span><br><span class="line">        long timestamp &#x3D; timeGen();</span><br><span class="line">        while (timestamp &lt;&#x3D; lastTimestamp) &#123;</span><br><span class="line">            timestamp &#x3D; timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        return timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获得系统当前毫秒数</span><br><span class="line">     *</span><br><span class="line">     * @return 当前时间(毫秒)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected long timeGen() &#123;</span><br><span class="line">        if (isClock) &#123;</span><br><span class="line">            &#x2F;&#x2F; 解决高并发下获取时间戳的性能问题</span><br><span class="line">            return SystemClock.now();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>SystemClock<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SystemClock &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 线程名--系统时钟</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final String THREAD_CLOCK_NAME &#x3D; &quot;System Clock&quot;;</span><br><span class="line"></span><br><span class="line">    private final long period;</span><br><span class="line"></span><br><span class="line">    private final AtomicLong now;</span><br><span class="line"></span><br><span class="line">    private SystemClock(long period) &#123;</span><br><span class="line">        this.period &#x3D; period;</span><br><span class="line">        this.now &#x3D; new AtomicLong(System.currentTimeMillis());</span><br><span class="line">        scheduleClockUpdating();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class InstanceHolder &#123;</span><br><span class="line">        public static final SystemClock INSTANCE &#x3D; new SystemClock(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static SystemClock instance() &#123;</span><br><span class="line">        return InstanceHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void scheduleClockUpdating() &#123;</span><br><span class="line">        ScheduledExecutorService scheduledpool &#x3D; new ScheduledThreadPoolExecutor(1, new NamingThreadFactory(THREAD_CLOCK_NAME, true));</span><br><span class="line">        scheduledpool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            now.set(System.currentTimeMillis());</span><br><span class="line">        &#125;, period, period, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private long currentTimeMillis() &#123;</span><br><span class="line">        return now.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static long now() &#123;</span><br><span class="line">        return instance().currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String nowDate() &#123;</span><br><span class="line">        return new Timestamp(instance().currentTimeMillis()).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>NetUtils（以机器为数据中心，端口为机器码）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class NetUtils&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取机器码</span><br><span class="line">     *</span><br><span class="line">     * @param maxId 最大值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static long getMachineNum(long maxId) &#123;</span><br><span class="line">        byte[] mac &#x3D; NetUtils.getMachineNum();</span><br><span class="line">        long id;</span><br><span class="line">        if (mac &#x3D;&#x3D; null) &#123;</span><br><span class="line">            id &#x3D; 1L;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            id &#x3D; ((0x000000FF &amp; (long) mac[mac.length - 1]) | (0x0000FF00 &amp; (((long) mac[mac.length - 2]) &lt;&lt; 8))) &gt;&gt; 6;</span><br><span class="line">            id &#x3D; id % (maxId + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取端口</span><br><span class="line">     *</span><br><span class="line">     * @param dataCenterId 数据中心id</span><br><span class="line">     * @param maxWorkerId  最大机器id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static long getPortNum(long dataCenterId, long maxWorkerId, long port) &#123;</span><br><span class="line">        &#x2F;&#x2F; dataCenterId + PID 的 hashcode 获取16个低位</span><br><span class="line">        String mpid &#x3D; String.valueOf(dataCenterId) + port;</span><br><span class="line">        return (mpid.hashCode() &amp; 0xffff) % (maxWorkerId + 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dubbo拦截器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Activate(group &#x3D; &#123;CommonConstants.PROVIDER, CommonConstants.CONSUMER&#125;, order &#x3D; 99)</span><br><span class="line">public class RpcTraceIdFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger log &#x3D; LoggerFactory.getLogger(RpcTraceIdFilter.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123;</span><br><span class="line">        String currentTraceId &#x3D; MDC.get(TRACE_ID);</span><br><span class="line">        String requestTraceId &#x3D; RpcContext.getContext().getAttachment(TRACE_ID);</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;traceId in MDC [&quot; + currentTraceId + &quot;] traceId in Request [&quot; + requestTraceId + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean bind &#x3D; false;</span><br><span class="line">        if (currentTraceId !&#x3D; null) &#123;</span><br><span class="line">            RpcContext.getContext().setAttachment(TRACE_ID, currentTraceId);</span><br><span class="line">        &#125; else if (null !&#x3D; requestTraceId) &#123;</span><br><span class="line">            MDC.put(TRACE_ID, requestTraceId);</span><br><span class="line">            bind &#x3D; true;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(&quot;bind [&quot; + requestTraceId + &quot;] to RootContext&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            return invoker.invoke(invocation);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (bind) &#123;</span><br><span class="line">                MDC.remove(TRACE_ID);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>druid配置</title>
    <url>/2019/08/13/druid%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">frame</span></span><br><span class="line">      <span class="comment"># 连接数据库的url，不同数据库不一样。例如： </span></span><br><span class="line">      <span class="comment"># mysql : jdbc:mysql://ip:port/database</span></span><br><span class="line">      <span class="comment"># oracle : jdbc:oracle:thin:@ip:port:database</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo?characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class="line">      <span class="comment"># 链接数据库的用户名</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 链接数据库的用户密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="comment"># 驱动（根据url自动识别）这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># 数据库类型</span></span><br><span class="line">      <span class="attr">db-type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 最大连接池数量（缺省值：8）</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 最小链接池数量</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-open-prepared-statements:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span></span><br><span class="line">      <span class="comment"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment"># 物理连接初始化的时候执行的sql</span></span><br><span class="line">      <span class="attr">connectionInitSqls:</span> <span class="string">select</span> <span class="number">1</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line">      <span class="comment"># 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="comment"># 是否启用WebStatFilter</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 访问路径</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/*"</span></span><br><span class="line">        <span class="comment"># 排除不必要的url</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">        <span class="comment"># 监控最大session数，默认是1000</span></span><br><span class="line">        <span class="attr">session-stat-max-count:</span> <span class="number">1000</span></span><br><span class="line">        <span class="comment"># 是否启用session的统计功能</span></span><br><span class="line">        <span class="attr">session-stat-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 是否启用监控单个Url调用的sql列表</span></span><br><span class="line">        <span class="attr">profile-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 使druid当前session的用户是谁，session_user_key是你保存到session中的sessionName</span></span><br><span class="line">        <span class="attr">principalSessionName:</span> <span class="string">session_user_key</span></span><br><span class="line">        <span class="comment"># 使druid只当当前的user是谁,cookie_user_key是你保存在cookie中的cookieName</span></span><br><span class="line">        <span class="attr">principalCookieName:</span> <span class="string">cookie_user_key</span>      </span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="comment"># 是否启用statViewServlet配置</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 访问监控页面</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/druid/*"</span></span><br><span class="line">        <span class="comment"># 禁止手动重置监控数据</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 设置监控页面的登陆名</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="comment"># 设置监控页面的登陆密码</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.ydwy.cloud.*.service.*.*(..)</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="comment">#是否允许注释</span></span><br><span class="line">            <span class="attr">comment-allow:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#是否允许删除行</span></span><br><span class="line">            <span class="attr">delete-allow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment">#是否允许删除表</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br><span class="line">       <span class="comment"># 监控统计</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="comment"># 数据库类型</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="comment"># 慢SQL</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 慢SQL执行时间</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">log4j:</span></span><br><span class="line">          <span class="attr">data-source-log-enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">statement-executable-sql-log-enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>dubbo自定义traceId</title>
    <url>/2019/09/12/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89traceId/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>dubbo环境变量</title>
    <url>/2019/07/18/dubbo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CompositeConfiguration (org.apache.dubbo.common.config)</span><br><span class="line">DynamicConfiguration (org.apache.dubbo.configcenter)</span><br><span class="line">    NacosDynamicConfiguration (org.apache.dubbo.configcenter.support.nacos)</span><br><span class="line">    ConsulDynamicConfiguration (org.apache.dubbo.configcenter.consul)</span><br><span class="line">    NopDynamicConfiguration (org.apache.dubbo.configcenter.support.nop)</span><br><span class="line">    EtcdDynamicConfiguration (org.apache.dubbo.configcenter.support.etcd)</span><br><span class="line">    ApolloDynamicConfiguration (org.apache.dubbo.configcenter.support.apollo)</span><br><span class="line">    ZookeeperDynamicConfiguration (org.apache.dubbo.configcenter.support.zookeeper)</span><br><span class="line">AbstractPrefixConfiguration (org.apache.dubbo.common.config)</span><br><span class="line">    EnvironmentConfiguration (org.apache.dubbo.common.config)</span><br><span class="line">    SystemConfiguration (org.apache.dubbo.common.config)</span><br><span class="line">    PropertiesConfiguration (org.apache.dubbo.common.config)</span><br><span class="line">    InmemoryConfiguration (org.apache.dubbo.common.config)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>dubbo之MergeableCluster</title>
    <url>/2019/08/08/dubbo%E4%B9%8BMergeableCluster/</url>
    <content><![CDATA[<p>@Override<br>@SuppressWarnings(“rawtypes”)<br>public Result invoke(final Invocation invocation) throws RpcException {<br>    // 拿到可用的Invoker集合<br>    List&lt;Invoker<T>&gt; invokers = directory.list(invocation);</p>
<pre><code>// 得到配置的merger参数值
String merger = getUrl().getMethodParameter( invocation.getMethodName(), Constants.MERGER_KEY );
// 如果方法不需要Merge，退化为只调一个group即可--选择第一个有效的Invoker调用并返回结果
if ( ConfigUtils.isEmpty(merger) ) {
    for(final Invoker&lt;T&gt; invoker : invokers ) {
        if (invoker.isAvailable()) {
            return invoker.invoke(invocation);
        }
    }
    // 如果没有任意Invoker满足isAvailable(), 那么尝试调用第一个Invoker(多尝试一下, 多一次机会)
    return invokers.iterator().next().invoke(invocation);
}
// 得到方法的返回类型
Class&lt;?&gt; returnType;
try {
    returnType = getInterface().getMethod(
            invocation.getMethodName(), invocation.getParameterTypes() ).getReturnType();
} catch ( NoSuchMethodException e ) {
    returnType = null;
}

// 由于我们调用的服务, 有两个不同的group, 且没有申明version, 所以这个map的key有两个值
Map&lt;String, Future&lt;Result&gt;&gt; results = new HashMap&lt;String, Future&lt;Result&gt;&gt;();
for( final Invoker&lt;T&gt; invoker : invokers ) {
    // 线程池方法异步调用
    Future&lt;Result&gt; future = executor.submit( new Callable&lt;Result&gt;() {
        public Result call() throws Exception {
            return invoker.invoke(new RpcInvocation(invocation, invoker));
        }
    } );
    // serviceKey非常重要--serviceKey的值为: groupName/serviceInterface:version,
    // 如果version没有申明, serviceKey的值为: groupName/serviceInterface
    // 如果group没有申明, serviceKey的值为: serviceInterface:version
    // 如果version和group都没有申明, serviceKey的值为: serviceInterface
    results.put( invoker.getUrl().getServiceKey(), future );
}

Object result = null;

// 保存异步执行结果集合
List&lt;Result&gt; resultList = new ArrayList&lt;Result&gt;( results.size() );

int timeout = getUrl().getMethodParameter( invocation.getMethodName(), Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT );
for ( Map.Entry&lt;String, Future&lt;Result&gt;&gt; entry : results.entrySet() ) {
    Future&lt;Result&gt; future = entry.getValue();
    try {
        Result r = future.get(timeout, TimeUnit.MILLISECONDS);
        // 如果异步执行有异常(包括超时), 那么输出error级别的日志, 不影响最终的结果(只是部分数据缺失)
        if (r.hasException()) {
            log.error(new StringBuilder(32).append(&quot;Invoke &quot;)
                          .append(getGroupDescFromServiceKey(entry.getKey()))
                          .append(&quot; failed: &quot;)
                          .append(r.getException().getMessage()).toString(),
                      r.getException());
        } else {
            resultList.add(r);
        }
    } catch ( Exception e ) {
        throw new RpcException( new StringBuilder( 32 )
                                        .append( &quot;Failed to invoke service &quot; )
                                        .append( entry.getKey() )
                                        .append( &quot;: &quot; )
                                        .append( e.getMessage() ).toString(),
                                e );
    }
}

if (resultList.size() == 0) {
    // 如果没有结果, 那么new一个result为null的RpcResult返回即可
    return new RpcResult((Object)null);
} else if (resultList.size() == 1) {
    // 如果只有一个结果, 那么直接返回即可
    return resultList.iterator().next();
}
// 如果返回类型为void, 那么new一个result为null的RpcResult返回即可
if (returnType == void.class) {
    return new RpcResult((Object)null);
}
// 如果merger的值是以.开头, 例如merger=&quot;.addAll&quot;, 这段逻辑就是调用结果类型的原生方法, 例如服务的返回结果是List&lt;Menu&gt;，即list类型，那么merger=&quot;.addAll&quot;就是调用List集合的.addAll()。
if ( merger.startsWith(&quot;.&quot;) ) {
    merger = merger.substring(1);
    Method method;
    try {
        // 首先得到调用方法，如果方法不存在，则抛出异常
        method = returnType.getMethod( merger, returnType );
    } catch ( NoSuchMethodException e ) {
        throw new RpcException(... ...);
    }
    if ( method != null ) {
        if ( !Modifier.isPublic( method.getModifiers() ) ) {
            method.setAccessible( true );
        }
        // 先取得第一个结果
        result = resultList.remove( 0 ).getValue();
        try {
            // 如果merger=&quot;.addAll&quot;指定的方法返回类型不为void，且和dubbo服务接口方法返回类型是相同类型，以测试代码为例，.addAll()返回类型是boolean，而dubbo服务接口方法返回类型是List，所以这里的if条件分支为false
            if ( method.getReturnType() != void.class
                    &amp;&amp; method.getReturnType().isAssignableFrom( result.getClass() ) ) {
                // 遍历剩余的结果集
                for ( Result r : resultList ) {
                    // 根据配置的merger值，例如merger=&quot;.addAll&quot;，依次对剩余结果集调用addAll()方法
                    result = method.invoke( result, r.getValue() );
                }
            } else {
                // 遍历剩余的结果集
                for ( Result r : resultList ) {
                    // 根据配置的merger值，例如merger=&quot;.addAll&quot;，依次对剩余结果集调用addAll()方法
                    method.invoke( result, r.getValue() );
                }
            }
        } catch ( Exception e ) {
            throw new RpcException( 
                    new StringBuilder( 32 )
                            .append( &quot;Can not merge result: &quot; )
                            .append( e.getMessage() ).toString(), 
                    e );
        }
    } else {
        throw new RpcException(... ...);
    }
} else {
    // 如果merger申明为不以.开头, 例如merger=&quot;list&quot;
    Merger resultMerger;
    // true和default都是默认值(大小写不敏感)
    if (ConfigUtils.isDefault(merger)) {
        resultMerger = MergerFactory.getMerger(returnType);
    } else {
        // 如果merger配置的是com.alibaba.dubbo.rpc.cluster.Merger文件中申明的值, 例如merger=&quot;list&quot;, 或者merger=&quot;map&quot;
        resultMerger = ExtensionLoader.getExtensionLoader(Merger.class).getExtension(merger);
    }
    if (resultMerger != null) {
        List&lt;Object&gt; rets = new ArrayList&lt;Object&gt;(resultList.size());
        for(Result r : resultList) {
            rets.add(r.getValue());
        }
        // 根据不用的merger实现, 合并结果
        result = resultMerger.merge(
                rets.toArray((Object[])Array.newInstance(returnType, 0)));
    } else {
        // 如果申明一些未知的merger, 那么抛出异常
        throw new RpcException( &quot;There is no merger to merge result.&quot; );
    }
}
return new RpcResult( result );</code></pre><p>}</p>
]]></content>
  </entry>
  <entry>
    <title>filter,interceptor,controllerAdvice,aspect,controller执行顺序</title>
    <url>/2019/09/16/filter-interceptor-controllerAdvice-aspect-controller%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p><img src="filter-interceptor-controllerAdvice-aspect-controller%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="filter-interceptor-controllerAdvice-aspect-controller执行顺序"></p>
]]></content>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>github</title>
    <url>/2019/10/29/github/</url>
    <content><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>月star<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;trending?since&#x3D;monthly</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;trending&#x2F;java?since&#x3D;monthly</span><br></pre></td></tr></table></figure></li>
<li>Filename too long<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global core.longpaths true</span><br></pre></td></tr></table></figure></li>
<li>下载文件后再关联<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories                                                             </span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;master master</span><br><span class="line">git remote add origin 远程仓库地址</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>gitclone慢的解决方式</title>
    <url>/2020/06/13/gitclone%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>使用国内镜像，目前已知Github国内镜像网站有github.com.cnpmjs.org和git.sdut.me/。速度根据各地情况而定，在clone某个项目的时候将github.com替换为github.com.cnpmjs.org即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>elk部署</title>
    <url>/2019/09/02/elk%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><p>[<a href="https://blog.csdn.net/qq_22211217/article/details/80764568]" target="_blank" rel="noopener">https://blog.csdn.net/qq_22211217/article/details/80764568]</a><br>[<a href="https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns]" target="_blank" rel="noopener">https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns]</a><br>[<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns]" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns]</a></p>
<ul>
<li>解压文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf logstash-7.3.1.tar.gz</span><br><span class="line">mv $PWD&#x2F;logstash-7.3.1 &#x2F;usr&#x2F;local&#x2F;logstash</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;logstash&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取列表</span><br><span class="line">bin&#x2F;logstash-plugin list</span><br><span class="line"></span><br><span class="line">bin&#x2F;logstash-plugin install logstash-filter-grok</span><br><span class="line">bin&#x2F;logstash-plugin install logstash-filter-date_formatter</span><br><span class="line">bin&#x2F;logstash-plugin install logstash-filter-date</span><br></pre></td></tr></table></figure></li>
<li>修改配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port &#x3D;&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port &#x3D;&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">        path &#x3D;&gt; [&quot;D:&#x2F;logs&#x2F;*.log&quot;]</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">	grok&#123;</span><br><span class="line">	   match &#x3D;&gt; &#123;</span><br><span class="line">			&quot;message&quot; &#x3D;&gt; &quot;\[%&#123;GREEDYDATA:traceid&#125;\]%&#123;SPACE&#125;%&#123;DATA:request_dt&#125;%&#123;SPACE&#125;%&#123;LOGLEVEL:level&#125;%&#123;SPACE&#125;%&#123;NUMBER:pid&#125;%&#123;SPACE&#125;---%&#123;SPACE&#125;\[%&#123;NOTSPACE:thread&#125;\]%&#123;SPACE&#125;%&#123;DATA:class&#125;%&#123;SPACE&#125;:%&#123;SPACE&#125;%&#123;GREEDYDATA:msg&#125;&quot;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">        ##对字符串转日期</span><br><span class="line">        date &#123;</span><br><span class="line">            match &#x3D;&gt; [ &quot;request_dt&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">			target &#x3D;&gt; &quot;request_dt&quot;</span><br><span class="line">			timezone &#x3D;&gt; &quot;+0800&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        ##添加时间元数据</span><br><span class="line">        date_formatter &#123;</span><br><span class="line">          source &#x3D;&gt; &quot;request_dt&quot;</span><br><span class="line">          target &#x3D;&gt; &quot;[@metadata][index_dt]&quot;</span><br><span class="line">          pattern &#x3D;&gt; &quot;yyyy-MM-dd&quot;</span><br><span class="line">          timezone &#x3D;&gt; &quot;Asia&#x2F;Shanghai&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        ###日期格式化</span><br><span class="line">		date_formatter &#123;</span><br><span class="line">          source &#x3D;&gt; &quot;request_dt&quot;</span><br><span class="line">          target &#x3D;&gt; &quot;request_dt&quot;</span><br><span class="line">          pattern &#x3D;&gt; &quot;yyyy-MM-dd HH:mm:ss.SSSZ&quot;</span><br><span class="line">          timezone &#x3D;&gt; &quot;Asia&#x2F;Shanghai&quot;</span><br><span class="line">        &#125;</span><br><span class="line">		 date_formatter &#123;</span><br><span class="line">          source &#x3D;&gt; &quot;@timestamp&quot;</span><br><span class="line">          target &#x3D;&gt; &quot;receive_dt&quot;</span><br><span class="line">		  pattern &#x3D;&gt; &quot;yyyy-MM-dd HH:mm:ss.SSSZ&quot;</span><br><span class="line">          timezone &#x3D;&gt; &quot;Asia&#x2F;Shanghai&quot;</span><br><span class="line">        &#125;</span><br><span class="line">		mutate &#123;</span><br><span class="line">                remove_field &#x3D;&gt; &quot;host&quot;</span><br><span class="line">                remove_field &#x3D;&gt; &quot;@timestamp&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	stdout&#123;</span><br><span class="line">        codec&#x3D;&gt;rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">  hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;192.168.10.133:9200&quot;]</span><br><span class="line">  index &#x3D;&gt; &quot;mspp-%&#123;[@metadata][index_dt]&#125;&quot;</span><br><span class="line">  user &#x3D;&gt; &quot;elastic&quot;</span><br><span class="line">  password &#x3D;&gt; &quot;mspp@123456&quot;</span><br><span class="line">&#125;</span><br><span class="line">#	if [level] &#x3D;&#x3D; &quot;ERROR&quot; &#123;</span><br><span class="line">#       elasticsearch &#123;</span><br><span class="line">#          #action &#x3D;&gt; &quot;index&quot;</span><br><span class="line">#          hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;192.168.10.133:9200&quot;]</span><br><span class="line">#           index &#x3D;&gt; &quot;mspp-error-%&#123;[@metadata][index_dt]&#125;&quot;</span><br><span class="line">#          user &#x3D;&gt; &quot;elastic&quot;</span><br><span class="line">#          password &#x3D;&gt; &quot;mspp@123456&quot;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd logstash</span><br><span class="line">chown -R logstash:logstash &#x2F;usr&#x2F;local&#x2F;logstash&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su – logstash</span><br><span class="line">nohup bin&#x2F;logstash -f config&#x2F;mspp.conf &amp;</span><br></pre></td></tr></table></figure></li>
<li>开放端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables  打开配置文件加入如下语句:</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5044 -j DROP   </span><br><span class="line">重启防火墙</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></li>
<li>date插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2018-07-04 17:43:35,503]</span><br><span class="line">grok&#123;</span><br><span class="line">      match &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;%&#123;DATA:raw_datetime&#125;&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">date&#123;</span><br><span class="line">       match &#x3D;&gt; [&quot;raw_datetime&quot;,&quot;YYYY-MM-dd HH:mm:ss,SSS&quot;]</span><br><span class="line">        remove_field &#x3D;&gt;[&quot;raw_datetime&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#将raw_datetime存到@timestamp 然后删除raw_datetime</span><br><span class="line"></span><br><span class="line">#24&#x2F;Jul&#x2F;2018:18:15:05 +0800</span><br><span class="line">date &#123;</span><br><span class="line">      match &#x3D;&gt; [&quot;timestamp&quot;,&quot;dd&#x2F;MMM&#x2F;YYYY:HH:mm:ss Z]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#1565931281</span><br><span class="line">    date&#123;</span><br><span class="line">        match &#x3D;&gt; [&quot;sql_timestamp&quot;,&quot;UNIX&quot;]</span><br><span class="line">        locale &#x3D;&gt; &quot;en&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="metadata-foo"><a href="#metadata-foo" class="headerlink" title="[@metadata][foo]"></a>[@metadata][foo]</h4></li>
<li>提供了一种简单、方便的方式来保存中间数据。这样一方面减少了logstash配置文件的复杂性：避免调用remove_field，另一方面也减少了输出中的一些不必要的数据<h2 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h2></li>
<li>解压文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf filebeat-7.3.1-linux-x86_64.tar.gz</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;filebeat&#x2F;</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;filebeat&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>修改配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">#配置log路径</span><br><span class="line">    - &#x2F;usr&#x2F;local&#x2F;app&#x2F;mspp-jar&#x2F;logs&#x2F;*.log</span><br><span class="line">	 #多行匹配</span><br><span class="line">  #multiline.pattern: ^[0-9]&#123;4&#125;-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30))) ([0-1]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]).[0-9]&#123;3&#125;</span><br><span class="line">  multiline.pattern: ^\[</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line">setup.kibana:</span><br><span class="line">  hosts: [&quot;xxx.xxx.xxx.xxx:5601&quot;]</span><br><span class="line">output.logstash:</span><br><span class="line">  	  hosts: [&quot;xxx.xxx.xxx.xxx:5044&quot;]</span><br></pre></td></tr></table></figure></li>
<li>创建用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd filebeat</span><br><span class="line">chown -R filebeat: filebeat &#x2F;usr&#x2F;local&#x2F;filebeat&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>启动服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su – filebeat</span><br><span class="line">nohup .&#x2F;filebeat -e -c filebeat.yml -d publish &amp;</span><br></pre></td></tr></table></figure></li>
<li>多行匹配<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The regexp Pattern that has to be matched. The example pattern matches all lines starting with [</span><br><span class="line">&#x2F;&#x2F;空行</span><br><span class="line"> multiline.pattern: ^\s+ </span><br><span class="line"></span><br><span class="line"> # Defines if the pattern set under pattern should be negated or not. Default is false.</span><br><span class="line"> multiline.negate: false</span><br><span class="line"></span><br><span class="line"> # Match can be set to &quot;after&quot; or &quot;before&quot;. It is used to define if lines should be append to a pattern</span><br><span class="line"> # that was (not) matched before or after or as long as a pattern is not matched based on negate.</span><br><span class="line"> # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash</span><br><span class="line"> multiline.match: after</span><br></pre></td></tr></table></figure></li>
<li>配置</li>
<li>启动<h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2></li>
<li>查看系统环境：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Elasticserch ~]# hostname </span><br><span class="line">Elasticserch</span><br><span class="line">[root@Elasticserch ~]# cat &#x2F;etc&#x2F;redhat-release </span><br><span class="line">CentOS release 6.5 (Final)</span><br><span class="line">[root@Elasticserch ~]# uname -r</span><br><span class="line">2.6.32-431.el6.x86_64</span><br><span class="line">[root@Elasticserch ~]# &#x2F;etc&#x2F;init.d&#x2F;iptables stop          </span><br><span class="line">[root@Elasticserch ~]# setenforce 0</span><br></pre></td></tr></table></figure></li>
<li>解压文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf elasticsearch-7.3.1-linux-x86_64.tar.gz</span><br><span class="line">mv $PWD&#x2F;elasticsearch-7.3.1-linux-x86_64 &#x2F;usr&#x2F;local&#x2F;elasticsearch</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;elasticsearch&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>配置vim config/elasticsearch.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.name: my-es-cluster           #集群的名称</span><br><span class="line">node.name: mspp-150                 #节点的名称</span><br><span class="line">path.data: &#x2F;usr&#x2F;local&#x2F;elasticsearch&#x2F;data   #数据路径</span><br><span class="line">path.logs: &#x2F;usr&#x2F;local&#x2F; elasticsearch &#x2F;logs    #日志路径</span><br><span class="line">bootstrap.memory_lock: false          #这行去掉注释把ture改成false，不改会造成服务启动报错</span><br><span class="line">bootstrap.system_call_filter: false      #添加这行，否则启动会报错。</span><br><span class="line">配置上述两行的原因：</span><br><span class="line">这是在因为Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</span><br><span class="line">network.host: 192.168.8.102          # elasticsearch主机地址</span><br><span class="line">http.port: 9200                        #端口号</span><br><span class="line">discovery.seed_hosts: [&quot;mspp-150&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;mspp-150&quot;]</span><br></pre></td></tr></table></figure></li>
<li>修改句柄<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line">*          soft    nproc     4096   #默认1024，改成4096</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">#末尾追加否则服务会报错。</span><br><span class="line">vm.max_map_count&#x3D;655360</span><br><span class="line">sysctl -p   #使上述配置生效</span><br><span class="line">vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">#添加下面内容：</span><br><span class="line">*               soft    nofile           65536</span><br><span class="line">*               hard    nofile           65536</span><br><span class="line">*               soft    nproc           65536</span><br><span class="line">*               hard    nproc           65536</span><br></pre></td></tr></table></figure></li>
<li>创建用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd elasticsearch</span><br><span class="line">chown -R elasticsearch.elasticsearch &#x2F;usr&#x2F;local&#x2F;elasticsearch&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su – elasticsearch</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;elasticsearch&#x2F;</span><br><span class="line">nohup bin&#x2F;elasticsearch &amp;</span><br></pre></td></tr></table></figure></li>
<li>开放端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables  打开配置文件加入如下语句:</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 9200 -j DROP   </span><br><span class="line">重启防火墙</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></li>
<li>创建索引<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mspp</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;traceid&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;class&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;level&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pid&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;thread&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;msg&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;timestamp&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加xpack权限管理"><a href="#添加xpack权限管理" class="headerlink" title="添加xpack权限管理"></a>添加xpack权限管理</h3></li>
<li>elasticsearch.yml中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br></pre></td></tr></table></figure></li>
<li>配置系统用户密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> .\elasticsearch-setup-passwords.bat interactive</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [D:\jdk\jdk1.8.0_192\jre] does not meet this requirement</span><br><span class="line">Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line">You will be prompted to enter passwords as the process progresses.</span><br><span class="line">Please confirm that you would like to continue [y&#x2F;N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">passwords must be at least [6] characters long</span><br><span class="line">Try again.</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Enter password for [apm_system]:</span><br><span class="line">Reenter password for [apm_system]:</span><br><span class="line">Enter password for [kibana]:</span><br><span class="line">Reenter password for [kibana]:</span><br><span class="line">Enter password for [logstash_system]:</span><br><span class="line">Reenter password for [logstash_system]:</span><br><span class="line">Enter password for [beats_system]:</span><br><span class="line">Reenter password for [beats_system]:</span><br><span class="line">Enter password for [remote_monitoring_user]:</span><br><span class="line">Reenter password for [remote_monitoring_user]:</span><br><span class="line">Changed password for user [apm_system]</span><br><span class="line">Changed password for user [kibana]</span><br><span class="line">Changed password for user [logstash_system]</span><br><span class="line">Changed password for user [beats_system]</span><br><span class="line">Changed password for user [remote_monitoring_user]</span><br><span class="line">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>
<li>设置kibana用户名密码<br>在kibana的配置文件kibana.yml里面添加<br>如果你的Elasticsearch受到基本身份验证的保护，这些设置将提供Kibana服务器在启动时用于对Kibana索引进行维护的用户名和密码，你的Kibana用户仍然需要使用Elasticsearch进行身份验证，这是通过Kibana服务器进行的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch.username: &quot;kibana&quot;</span><br><span class="line">elasticsearch.password: &quot;123456&quot;</span><br></pre></td></tr></table></figure>
<h3 id="filebeat配置文件output部分（负载均衡）"><a href="#filebeat配置文件output部分（负载均衡）" class="headerlink" title="filebeat配置文件output部分（负载均衡）"></a>filebeat配置文件output部分（负载均衡）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output.logstash:</span><br><span class="line">  # The Logstash hosts</span><br><span class="line">  hosts: [&quot;es01:5044&quot;,&quot;es02:5044&quot;]   # 多个logstash的beats地址和端口</span><br><span class="line">  loadbalance: true  # 启动负载均衡</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3></li>
<li>kibana搜索<br>[<a href="https://www.cnblogs.com/Jtianlin/p/10755372.html]" target="_blank" rel="noopener">https://www.cnblogs.com/Jtianlin/p/10755372.html]</a></li>
<li>日期搜索<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@timestamp &gt;&#x3D;   &quot;2019-09-07T16:38:35.921Z&quot; and @timestamp &lt;&#x3D; &quot;2019-09-11T16:53:42.177Z&quot;</span><br><span class="line"># [min TO max] 是闭区间</span><br><span class="line"># &#123;min TO max&#125; 是开区间</span><br><span class="line">@timestamp: [1510536210000 TO 1510550000000]</span><br><span class="line"># * 表示一端不限制范围</span><br><span class="line">count:[10 TO *]</span><br></pre></td></tr></table></figure></li>
<li>kibana时间显示问题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Management -&gt; Advanced settings -&gt; Timezone for date formatting </span><br><span class="line">设置成UTC</span><br></pre></td></tr></table></figure></li>
<li>kibana @timestamp 时间少8个小时<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date &#123;</span><br><span class="line">    match &#x3D;&gt; [&quot;PARAM_date&quot;, &quot;yyyy.MM.dd HH.mm.ss&quot;,&quot;UNIX_MS&quot;]</span><br><span class="line">    target &#x3D;&gt; &quot;@timestamp&quot;</span><br><span class="line">&#125;</span><br><span class="line">ruby &#123;</span><br><span class="line">    code &#x3D;&gt; &quot;event.set(&#39;timestamp&#39;, event.get(&#39;@timestamp&#39;).time.localtime + 8*60*60)&quot;</span><br><span class="line">&#125;</span><br><span class="line">ruby &#123;</span><br><span class="line">  code &#x3D;&gt; &quot;event.set(&#39;@timestamp&#39;,event.get(&#39;timestamp&#39;))&quot;</span><br><span class="line"> &#125;</span><br><span class="line">mutate &#123;</span><br><span class="line">    remove_field &#x3D;&gt; [&quot;timestamp&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>logstash创建索引有三种方式<ul>
<li>最简单，无须任何配置 </li>
<li>适合小规模集群的日志收集，需要在logstash的output插件中使用template指定本机器上的一个模板json路径， 例如  template =&gt; “/tmp/logstash.json” </li>
<li>适合大规模集群的日志收集，如何配置，主要配置logstash的output插件中两个参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> PUT _template&#x2F;mspp</span><br><span class="line">&#123;</span><br><span class="line"> &quot;index_patterns&quot;: [&quot;mspp-*&quot;],</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">      &quot;number_of_shards&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;@version&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;agent&quot; : &#123;</span><br><span class="line">          &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;ephemeral_id&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;hostname&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;type&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;version&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;class&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ecs&quot; : &#123;</span><br><span class="line">          &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;version&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;input&quot; : &#123;</span><br><span class="line">          &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;type&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;level&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;log&quot; : &#123;</span><br><span class="line">          &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;file&quot; : &#123;</span><br><span class="line">              &quot;properties&quot; : &#123;</span><br><span class="line">                &quot;path&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">                  &quot;fields&quot; : &#123;</span><br><span class="line">                    &quot;keyword&quot; : &#123;</span><br><span class="line">                      &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                      &quot;ignore_above&quot; : 256</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;flags&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;offset&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;long&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;message&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;msg&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;path&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;pid&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;integer&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;receive_dt&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">          &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss.SSSZ&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;request_dt&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">          &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss.SSSZ&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;tags&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;thread&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;traceid&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>go</title>
    <url>/2019/11/11/go/</url>
    <content><![CDATA[<h5 id="amp-和-区别"><a href="#amp-和-区别" class="headerlink" title="&amp;和*区别"></a>&amp;和*区别</h5><ul>
<li>&amp; 是取地址符号 , 即取得某个变量的地址</li>
<li>*表示一个变量是指针类型</li>
<li>*也可以表示一个指针变量所指向的存储单元，变量的值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br><span class="line"></span><br><span class="line">fmt.Println(*p) <span class="comment">// 通过指针 p 读取 i</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// 通过指针 p 设置 i</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo无法显示tags和categories</title>
    <url>/2019/09/10/hexo%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>hexo无法显示tags,categories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开 categories 文件夹下的 index.md ，在最下面一行加一行文字就行，注意中间有空格。</span><br><span class="line">type: categories</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure>
<p>hexo添加网易音乐</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 sidebar.swig文件中</span><br><span class="line">&#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;back-to-top motion-element&quot;&gt;</span><br><span class="line">  &lt;i class&#x3D;&quot;fa fa-arrow-up&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;span&gt;0%&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line">&#x2F;&#x2F;这里添加组件</span><br><span class="line">&#123;% if theme.background_music %&#125;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      &lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;110&quot; src&#x3D;&quot;&#123;&#123; theme.background_music &#125;&#125;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">在_config.yml</span><br><span class="line">background_music: &#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;33911781&amp;auto&#x3D;1&amp;height&#x3D;66</span><br></pre></td></tr></table></figure>
<h3 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h3><p>找到/themes/next/source/css/_common/components/sidebar/sidebar-author.styl全部替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">  -webkit-transform: rotate(360deg);</span><br><span class="line">  -moz-transform: rotate(360deg);</span><br><span class="line">  -ms-transform: rotate(360deg);</span><br><span class="line">  -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">  text-align: $site-author-name-align;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">  text-align: $site-description-align;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开启搜索"><a href="#开启搜索" class="headerlink" title="开启搜索"></a>开启搜索</h3><ul>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search  --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>配置主站_config.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>配置next主题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示问题"><a href="#解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示问题" class="headerlink" title="解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示问题"></a>解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 themes\hexo-theme-next\layout_partials 下找到hexo-theme-next的翻页组件，就是pagination.swig</span><br><span class="line"></span><br><span class="line">将</span><br><span class="line"></span><br><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-left&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        next_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-right&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;&#39;,</span><br><span class="line">        next_text: &#39;&gt;&#39;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="hexo设置阅读全文"><a href="#hexo设置阅读全文" class="headerlink" title="hexo设置阅读全文"></a>hexo设置阅读全文</h4>]]></content>
  </entry>
  <entry>
    <title>hystrix线程隔离（转）</title>
    <url>/2019/06/26/hystrix%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<a href="https://blog.csdn.net/weixin_34259159/article/details/91802194" title="" target="">hystrix线程隔离</a>
]]></content>
      <categories>
        <category>hystrix</category>
      </categories>
      <tags>
        <tag>hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>http三次握手四次挥手</title>
    <url>/2019/09/24/http%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<h4 id="网络协议分层–经典五层模型"><a href="#网络协议分层–经典五层模型" class="headerlink" title="网络协议分层–经典五层模型"></a>网络协议分层–经典五层模型</h4><p><img src="2.webp" alt="2.webp"></p>
<a id="more"></a>

<h4 id="https单向认证过程"><a href="#https单向认证过程" class="headerlink" title="https单向认证过程"></a>https单向认证过程</h4><p><img src="4.jpg" alt="4.jpg"></p>
<h4 id="https双向认证过程"><a href="#https双向认证过程" class="headerlink" title="https双向认证过程"></a>https双向认证过程</h4><p><img src="5.jpg" alt="5.jpg"></p>
<h4 id="https通信过程"><a href="#https通信过程" class="headerlink" title="https通信过程"></a>https通信过程</h4><p><img src="3.webp" alt="3.webp"></p>
<h4 id="为什么要采用三次握手，两次不行吗"><a href="#为什么要采用三次握手，两次不行吗" class="headerlink" title="为什么要采用三次握手，两次不行吗"></a>为什么要采用三次握手，两次不行吗</h4><p><img src="1.webp" alt="1.webp"></p>
<h4 id="那么为什么是4次挥手呢？tcp握手的时候为何ACK-确认-和SYN-建立连接-是一起发送。挥手的时候为什么是分开的时候发送呢？"><a href="#那么为什么是4次挥手呢？tcp握手的时候为何ACK-确认-和SYN-建立连接-是一起发送。挥手的时候为什么是分开的时候发送呢？" class="headerlink" title="那么为什么是4次挥手呢？tcp握手的时候为何ACK(确认)和SYN(建立连接)是一起发送。挥手的时候为什么是分开的时候发送呢？"></a>那么为什么是4次挥手呢？tcp握手的时候为何ACK(确认)和SYN(建立连接)是一起发送。挥手的时候为什么是分开的时候发送呢？</h4><ul>
<li>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭 SOCKET，<br>所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</li>
</ul>
<h4 id="为什么客户端最后还要等待2MSL？"><a href="#为什么客户端最后还要等待2MSL？" class="headerlink" title="为什么客户端最后还要等待2MSL？"></a>为什么客户端最后还要等待2MSL？</h4><ul>
<li>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</li>
<li>防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</li>
</ul>
<h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><ul>
<li>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。<br>所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，<br>则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，<br>所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，<br>我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</li>
</ul>
<ul>
<li>参考<br><a href="https://www.cnblogs.com/zxh930508/p/5432700.html" target="_blank" rel="noopener">https://www.cnblogs.com/zxh930508/p/5432700.html</a><br><a href="https://www.jianshu.com/p/bd31d3b23725" target="_blank" rel="noopener">https://www.jianshu.com/p/bd31d3b23725</a><br><a href="https://blog.csdn.net/chenchuanhai04/article/details/77185855" target="_blank" rel="noopener">https://blog.csdn.net/chenchuanhai04/article/details/77185855</a></li>
</ul>
]]></content>
      <categories>
        <category>https</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发锁</title>
    <url>/2019/12/10/java%E5%B9%B6%E5%8F%91%E9%94%81/</url>
    <content><![CDATA[<h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><ul>
<li>偏向锁是为了解决同步代码在单线程下访问性能问题</li>
</ul>
<h5 id="轻量锁"><a href="#轻量锁" class="headerlink" title="轻量锁"></a>轻量锁</h5><ul>
<li>减少无实际竞争情况下，使用重量级锁产生的性能消耗</li>
</ul>
<h5 id="重量锁"><a href="#重量锁" class="headerlink" title="重量锁"></a>重量锁</h5><ul>
<li><h5 id="锁转换"><a href="#锁转换" class="headerlink" title="锁转换"></a>锁转换</h5><p>第一个线程访问设置成偏向锁,如果第二个线程进行访问则设置轻量锁,<br>设置轻量锁成功后,有第二个线程访问尝试cas修改mark word但是失败了,进入自旋状态,如果自旋失败则膨胀为重量锁</p>
</li>
</ul>
<p>如图<br><img src="lock.png" alt="lock.png"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>并发锁</tag>
      </tags>
  </entry>
  <entry>
    <title>istio</title>
    <url>/2020/04/17/istio/</url>
    <content><![CDATA[<h4 id="istio安装步骤"><a href="#istio安装步骤" class="headerlink" title="istio安装步骤"></a>istio安装步骤</h4><ul>
<li>kubectl create namespace istio-system</li>
<li>kubectl label namespace default istio-injection=enabled</li>
<li>helm template install/kubernetes/helm/istio-init –name istio-init –namespace istio-system &gt; istio-init.yml</li>
<li>helm template install/kubernetes/helm/istio –name istio –namespace istio-system &gt; istio.yml</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>jenkins</title>
    <url>/2019/11/05/jenkins/</url>
    <content><![CDATA[<h4 id="插件下载慢"><a href="#插件下载慢" class="headerlink" title="插件下载慢"></a>插件下载慢</h4><ul>
<li>插件管理-&gt;高级-&gt;升级站点（<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json）" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json）</a></li>
<li>修改update/default.json  sed -i ‘s/http://updates.jenkins-ci.org/download/https://mirrors.tuna.tsinghua.edu.cn/jenkins/g’ default.json &amp;&amp; sed -i ‘s/http://<a href="http://www.google.com/https:\/\/www.baidu.com/g&#39;" target="_blank" rel="noopener">www.google.com/https:\/\/www.baidu.com/g&#39;</a> default.json</li>
<li>修改配置文件把hudson.model.UpdateCenter.xml <a href="http://updates.jenkins-ci.org/update-center.json" target="_blank" rel="noopener">http://updates.jenkins-ci.org/update-center.json</a> 改成 <a href="http://mirror.xmission.com/jenkins/updates/update-center.json" target="_blank" rel="noopener">http://mirror.xmission.com/jenkins/updates/update-center.json</a><h4 id="修改启动端口"><a href="#修改启动端口" class="headerlink" title="修改启动端口"></a>修改启动端口</h4><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br><span class="line">JENKINS_PORT</span><br><span class="line">systemctl start jenkins</span><br></pre></td></tr></table></figure>
<h5 id="window"><a href="#window" class="headerlink" title="window"></a>window</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jenkins.xml</span><br><span class="line">--httpPort&#x3D;80</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flatten files 不创建文件目录，只上传文件</span><br></pre></td></tr></table></figure>
<h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Extended Choice Parameter plugin 多选插件</span><br><span class="line">push over ssh 文件上传</span><br><span class="line">Maven Integration maven插件</span><br></pre></td></tr></table></figure>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5></li>
<li>安装simple theme插件</li>
<li>下载css <a href="http://afonsof.com/jenkins-material-theme/" target="_blank" rel="noopener">http://afonsof.com/jenkins-material-theme/</a></li>
<li>将css放置userContent/material/下</li>
<li>在主菜单中选择系统管理-&gt;系统设置配置自定义css URL <a href="http://localhost:8085/userContent/material/jenkins-material-theme.css" target="_blank" rel="noopener">http://localhost:8085/userContent/material/jenkins-material-theme.css</a></li>
</ul>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm命令</title>
    <url>/2019/12/04/jvm%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">类装载数</span></span><br><span class="line">jstat -class pid</span><br><span class="line"><span class="meta">#</span><span class="bash">编译数</span></span><br><span class="line">jstat -compiler pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 垃圾回收</span></span><br><span class="line">jstat -gc pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 垃圾回收统计</span></span><br><span class="line">jstat -gcutil pid</span><br></pre></td></tr></table></figure>
<h4 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h4><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><h4 id="参数名称"><a href="#参数名称" class="headerlink" title="参数名称"></a>参数名称</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S0C：第一个幸存区的大小</span><br><span class="line">S1C：第二个幸存区的大小</span><br><span class="line">S0U：第一个幸存区的使用大小</span><br><span class="line">S1U：第二个幸存区的使用大小</span><br><span class="line">EC：伊甸园区的大小</span><br><span class="line">EU：伊甸园区的使用大小</span><br><span class="line">OC：老年代大小</span><br><span class="line">OU：老年代使用大小</span><br><span class="line">MC：方法区大小</span><br><span class="line">MU：方法区使用大小</span><br><span class="line">CCSC:压缩类空间大小</span><br><span class="line">CCSU:压缩类空间使用大小</span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line">YGCT：年轻代垃圾回收消耗时间</span><br><span class="line">FGC：老年代垃圾回收次数</span><br><span class="line">FGCT：老年代垃圾回收消耗时间</span><br><span class="line">GCT：垃圾回收消耗总时间</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>java生产者和消费者</title>
    <url>/2019/05/27/java%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    <content><![CDATA[<h1 id="多个消费者只有一个在消费"><a href="#多个消费者只有一个在消费" class="headerlink" title="多个消费者只有一个在消费"></a>多个消费者只有一个在消费</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer3</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> max;</span><br><span class="line">		<span class="keyword">private</span> Queue&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(String name, <span class="keyword">int</span> max, Queue&lt;String&gt; data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(name);</span><br><span class="line">			<span class="keyword">this</span>.max = max;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">synchronized</span> (data) &#123;</span><br><span class="line">					<span class="keyword">if</span> (data.size() &gt;= max) &#123;</span><br><span class="line">						System.out.println(<span class="string">"full"</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							data.wait();</span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					Random random = <span class="keyword">new</span> Random();</span><br><span class="line">					<span class="keyword">int</span> i = random.nextInt();</span><br><span class="line">					data.add(<span class="string">""</span> + i);</span><br><span class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">"生产了 "</span> + i);</span><br><span class="line">					data.notifyAll();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> Queue&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(String name, Queue&lt;String&gt; data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(name);</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">synchronized</span> (data) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">"进来了 "</span>);</span><br><span class="line">					<span class="keyword">if</span> (data.size() == <span class="number">0</span>) &#123;</span><br><span class="line">						System.out.println(<span class="string">"null"</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							System.out.println(Thread.currentThread().getName() + <span class="string">"进入等待 "</span>);</span><br><span class="line">							data.wait();</span><br><span class="line">							System.out.println(Thread.currentThread().getName() + <span class="string">"被唤醒 "</span>);</span><br><span class="line">						&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						String remove = data.remove();</span><br><span class="line">						System.out.println(Thread.currentThread().getName() + <span class="string">"消费了 "</span> + remove);</span><br><span class="line">						data.notifyAll();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> max = <span class="number">10</span>;</span><br><span class="line">		Queue&lt;String&gt; data = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">		Producer product1 = <span class="keyword">new</span> Producer(<span class="string">"生产者1"</span>, max, data);</span><br><span class="line">		Producer product2 = <span class="keyword">new</span> Producer(<span class="string">"生产者2"</span>, max, data);</span><br><span class="line">		Consumer consumer1 = <span class="keyword">new</span> Consumer(<span class="string">"消费者1"</span>, data);</span><br><span class="line">		Consumer consumer2 = <span class="keyword">new</span> Consumer(<span class="string">"消费者2"</span>, data);</span><br><span class="line">		Consumer consumer3 = <span class="keyword">new</span> Consumer(<span class="string">"消费者3"</span>, data);</span><br><span class="line">		product1.start();</span><br><span class="line">		product2.start();</span><br><span class="line">		consumer1.start();</span><br><span class="line">		consumer2.start();</span><br><span class="line">		consumer3.start();</span><br><span class="line"></span><br><span class="line">		product1.join();</span><br><span class="line">		product2.join();</span><br><span class="line">		consumer1.join();</span><br><span class="line">		consumer2.join();</span><br><span class="line">		consumer3.join();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> producerConsumer = <span class="keyword">new</span> ProducerConsumer3();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			producerConsumer.run();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果中有抛出异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">消费者3进入等待 </span><br><span class="line">消费者1被唤醒 </span><br><span class="line">java.util.NoSuchElementException</span><br><span class="line">	at java.base&#x2F;java.util.LinkedList.removeFirst(LinkedList.java:274)</span><br><span class="line">	at java.base&#x2F;java.util.LinkedList.remove(LinkedList.java:689)</span><br><span class="line">	at br.com.leonardoz.patterns.producer_consumer.ProducerConsumer3$Consumer.run(ProducerConsumer3.java:78)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多线程的情况下，单个生产者和单个消费者用if判断是否await不会出错；当有多个消费者的时候，还使用if判断是否await就会产生问题，这是因为一个生产者消费者模型的任务队列，一个消费者一次放入多个任务，然后用notifyAll通知消费者，但是并非所有被唤醒的消费者都能取到一个任务，那么队列被读空了之后的消费者肯定得继续await。如果你用if来判断，这个消费者第二次被notify的时候就不会再次判断这个条件了，如果这个时候这个消费者又一次没抢到任务，但是代码还是往下执行了，轻则空指针异常，重了干出什么事情来都说不定了。所以必须用while来检查，这样可以保证每次被唤醒都会检查一次条件。</p>
</blockquote>
<h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.size() == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(data.size() == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>thread</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>thread</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalive</title>
    <url>/2019/10/24/keepalive/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载</span><br><span class="line">wget http:&#x2F;&#x2F;www.keepalived.org&#x2F;software&#x2F;keepalived-1.2.23.tar.gz</span><br><span class="line">#解压</span><br><span class="line">tar -zxvf keepalived-1.2.23.tar.gz</span><br><span class="line">cd keepalived-1.2.23</span><br><span class="line">#安装</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;keepalived   #prefix指定安装目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="keepalive-conf-master"><a href="#keepalive-conf-master" class="headerlink" title="keepalive.conf(master)"></a>keepalive.conf(master)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1012447978@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL #运行keepalived的机器的一个标识,多个节点标识可以相同，也可以不同</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx&#123;</span><br><span class="line">    script &quot;&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;check_ng.sh&quot;</span><br><span class="line">    interval 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass gys</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.123.100        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script&#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="keepalive-conf-slave"><a href="#keepalive-conf-slave" class="headerlink" title="keepalive.conf(slave)"></a>keepalive.conf(slave)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.2.156</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">  script &quot;&#x2F;data&#x2F;sh&#x2F;check_nginx.sh&quot;</span><br><span class="line">  interval 2</span><br><span class="line">  weight 2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">   mcast_src_ip 192.168.2.157</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.100</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> track_script &#123;</span><br><span class="line">  check_nginx</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="check-ng-sh"><a href="#check-ng-sh" class="headerlink" title="check_ng.sh"></a>check_ng.sh</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash </span><br><span class="line">COUNT&#x3D;$(ps -C nginx --no-header |wc -l)</span><br><span class="line">if [ &quot;$&#123;COUNT&#125;&quot;  &#x3D;  &quot;0&quot; ];then</span><br><span class="line">        echo &quot;重启nginx&quot;</span><br><span class="line">        sleep 2</span><br><span class="line">     COUNT&#x3D;$(ps -C nginx --no-header |wc -l)</span><br><span class="line">        if [ &quot;$&#123;COUNT&#125;&quot; &#x3D; &quot;0&quot; ];then</span><br><span class="line">             systemctl  stop  keepalived</span><br><span class="line">        fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="主备"><a href="#主备" class="headerlink" title="主备"></a>主备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主A</span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123; #指定keepalived在发生事情的时候，发送邮件告知，可以有多个地址，每行一个。</span><br><span class="line">        acassen@firewall.loc</span><br><span class="line">        failover@firewall.loc</span><br><span class="line">        sysadmin@firewall.loc</span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from Alexandre.Cassen@firewall.loc #指定发件人</span><br><span class="line">    smtp_server 127.0.0.1 #发送email的smtp地址</span><br><span class="line">    smtp_connect_timeout 30 #超时时间</span><br><span class="line">    router_id LVS_DEVEL #运行keepalived的机器的一个标识,多个节点标识可以相同，也可以不同</span><br><span class="line">    vrrp_skip_check_adv_addr </span><br><span class="line">    vrrp_strict</span><br><span class="line">    vrrp_garp_interval 0</span><br><span class="line">    vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER #指定当前节点为主节点 备用节点上设置为BACKUP即可</span><br><span class="line">    interface eth0 #绑定虚拟IP的网络接口</span><br><span class="line">    virtual_router_id 51 #VRRP组名，两个节点的设置必须一样，以指明各个节点属于同一VRRP组</span><br><span class="line">    priority 100 #主节点的优先级（1-254之间），备用节点必须比主节点优先级低</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123; #设置验证信息，两个节点必须一致</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123; #指定虚拟IP, 两个节点设置必须一样</span><br><span class="line">        192.168.1.21&#x2F;24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">备B</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123; #指定keepalived在发生事情的时候，发送邮件告知，可以有多个地址，每行一个。</span><br><span class="line">        acassen@firewall.loc</span><br><span class="line">        failover@firewall.loc</span><br><span class="line">        sysadmin@firewall.loc</span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from Alexandre.Cassen@firewall.loc #指定发件人</span><br><span class="line">    smtp_server 127.0.0.1 #发送email的smtp地址</span><br><span class="line">    smtp_connect_timeout 30 #超时时间</span><br><span class="line">    router_id LVS_DEVEL #运行keepalived的机器的一个标识,多个节点标识可以相同，也可以不同</span><br><span class="line">    vrrp_skip_check_adv_addr </span><br><span class="line">    vrrp_strict</span><br><span class="line">    vrrp_garp_interval 0</span><br><span class="line">    vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP #指定当前节点为主节点 备用节点上设置为BACKUP即可</span><br><span class="line">    interface eth0 #绑定虚拟IP的网络接口</span><br><span class="line">    virtual_router_id 51 #VRRP组名，两个节点的设置必须一样，以指明各个节点属于同一VRRP组</span><br><span class="line">    priority 99 #主节点的优先级（1-254之间），备用节点必须比主节点优先级低</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123; #设置验证信息，两个节点必须一致</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123; #指定虚拟IP, 两个节点设置必须一样</span><br><span class="line">        192.168.1.21&#x2F;24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主主"><a href="#主主" class="headerlink" title="主主"></a>主主</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主A</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">　　　notification_email &#123; #指定keepalived在发生事情的时候，发送邮件告知，可以有多个地址，每行一个。</span><br><span class="line">　　　　acassen@firewall.loc</span><br><span class="line">　　　　failover@firewall.loc</span><br><span class="line">　　　　sysadmin@firewall.loc</span><br><span class="line">&#125;</span><br><span class="line">　　notification_email_from Alexandre.Cassen@firewall.loc #指定发件人</span><br><span class="line">　　smtp_server 127.0.0.1 #发送email的smtp地址</span><br><span class="line">　　smtp_connect_timeout 30 #超时时间</span><br><span class="line">　　router_id LVS_DEVEL #运行keepalived的机器的一个标识,多个节点标识可以相同，也可以不同</span><br><span class="line">　　vrrp_skip_check_adv_addr </span><br><span class="line">　　vrrp_strict</span><br><span class="line">　　vrrp_garp_interval 0</span><br><span class="line">　　vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">　　state BACKUP </span><br><span class="line">　　interface eth0 </span><br><span class="line">　　virtual_router_id 51 #本机两个vrrp_instance组的此值不能相同，但对应备用节点的此值必须相同</span><br><span class="line">　　priority 99 #对应主节点值应该比此值大</span><br><span class="line">　　advert_int 1</span><br><span class="line">　　authentication &#123; </span><br><span class="line">　　　　auth_type PASS</span><br><span class="line">　　　　auth_pass 1111</span><br><span class="line">　　&#125;</span><br><span class="line">　　virtual_ipaddress &#123; </span><br><span class="line">　　　　192.168.1.21&#x2F;24</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">　　state MASTER </span><br><span class="line">　　interface eth0 </span><br><span class="line">　　virtual_router_id 52 #本机两个vrrp_instance组的此值不能相同，但对应备用节点的此值必须相同</span><br><span class="line">　　priority 100 #对应备用节点的值应该比此值小</span><br><span class="line">　　advert_int 1</span><br><span class="line">　　authentication &#123; </span><br><span class="line">　　　　auth_type PASS</span><br><span class="line">　　　　auth_pass 1111</span><br><span class="line">　　&#125;</span><br><span class="line">　　virtual_ipaddress &#123; </span><br><span class="line">　　　　192.168.1.22&#x2F;24</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">主B</span><br><span class="line">global_defs &#123;</span><br><span class="line">　　　notification_email &#123; #指定keepalived在发生事情的时候，发送邮件告知，可以有多个地址，每行一个。</span><br><span class="line">　　　　acassen@firewall.loc</span><br><span class="line">　　　　failover@firewall.loc</span><br><span class="line">　　　　sysadmin@firewall.loc</span><br><span class="line">&#125;</span><br><span class="line">　　notification_email_from Alexandre.Cassen@firewall.loc #指定发件人</span><br><span class="line">　　smtp_server 127.0.0.1 #发送email的smtp地址</span><br><span class="line">　　smtp_connect_timeout 30 #超时时间</span><br><span class="line">　　router_id LVS_DEVEL #运行keepalived的机器的一个标识,多个节点标识可以相同，也可以不同</span><br><span class="line">　　vrrp_skip_check_adv_addr </span><br><span class="line">　　vrrp_strict</span><br><span class="line">　　vrrp_garp_interval 0</span><br><span class="line">　　vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">　　state BACKUP </span><br><span class="line">　　interface eth0 </span><br><span class="line">　　virtual_router_id 51 #本机两个vrrp_instance组的此值不能相同，但对应备用节点的此值必须相同</span><br><span class="line">　　priority 99 #对应主节点值应该比此值大</span><br><span class="line">　　advert_int 1</span><br><span class="line">　　authentication &#123; </span><br><span class="line">　　　　auth_type PASS</span><br><span class="line">　　　　auth_pass 1111</span><br><span class="line">　　&#125;</span><br><span class="line">　　virtual_ipaddress &#123; </span><br><span class="line">　　　　192.168.1.21&#x2F;24</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">　　state MASTER </span><br><span class="line">　　interface eth0 </span><br><span class="line">　　virtual_router_id 52 #本机两个vrrp_instance组的此值不能相同，但对应备用节点的此值必须相同</span><br><span class="line">　　priority 100 #对应备用节点的值应该比此值小</span><br><span class="line">　　advert_int 1</span><br><span class="line">　　authentication &#123; </span><br><span class="line">　　　　auth_type PASS</span><br><span class="line">　　　　auth_pass 1111</span><br><span class="line">　　&#125;</span><br><span class="line">　　virtual_ipaddress &#123; </span><br><span class="line">　　　　192.168.1.22&#x2F;24</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>keepalive</category>
      </categories>
      <tags>
        <tag>keepalive</tag>
      </tags>
  </entry>
  <entry>
    <title>log自定义属性</title>
    <url>/2019/09/12/log%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h4 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h4><ul>
<li>PropertyDefiner方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: HostLogDefiner extends PropertyDefinerBase</span><br><span class="line">2: &lt;configuration&gt;</span><br><span class="line">    &lt;define name&#x3D;&quot;localHost&quot; class&#x3D;&quot;cn.jboost.common.IPLogDefiner&quot;&#x2F;&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;interfaceLogFile&quot;</span><br><span class="line">              class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">        &lt;File&gt;D:\\logs\\elk\\interface-$&#123;localHost&#125;.log&lt;&#x2F;File&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">     &lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li>LoggerContextListener方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LoggerStartupListener extends ContextAwareBase </span><br><span class="line">    implements LoggerContextListener, LifeCycle &#123;</span><br><span class="line"></span><br><span class="line">    private boolean started &#x3D; false;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        if (started) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Context context &#x3D; getContext();</span><br><span class="line">        context.putProperty(&quot;localHost&quot;, getUniqName());</span><br><span class="line">        started &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getUniqName() &#123;</span><br><span class="line">        String localIp &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            localIp &#x3D; InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            &#x2F;&#x2F;LOG.error(&quot;fail to get ip...&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        String uniqName &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">        if (localIp !&#x3D; null) &#123;</span><br><span class="line">            uniqName &#x3D; localIp + &quot;-&quot; + uniqName;</span><br><span class="line">        &#125;</span><br><span class="line">        return uniqName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;contextListener class&#x3D;&quot;xxx.xxx.xxx.LoggerStartupListener&quot;&#x2F;&gt;</span><br><span class="line">    &lt;define name&#x3D;&quot;localHost&quot; class&#x3D;&quot;cn.jboost.common.IPLogDefiner&quot;&#x2F;&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;interfaceLogFile&quot;</span><br><span class="line">              class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">        &lt;File&gt;D:\\logs\\elk\\interface-$&#123;localHost&#125;.log&lt;&#x2F;File&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line"> &lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<h4 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h4></li>
</ul>
<h4 id="traceId分布式链路日志追踪"><a href="#traceId分布式链路日志追踪" class="headerlink" title="traceId分布式链路日志追踪"></a>traceId分布式链路日志追踪</h4>]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk-security安装证书</title>
    <url>/2019/09/23/jdk-security%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h4 id="https请求错误"><a href="#https请求错误" class="headerlink" title="https请求错误"></a>https请求错误</h4><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><ul>
<li>执行代码main传参数<a href="https://xxxxxxxxxxx" target="_blank" rel="noopener">https://xxxxxxxxxxx</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InstallCert &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String host;</span><br><span class="line">        int port;</span><br><span class="line">        char[] passphrase;</span><br><span class="line">        if ((args.length &#x3D;&#x3D; 1) || (args.length &#x3D;&#x3D; 2)) &#123;</span><br><span class="line">            String[] c &#x3D; args[0].split(&quot;:&quot;);</span><br><span class="line">            host &#x3D; c[0];</span><br><span class="line">            port &#x3D; (c.length &#x3D;&#x3D; 1) ? 443 : Integer.parseInt(c[1]);</span><br><span class="line">            String p &#x3D; (args.length &#x3D;&#x3D; 1) ? &quot;changeit&quot; : args[1];</span><br><span class="line">            passphrase &#x3D; p.toCharArray();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;Usage: java InstallCert &lt;host&gt;[:port][passphrase]&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;存在证书信息</span><br><span class="line">        File file &#x3D; new File(&quot;jssecacerts&quot;);</span><br><span class="line">        if (!file.isFile()) &#123;</span><br><span class="line">            &#x2F;&#x2F;加载jdk信任证书</span><br><span class="line">            char SEP &#x3D; File.separatorChar;</span><br><span class="line">            File dir &#x3D; new File(System.getProperty(&quot;java.home&quot;) + SEP</span><br><span class="line">                    + &quot;lib&quot; + SEP + &quot;security&quot;);</span><br><span class="line">            file &#x3D; new File(dir, &quot;jssecacerts&quot;);</span><br><span class="line">            if (!file.isFile()) &#123;</span><br><span class="line">                file &#x3D; new File(dir, &quot;cacerts&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Loading KeyStore &quot; + file + &quot;...&quot;);</span><br><span class="line">        InputStream in &#x3D; new FileInputStream(file);</span><br><span class="line">        KeyStore ks &#x3D; KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(in, passphrase);</span><br><span class="line">        in.close();</span><br><span class="line">        &#x2F;&#x2F;访问https</span><br><span class="line">        SSLContext context &#x3D; SSLContext.getInstance(&quot;TLS&quot;);</span><br><span class="line">        TrustManagerFactory tmf &#x3D; TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmf.init(ks);</span><br><span class="line">        X509TrustManager defaultTrustManager &#x3D;</span><br><span class="line">                (X509TrustManager) tmf.getTrustManagers()[0];</span><br><span class="line">        &#x2F;&#x2F;保存证书链</span><br><span class="line">        SavingTrustManager tm &#x3D; new SavingTrustManager(defaultTrustManager);</span><br><span class="line">        context.init(null, new TrustManager[]&#123;tm&#125;, null);</span><br><span class="line">        SSLSocketFactory factory &#x3D; context.getSocketFactory();</span><br><span class="line">        System.out.println(&quot;Opening connection to &quot; + host + &quot;:&quot; + port +</span><br><span class="line">                &quot;...&quot;);</span><br><span class="line">        SSLSocket socket &#x3D; (SSLSocket) factory.createSocket(host, port);</span><br><span class="line">        socket.setSoTimeout(10000);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;执行握手</span><br><span class="line">            System.out.println(&quot;Starting SSL handshake...&quot;);</span><br><span class="line">            socket.startHandshake();</span><br><span class="line">            socket.close();</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(&quot;No errors, certificate is already trusted&quot;);</span><br><span class="line">        &#125; catch (SSLException e) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取信任证书</span><br><span class="line">        X509Certificate[] chain &#x3D; tm.chain;</span><br><span class="line">        if (chain &#x3D;&#x3D; null) &#123;</span><br><span class="line">            System.out.println(&quot;Could not obtain server certificate chain&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedReader reader &#x3D;</span><br><span class="line">                new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;Server sent &quot; + chain.length + &quot;certificate(s):&quot;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        MessageDigest sha1 &#x3D; MessageDigest.getInstance(&quot;SHA1&quot;);</span><br><span class="line">        MessageDigest md5 &#x3D; MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; chain.length; i++) &#123;</span><br><span class="line">            X509Certificate cert &#x3D; chain[i];</span><br><span class="line">            System.out.println</span><br><span class="line">                    (&quot; &quot; + (i + 1) + &quot; Subject &quot; + cert.getSubjectDN());</span><br><span class="line">            System.out.println(&quot; Issuer &quot; + cert.getIssuerDN());</span><br><span class="line">            sha1.update(cert.getEncoded());</span><br><span class="line">            System.out.println(&quot; sha1 &quot; + toHexString(sha1.digest()));</span><br><span class="line">            md5.update(cert.getEncoded());</span><br><span class="line">            System.out.println(&quot; md5 &quot; + toHexString(md5.digest()));</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Enter certificate to add to trusted keystore or&#39;q&#39; to quit: [1]&quot;);</span><br><span class="line">        String line &#x3D; reader.readLine().trim();</span><br><span class="line">        int k;</span><br><span class="line">        try &#123;</span><br><span class="line">            k &#x3D; (line.length() &#x3D;&#x3D; 0) ? 0 : Integer.parseInt(line) - 1;</span><br><span class="line">        &#125; catch (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(&quot;KeyStore not changed&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取信任证书</span><br><span class="line">        X509Certificate cert &#x3D; chain[k];</span><br><span class="line">        执行导入jdk信任证书里</span><br><span class="line">        String alias &#x3D; host + &quot;‐&quot; + (k + 1);</span><br><span class="line">        ks.setCertificateEntry(alias, cert);</span><br><span class="line">        OutputStream out &#x3D; new FileOutputStream(&quot;jssecacerts&quot;);</span><br><span class="line">        ks.store(out, passphrase);</span><br><span class="line">        out.close();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(cert);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println</span><br><span class="line">                (&quot;Added certificate to keystore &#39;jssecacerts&#39; using alias &#39;&quot;</span><br><span class="line">                        + alias + &quot;&#39;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final char[] HEXDIGITS &#x3D; &quot;0123456789abcdef&quot;.toCharArray();</span><br><span class="line"></span><br><span class="line">    private static String toHexString(byte[] bytes) &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder(bytes.length * 3);</span><br><span class="line">        for (int b : bytes) &#123;</span><br><span class="line">            b &amp;&#x3D; 0xff;</span><br><span class="line">            sb.append(HEXDIGITS[b &gt;&gt; 4]);</span><br><span class="line">            sb.append(HEXDIGITS[b &amp; 15]);</span><br><span class="line">            sb.append(&#39; &#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class SavingTrustManager implements X509TrustManager &#123;</span><br><span class="line">        private final X509TrustManager tm;</span><br><span class="line">        private X509Certificate[] chain;</span><br><span class="line"></span><br><span class="line">        SavingTrustManager(X509TrustManager tm) &#123;</span><br><span class="line">            this.tm &#x3D; tm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            throw new UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void checkClientTrusted(X509Certificate[] chain, String</span><br><span class="line">                authType)</span><br><span class="line">                throws CertificateException &#123;</span><br><span class="line">            throw new UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void checkServerTrusted(X509Certificate[] chain, String</span><br><span class="line">                authType)</span><br><span class="line">                throws CertificateException &#123;</span><br><span class="line">            this.chain &#x3D; chain;</span><br><span class="line">            tm.checkServerTrusted(chain, authType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>输入1，在根目录将生成的jssecacerts拷贝到\jre\lib\security（如：D:\jdk\jdk1.8.0_192\jre\lib\security）</li>
</ul>
<h5 id="第二种方式在https请求中添加"><a href="#第二种方式在https请求中添加" class="headerlink" title="第二种方式在https请求中添加"></a>第二种方式在https请求中添加</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> KeyManagerFactory kmfactory &#x3D; KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">kmfactory.init(keyStore, certPassword.toCharArray());</span><br><span class="line">KeyManager[] keymanagers &#x3D; kmfactory.getKeyManagers();</span><br><span class="line"></span><br><span class="line">sslcontext.init(keymanagers, new TrustManager[]&#123; new X509TrustManager() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, null);</span><br></pre></td></tr></table></figure>
<h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSLContext sslcontext &#x3D; SSLContexts.custom().loadKeyMaterial(keyStore, certPassword.toCharArray())</span><br><span class="line">        .loadTrustMaterial(keyStore, new TrustStrategy() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<h4 id="从pfx中获取公钥私钥信息"><a href="#从pfx中获取公钥私钥信息" class="headerlink" title="从pfx中获取公钥私钥信息"></a>从pfx中获取公钥私钥信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> KeyStore ks &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;);</span><br><span class="line">ks.load(classPathResource.getInputStream(), &quot;15634357874&quot;.toCharArray());</span><br><span class="line"></span><br><span class="line">Enumeration aliases &#x3D; ks.aliases();</span><br><span class="line">String keyAlias &#x3D; null;</span><br><span class="line">if (aliases.hasMoreElements()) &#x2F;&#x2F; we are readin just one certificate.</span><br><span class="line">&#123;</span><br><span class="line">    keyAlias &#x3D; (String)aliases.nextElement();</span><br><span class="line">    System.out.println(&quot;alias&#x3D;[&quot; + keyAlias + &quot;]&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Now once we know the alias, we could get the keys.</span><br><span class="line">System.out.println(&quot;is key entry&#x3D;&quot; + ks.isKeyEntry(keyAlias));</span><br><span class="line">PrivateKey prikey &#x3D; (PrivateKey) ks.getKey(keyAlias, &quot;password&quot;.toCharArray());</span><br><span class="line">X509Certificate cert &#x3D; (X509Certificate)ks.getCertificate(keyAlias);</span><br><span class="line">PublicKey pubkey &#x3D; cert.getPublicKey();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;privateKey:&quot; + BaseEncoding.base64().encode(prikey.getEncoded()));</span><br><span class="line">String privateKey &#x3D; BaseEncoding.base64().encode(prikey.getEncoded());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;publicKey:&quot; + BaseEncoding.base64().encode(pubkey.getEncoded()));</span><br><span class="line">String publicKey &#x3D; BaseEncoding.base64().encode(pubkey.getEncoded());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建x.509工厂类</span><br><span class="line">CertificateFactory cf &#x3D; CertificateFactory.getInstance(&quot;X.509&quot;);</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;创建证书实例</span><br><span class="line">&#x2F;&#x2F;X509Certificate cert &#x3D; (X509Certificate) cf.generateCertificate(classPathResource.getInputStream());</span><br><span class="line"></span><br><span class="line">SimpleDateFormat dateformat &#x3D; new SimpleDateFormat(&quot;yyyy&#x2F;MM&#x2F;dd&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;证书版本</span><br><span class="line">String info &#x3D; String.valueOf(cert.getVersion());</span><br><span class="line">System.out.println(&quot;证书版本&#x3D;&#x3D;&#x3D;&#x3D;&quot; + info);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得证书序列号</span><br><span class="line">info &#x3D; cert.getSerialNumber().toString(16);</span><br><span class="line">System.out.println(&quot;证书序列号:&quot; + info);</span><br><span class="line">&#x2F;&#x2F; 获得证书有效期</span><br><span class="line">Date beforedate &#x3D; cert.getNotBefore();</span><br><span class="line">info &#x3D; dateformat.format(beforedate);</span><br><span class="line">System.out.println(&quot;证书生效日期:&quot; + info);</span><br><span class="line">Date afterdate &#x3D; cert.getNotAfter();</span><br><span class="line">info &#x3D; dateformat.format(afterdate);</span><br><span class="line">System.out.println(&quot;证书失效日期:&quot; + info);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得证书主体信息</span><br><span class="line">info &#x3D; cert.getSubjectDN().getName();</span><br><span class="line">System.out.println(&quot;证书拥有者:&quot; + info);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得证书颁发者信息</span><br><span class="line">info &#x3D; cert.getIssuerDN().getName();</span><br><span class="line">System.out.println(&quot;证书颁发者:&quot; + info);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得证书签名算法名称</span><br><span class="line">info &#x3D; cert.getSigAlgName();</span><br><span class="line">System.out.println(&quot;证书签名算法:&quot; + info);</span><br><span class="line">&#x2F;&#x2F;证书指纹信息</span><br><span class="line">System.out.println(&quot;证书指纹信息\n&quot; + (DigestUtils.sha1Hex(cert.getEncoded())));</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;证书公钥信息&quot; + cert.getPublicKey());</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>dubbo源码解析</title>
    <url>/2019/07/04/dubbo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>@Override<br>public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {<br>    return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));<br>}<br>public NettyServer(URL url, ChannelHandler handler) throws RemotingException {<br>    // you can customize name and type of client thread pool by THREAD_NAME_KEY and THREADPOOL_KEY in CommonConstants.<br>    // the handler will be warped: MultiMessageHandler-&gt;HeartbeatHandler-&gt;handler<br>    super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));<br>}</p>
<p>ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME))</p>
<p>protected ChannelHandler wrapInternal(ChannelHandler handler, URL url) {<br>    return new MultiMessageHandler(new HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher.class)<br>            .getAdaptiveExtension().dispatch(handler, url)));<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">NettyServerHandler#channelRead(ChannelHandlerContext, MessageEvent)</span><br><span class="line">  —&gt; AbstractPeer#received(Channel, Object)</span><br><span class="line">    —&gt; MultiMessageHandler#received(Channel, Object)</span><br><span class="line">      —&gt; HeartbeatHandler#received(Channel, Object)</span><br><span class="line">        —&gt; AllChannelHandler#received(Channel, Object)</span><br><span class="line">          —&gt; ExecutorService#execute(Runnable)    &#x2F;&#x2F; 由线程池执行后续的调用逻辑</span><br><span class="line">           —&gt; DecodeHandler</span><br><span class="line">              —&gt; HeaderExchangeHandler</span><br><span class="line">                —&gt; DubboProtocol</span><br><span class="line">ChannelEventRunnable#run()</span><br><span class="line">  —&gt; DecodeHandler#received(Channel, Object)</span><br><span class="line">    —&gt; HeaderExchangeHandler#received(Channel, Object)</span><br><span class="line">      —&gt; HeaderExchangeHandler#handleRequest(ExchangeChannel, Request)</span><br><span class="line">        —&gt; DubboProtocol.requestHandler#reply(ExchangeChannel, Object)</span><br><span class="line">          —&gt; Filter#invoke(Invoker, Invocation)</span><br><span class="line">            —&gt; AbstractProxyInvoker#invoke(Invocation)</span><br><span class="line">              —&gt; Wrapper0#invokeMethod(Object, String, Class[], Object[])</span><br><span class="line">                —&gt; DemoServiceImpl#sayHello(String)</span><br></pre></td></tr></table></figure>
<p>调用顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyChannel(创建NettyClient时，connect获取的通道)</span><br><span class="line">NettyClient（通过NettyTransporter创建的）</span><br><span class="line">HeaderExchangeChannel（HeaderExchangeClient初始化创建的）</span><br><span class="line">HeaderExchangeClient（通过HeaderExchanger，创建的）</span><br><span class="line">ReferenceCountExchangeClient（wrapper）</span><br><span class="line">DubboInvoker</span><br><span class="line">AsyncToSyncInvoker</span><br><span class="line">ListenerInvokerWrapper</span><br><span class="line">filter</span><br><span class="line">CallbackRegistrationInvoker</span><br><span class="line">InvokerDelegate</span><br><span class="line">FailoverClusterInvoker</span><br><span class="line">MockClusterInvoker</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy0#sayHello(String)</span><br><span class="line">  —&gt; InvokerInvocationHandler#invoke(Object, Method, Object[])</span><br><span class="line">    —&gt; MockClusterInvoker#invoke(Invocation)</span><br><span class="line">      —&gt; AbstractClusterInvoker#invoke(Invocation)</span><br><span class="line">        —&gt; FailoverClusterInvoker#doInvoke(Invocation, List&lt;Invoker&lt;T&gt;&gt;, LoadBalance)</span><br><span class="line">          —&gt; Filter#invoke(Invoker, Invocation)  &#x2F;&#x2F; 包含多个 Filter 调用</span><br><span class="line">            —&gt; ListenerInvokerWrapper#invoke(Invocation) </span><br><span class="line">              —&gt; AbstractInvoker#invoke(Invocation) </span><br><span class="line">                —&gt; DubboInvoker#doInvoke(Invocation)</span><br><span class="line">                  —&gt; ReferenceCountExchangeClient#request(Object, int)</span><br><span class="line">                    —&gt; HeaderExchangeClient#request(Object, int)</span><br><span class="line">                      —&gt; HeaderExchangeChannel#request(Object, int)</span><br><span class="line">                        —&gt; AbstractPeer#send(Object)</span><br><span class="line">                          —&gt; AbstractClient#send(Object, boolean)</span><br><span class="line">                            —&gt; NettyChannel#send(Object, boolean)</span><br><span class="line">                              —&gt; NioClientSocketChannel#write(Object)</span><br></pre></td></tr></table></figure>
<h3 id="封装invoke"><a href="#封装invoke" class="headerlink" title="封装invoke"></a>封装invoke</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DubboProtocol</span><br><span class="line">ProtocolListenerWrapper</span><br><span class="line">ProtocolFilterWrapper</span><br><span class="line">QosProtocolWrapper</span><br></pre></td></tr></table></figure>
<p>入口 （订阅成功，通知refreshOverrideAndInvoker）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RegistryDirectory&lt;T&gt; directory &#x3D; new RegistryDirectory&lt;T&gt;(type, url);</span><br><span class="line">directory.setRegistry(registry);</span><br><span class="line">directory.setProtocol(protocol);</span><br><span class="line">&#x2F;&#x2F; all attributes of REFER_KEY</span><br><span class="line">Map&lt;String, String&gt; parameters &#x3D; new HashMap&lt;String, String&gt;(directory.getUrl().getParameters());</span><br><span class="line">URL subscribeUrl &#x3D; new URL(CONSUMER_PROTOCOL, parameters.remove(REGISTER_IP_KEY), 0, type.getName(), parameters);</span><br><span class="line">if (!ANY_VALUE.equals(url.getServiceInterface()) &amp;&amp; url.getParameter(REGISTER_KEY, true)) &#123;</span><br><span class="line">    directory.setRegisteredConsumerUrl(getRegisteredConsumerUrl(subscribeUrl, url));</span><br><span class="line">    registry.register(directory.getRegisteredConsumerUrl());</span><br><span class="line">&#125;</span><br><span class="line">directory.buildRouterChain(subscribeUrl);</span><br><span class="line">&#x2F;&#x2F;入口在这里</span><br><span class="line">directory.subscribe(subscribeUrl.addParameter(CATEGORY_KEY,</span><br><span class="line">        PROVIDERS_CATEGORY + &quot;,&quot; + CONFIGURATORS_CATEGORY + &quot;,&quot; + ROUTERS_CATEGORY));</span><br><span class="line"></span><br><span class="line">Invoker invoker &#x3D; cluster.join(directory);</span><br><span class="line">ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">return invoker;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)</span><br><span class="line">  —&gt; AbstractPeer#received(Channel, Object)</span><br><span class="line">    —&gt; MultiMessageHandler#received(Channel, Object)</span><br><span class="line">      —&gt; HeartbeatHandler#received(Channel, Object)</span><br><span class="line">        —&gt; AllChannelHandler#received(Channel, Object)</span><br><span class="line">          —&gt; ExecutorService#execute(Runnable)    &#x2F;&#x2F; 由线程池执行后续的调用逻辑</span><br></pre></td></tr></table></figure>
<p>分组RegistryDirectory <code>this.invokers = multiGroup ? toMergeInvokerList(newInvokers) : newInvokers;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void refreshInvoker(List&lt;URL&gt; invokerUrls) &#123;</span><br><span class="line">       Assert.notNull(invokerUrls, &quot;invokerUrls should not be null&quot;);</span><br><span class="line"></span><br><span class="line">       if (invokerUrls.size() &#x3D;&#x3D; 1</span><br><span class="line">               &amp;&amp; invokerUrls.get(0) !&#x3D; null</span><br><span class="line">               &amp;&amp; EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) &#123;</span><br><span class="line">           this.forbidden &#x3D; true; &#x2F;&#x2F; Forbid to access</span><br><span class="line">           this.invokers &#x3D; Collections.emptyList();</span><br><span class="line">           routerChain.setInvokers(this.invokers);</span><br><span class="line">           destroyAllInvokers(); &#x2F;&#x2F; Close all invokers</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           this.forbidden &#x3D; false; &#x2F;&#x2F; Allow to access</span><br><span class="line">           Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap &#x3D; this.urlInvokerMap; &#x2F;&#x2F; local reference</span><br><span class="line">           if (invokerUrls &#x3D;&#x3D; Collections.&lt;URL&gt;emptyList()) &#123;</span><br><span class="line">               invokerUrls &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">           &#125;</span><br><span class="line">           if (invokerUrls.isEmpty() &amp;&amp; this.cachedInvokerUrls !&#x3D; null) &#123;</span><br><span class="line">               invokerUrls.addAll(this.cachedInvokerUrls);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               this.cachedInvokerUrls &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">               this.cachedInvokerUrls.addAll(invokerUrls);&#x2F;&#x2F;Cached invoker urls, convenient for comparison</span><br><span class="line">           &#125;</span><br><span class="line">           if (invokerUrls.isEmpty()) &#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">           Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap &#x3D; toInvokers(invokerUrls);&#x2F;&#x2F; Translate url list to Invoker map</span><br><span class="line"></span><br><span class="line">           &#x2F;**</span><br><span class="line">            * If the calculation is wrong, it is not processed.</span><br><span class="line">            *</span><br><span class="line">            * 1. The protocol configured by the client is inconsistent with the protocol of the server.</span><br><span class="line">            *    eg: consumer protocol &#x3D; dubbo, provider only has other protocol services(rest).</span><br><span class="line">            * 2. The registration center is not robust and pushes illegal specification data.</span><br><span class="line">            *</span><br><span class="line">            *&#x2F;</span><br><span class="line">           if (CollectionUtils.isEmptyMap(newUrlInvokerMap)) &#123;</span><br><span class="line">               logger.error(new IllegalStateException(&quot;urls to invokers error .invokerUrls.size :&quot; + invokerUrls.size() + &quot;, invoker.size :0. urls :&quot; + invokerUrls</span><br><span class="line">                       .toString()));</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           List&lt;Invoker&lt;T&gt;&gt; newInvokers &#x3D; Collections.unmodifiableList(new ArrayList&lt;&gt;(newUrlInvokerMap.values()));</span><br><span class="line">           &#x2F;&#x2F; pre-route and build cache, notice that route cache should build on original Invoker list.</span><br><span class="line">           &#x2F;&#x2F; toMergeMethodInvokerMap() will wrap some invokers having different groups, those wrapped invokers not should be routed.</span><br><span class="line">           routerChain.setInvokers(newInvokers);</span><br><span class="line">           this.invokers &#x3D; multiGroup ? toMergeInvokerList(newInvokers) : newInvokers;</span><br><span class="line">           this.urlInvokerMap &#x3D; newUrlInvokerMap;</span><br><span class="line"></span><br><span class="line">           try &#123;</span><br><span class="line">               destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap); &#x2F;&#x2F; Close the unused Invoker</span><br><span class="line">           &#125; catch (Exception e) &#123;</span><br><span class="line">               logger.warn(&quot;destroyUnusedInvokers error. &quot;, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>本地存根（stub）<code>StubProxyFactoryWrapper</code></p>
<blockquote>
<p>提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line">    T proxy &#x3D; proxyFactory.getProxy(invoker);</span><br><span class="line">    if (GenericService.class !&#x3D; invoker.getInterface()) &#123;</span><br><span class="line">        URL url &#x3D; invoker.getUrl();</span><br><span class="line">        String stub &#x3D; url.getParameter(STUB_KEY, url.getParameter(LOCAL_KEY));</span><br><span class="line">        if (ConfigUtils.isNotEmpty(stub)) &#123;</span><br><span class="line">            Class&lt;?&gt; serviceType &#x3D; invoker.getInterface();</span><br><span class="line">            if (ConfigUtils.isDefault(stub)) &#123;</span><br><span class="line">                if (url.hasParameter(STUB_KEY)) &#123;</span><br><span class="line">                    stub &#x3D; serviceType.getName() + &quot;Stub&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    stub &#x3D; serviceType.getName() + &quot;Local&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Class&lt;?&gt; stubClass &#x3D; ReflectUtils.forName(stub);</span><br><span class="line">                if (!serviceType.isAssignableFrom(stubClass)) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;The stub implementation class &quot; + stubClass.getName() + &quot; not implement interface &quot; + serviceType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Constructor&lt;?&gt; constructor &#x3D; ReflectUtils.findConstructor(stubClass, serviceType);</span><br><span class="line">                    proxy &#x3D; (T) constructor.newInstance(new Object[]&#123;proxy&#125;);</span><br><span class="line">                    &#x2F;&#x2F;export stub service</span><br><span class="line">                    URLBuilder urlBuilder &#x3D; URLBuilder.from(url);</span><br><span class="line">                    if (url.getParameter(STUB_EVENT_KEY, DEFAULT_STUB_EVENT)) &#123;</span><br><span class="line">                        urlBuilder.addParameter(STUB_EVENT_METHODS_KEY, StringUtils.join(Wrapper.getWrapper(proxy.getClass()).getDeclaredMethodNames(), &quot;,&quot;));</span><br><span class="line">                        urlBuilder.addParameter(IS_SERVER_KEY, Boolean.FALSE.toString());</span><br><span class="line">                        try &#123;</span><br><span class="line">                            export(proxy, (Class) invoker.getInterface(), urlBuilder.build());</span><br><span class="line">                        &#125; catch (Exception e) &#123;</span><br><span class="line">                            LOGGER.error(&quot;export a stub service error.&quot;, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;No such constructor \&quot;public &quot; + stubClass.getSimpleName() + &quot;(&quot; + serviceType.getName() + &quot;)\&quot; in stub implementation class &quot; + stubClass.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                LOGGER.error(&quot;Failed to create stub implementation class &quot; + stub + &quot; in consumer &quot; + NetUtils.getLocalHost() + &quot; use dubbo version &quot; + Version.getVersion() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                &#x2F;&#x2F; ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>延迟暴露 <code>ServiceConfig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void export() &#123;</span><br><span class="line">    checkAndUpdateSubConfigs();</span><br><span class="line"></span><br><span class="line">    if (!shouldExport()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (shouldDelay()) &#123;</span><br><span class="line">        DELAY_EXPORT_EXECUTOR.schedule(this::doExport, getDelay(), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        doExport();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并发控制 <code>ExecuteLimitFilter  executes=&quot;10&quot;</code></p>
<blockquote>
<p>服务器端并发执行（或占用线程池线程数）不能超过 10 个</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123;</span><br><span class="line">    URL url &#x3D; invoker.getUrl();</span><br><span class="line">    String methodName &#x3D; invocation.getMethodName();</span><br><span class="line">    int max &#x3D; url.getMethodParameter(methodName, EXECUTES_KEY, 0);</span><br><span class="line">    if (!RpcStatus.beginCount(url, methodName, max)) &#123;</span><br><span class="line">        throw new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION,</span><br><span class="line">                &quot;Failed to invoke method &quot; + invocation.getMethodName() + &quot; in provider &quot; +</span><br><span class="line">                        url + &quot;, cause: The service using threads greater than &lt;dubbo:service executes&#x3D;\&quot;&quot; + max +</span><br><span class="line">                        &quot;\&quot; &#x2F;&gt; limited.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invocation.setAttachment(EXECUTELIMIT_FILTER_START_TIME, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    try &#123;</span><br><span class="line">        return invoker.invoke(invocation);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        if (t instanceof RuntimeException) &#123;</span><br><span class="line">            throw (RuntimeException) t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RpcException(&quot;unexpected exception when ExecuteLimitFilter&quot;, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @param url</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean beginCount(URL url, String methodName, int max) &#123;</span><br><span class="line">    max &#x3D; (max &lt;&#x3D; 0) ? Integer.MAX_VALUE : max;</span><br><span class="line">    RpcStatus appStatus &#x3D; getStatus(url);</span><br><span class="line">    RpcStatus methodStatus &#x3D; getStatus(url, methodName);</span><br><span class="line">    if (methodStatus.active.incrementAndGet() &gt; max) &#123;</span><br><span class="line">        methodStatus.active.decrementAndGet();</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        appStatus.active.incrementAndGet();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>连接控制（connect数量控制） <code>AbstractServer</code></p>
<blockquote>
<p>服务端连接控制<br><code>&lt;dubbo:provider protocol=&quot;dubbo&quot; accepts=&quot;10&quot; /&gt;```</code>&lt;dubbo:protocol name=”dubbo” accepts=”10” /&gt;```</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void connected(Channel ch) throws RemotingException &#123;</span><br><span class="line">    &#x2F;&#x2F; If the server has entered the shutdown process, reject any new connection</span><br><span class="line">    if (this.isClosing() || this.isClosed()) &#123;</span><br><span class="line">        logger.warn(&quot;Close new channel &quot; + ch + &quot;, cause: server is closing or has been closed. For example, receive a new connect request while in shutdown process.&quot;);</span><br><span class="line">        ch.close();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collection&lt;Channel&gt; channels &#x3D; getChannels();</span><br><span class="line">    if (accepts &gt; 0 &amp;&amp; channels.size() &gt; accepts) &#123;</span><br><span class="line">        logger.error(&quot;Close channel &quot; + ch + &quot;, cause: The server &quot; + ch.getLocalAddress() + &quot; connections greater than max config &quot; + accepts);</span><br><span class="line">        ch.close();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    super.connected(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>客户端连接控制</p>
<figure class="highlight plain"><figcaption><span>interface</span></figcaption><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;&lt;dubbo:service interface&#x3D;&quot;com.foo.BarService&quot; connections&#x3D;&quot;10&quot; &#x2F;&gt; </span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> private ExchangeClient[] getClients(URL url) &#123;</span><br><span class="line">    &#x2F;&#x2F; whether to share connection</span><br><span class="line"></span><br><span class="line">    boolean useShareConnect &#x3D; false;</span><br><span class="line"></span><br><span class="line">    int connections &#x3D; url.getParameter(CONNECTIONS_KEY, 0);</span><br><span class="line">    List&lt;ReferenceCountExchangeClient&gt; shareClients &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F; if not configured, connection is shared, otherwise, one connection for one service</span><br><span class="line">    if (connections &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        useShareConnect &#x3D; true;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * The xml configuration should have a higher priority than properties.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        String shareConnectionsStr &#x3D; url.getParameter(SHARE_CONNECTIONS_KEY, (String) null);</span><br><span class="line">        connections &#x3D; Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigUtils.getProperty(SHARE_CONNECTIONS_KEY,</span><br><span class="line">                DEFAULT_SHARE_CONNECTIONS) : shareConnectionsStr);</span><br><span class="line">        shareClients &#x3D; getSharedClient(url, connections);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;这里限制了channel的数组大小长度</span><br><span class="line">    ExchangeClient[] clients &#x3D; new ExchangeClient[connections];</span><br><span class="line">    for (int i &#x3D; 0; i &lt; clients.length; i++) &#123;</span><br><span class="line">        if (useShareConnect) &#123;</span><br><span class="line">            clients[i] &#x3D; shareClients.get(i);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            clients[i] &#x3D; initClient(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return clients;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果 <a href="dubbo:service">dubbo:service</a> 和 <a href="dubbo:reference">dubbo:reference</a> 都配了 connections，<a href="dubbo:reference">dubbo:reference</a> 优先，参见：配置的覆盖策略</p>
</blockquote>
<p>延迟连接（延迟连接用于减少长连接数。当有调用发起时，再创建长连接）只对dubbo有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> private ExchangeClient initClient(URL url) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; client type setting.</span><br><span class="line">    String str &#x3D; url.getParameter(CLIENT_KEY, url.getParameter(SERVER_KEY, DEFAULT_REMOTING_CLIENT));</span><br><span class="line"></span><br><span class="line">    url &#x3D; url.addParameter(CODEC_KEY, DubboCodec.NAME);</span><br><span class="line">    &#x2F;&#x2F; enable heartbeat by default</span><br><span class="line">    url &#x3D; url.addParameterIfAbsent(HEARTBEAT_KEY, String.valueOf(DEFAULT_HEARTBEAT));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; BIO is not allowed since it has severe performance issue.</span><br><span class="line">    if (str !&#x3D; null &amp;&amp; str.length() &gt; 0 &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        throw new RpcException(&quot;Unsupported client type: &quot; + str + &quot;,&quot; +</span><br><span class="line">                &quot; supported client type is &quot; + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), &quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExchangeClient client;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; connection should be lazy</span><br><span class="line">        if (url.getParameter(LAZY_CONNECT_KEY, false)) &#123;</span><br><span class="line">            client &#x3D; new LazyConnectExchangeClient(url, requestHandler);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            client &#x3D; Exchangers.connect(url, requestHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Fail to create remoting client for service(&quot; + url + &quot;): &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>粘滞连接</p>
<blockquote>
<p>粘滞连接用于有状态服务，尽可能让客户端总是向同一提供者发起调用，除非该提供者挂了，再连另一台。<br>粘滞连接将自动开启延迟连接，以减少长连接数。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> protected Invoker&lt;T&gt; select(LoadBalance loadbalance, Invocation invocation,</span><br><span class="line">                            List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    if (CollectionUtils.isEmpty(invokers)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    String methodName &#x3D; invocation &#x3D;&#x3D; null ? StringUtils.EMPTY : invocation.getMethodName();</span><br><span class="line"></span><br><span class="line">    boolean sticky &#x3D; invokers.get(0).getUrl()</span><br><span class="line">            .getMethodParameter(methodName, CLUSTER_STICKY_KEY, DEFAULT_CLUSTER_STICKY);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ignore overloaded method</span><br><span class="line">    if (stickyInvoker !&#x3D; null &amp;&amp; !invokers.contains(stickyInvoker)) &#123;</span><br><span class="line">        stickyInvoker &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;ignore concurrency problem</span><br><span class="line">    if (sticky &amp;&amp; stickyInvoker !&#x3D; null &amp;&amp; (selected &#x3D;&#x3D; null || !selected.contains(stickyInvoker))) &#123;</span><br><span class="line">        if (availablecheck &amp;&amp; stickyInvoker.isAvailable()) &#123;</span><br><span class="line">            return stickyInvoker;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Invoker&lt;T&gt; invoker &#x3D; doSelect(loadbalance, invocation, invokers, selected);</span><br><span class="line"></span><br><span class="line">    if (sticky) &#123;</span><br><span class="line">        stickyInvoker &#x3D; invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>令牌验证 ``````</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!ConfigUtils.isEmpty(token)) &#123;</span><br><span class="line">    if (ConfigUtils.isDefault(token)) &#123;</span><br><span class="line">        map.put(TOKEN_KEY, UUID.randomUUID().toString());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        map.put(TOKEN_KEY, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里进行验签</span><br><span class="line">@Activate(group &#x3D; CommonConstants.PROVIDER, value &#x3D; TOKEN_KEY)</span><br><span class="line">public class TokenFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result invoke(Invoker&lt;?&gt; invoker, Invocation inv)</span><br><span class="line">            throws RpcException &#123;</span><br><span class="line">        String token &#x3D; invoker.getUrl().getParameter(TOKEN_KEY);</span><br><span class="line">        if (ConfigUtils.isNotEmpty(token)) &#123;</span><br><span class="line">            Class&lt;?&gt; serviceType &#x3D; invoker.getInterface();</span><br><span class="line">            Map&lt;String, String&gt; attachments &#x3D; inv.getAttachments();</span><br><span class="line">            String remoteToken &#x3D; attachments &#x3D;&#x3D; null ? null : attachments.get(TOKEN_KEY);</span><br><span class="line">            if (!token.equals(remoteToken)) &#123;</span><br><span class="line">                throw new RpcException(&quot;Invalid token! Forbid invoke remote service &quot; + serviceType + &quot; method &quot; + inv.getMethodName() + &quot;() from consumer &quot; + RpcContext.getContext().getRemoteHost() + &quot; to provider &quot; + RpcContext.getContext().getLocalHost());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return invoker.invoke(inv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集群方式使用provider的配置是在中的<code>URL url = mergeUrl(providerUrl);</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Turn urls into invokers, and if url has been refer, will not re-reference.</span><br><span class="line">     *</span><br><span class="line">     * @param urls</span><br><span class="line">     * @return invokers</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Map&lt;String, Invoker&lt;T&gt;&gt; toInvokers(List&lt;URL&gt; urls) &#123;</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        if (urls &#x3D;&#x3D; null || urls.isEmpty()) &#123;</span><br><span class="line">            return newUrlInvokerMap;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; keys &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        String queryProtocols &#x3D; this.queryMap.get(PROTOCOL_KEY);</span><br><span class="line">        for (URL providerUrl : urls) &#123;</span><br><span class="line">            &#x2F;&#x2F; If protocol is configured at the reference side, only the matching protocol is selected</span><br><span class="line">            if (queryProtocols !&#x3D; null &amp;&amp; queryProtocols.length() &gt; 0) &#123;</span><br><span class="line">                boolean accept &#x3D; false;</span><br><span class="line">                String[] acceptProtocols &#x3D; queryProtocols.split(&quot;,&quot;);</span><br><span class="line">                for (String acceptProtocol : acceptProtocols) &#123;</span><br><span class="line">                    if (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                        accept &#x3D; true;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (!accept) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) &#123;</span><br><span class="line">                logger.error(new IllegalStateException(&quot;Unsupported protocol &quot; + providerUrl.getProtocol() +</span><br><span class="line">                        &quot; in notified url: &quot; + providerUrl + &quot; from registry &quot; + getUrl().getAddress() +</span><br><span class="line">                        &quot; to consumer &quot; + NetUtils.getLocalHost() + &quot;, supported protocol: &quot; +</span><br><span class="line">                        ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            URL url &#x3D; mergeUrl(providerUrl);</span><br><span class="line"></span><br><span class="line">            String key &#x3D; url.toFullString(); &#x2F;&#x2F; The parameter urls are sorted</span><br><span class="line">            if (keys.contains(key)) &#123; &#x2F;&#x2F; Repeated url</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            keys.add(key);</span><br><span class="line">            &#x2F;&#x2F; Cache key is url that does not merge with consumer side parameters, regardless of how the consumer combines parameters, if the server url changes, then refer again</span><br><span class="line">            Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap &#x3D; this.urlInvokerMap; &#x2F;&#x2F; local reference</span><br><span class="line">            Invoker&lt;T&gt; invoker &#x3D; localUrlInvokerMap &#x3D;&#x3D; null ? null : localUrlInvokerMap.get(key);</span><br><span class="line">            if (invoker &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; Not in the cache, refer again</span><br><span class="line">                try &#123;</span><br><span class="line">                    boolean enabled &#x3D; true;</span><br><span class="line">                    if (url.hasParameter(DISABLED_KEY)) &#123;</span><br><span class="line">                        enabled &#x3D; !url.getParameter(DISABLED_KEY, false);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        enabled &#x3D; url.getParameter(ENABLED_KEY, true);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (enabled) &#123;</span><br><span class="line">                        invoker &#x3D; new InvokerDelegate&lt;&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    logger.error(&quot;Failed to refer invoker for interface:&quot; + serviceType + &quot;,url:(&quot; + url + &quot;)&quot; + t.getMessage(), t);</span><br><span class="line">                &#125;</span><br><span class="line">                if (invoker !&#x3D; null) &#123; &#x2F;&#x2F; Put new invoker in cache</span><br><span class="line">                    newUrlInvokerMap.put(key, invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.clear();</span><br><span class="line">        return newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>只订阅 只注册（加载注册中心时不进行加载）<code>REGISTER_KEY SUBSCRIBE_KEY</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected List&lt;URL&gt; loadRegistries(boolean provider) &#123;</span><br><span class="line">    &#x2F;&#x2F; check &amp;&amp; override if necessary</span><br><span class="line">    List&lt;URL&gt; registryList &#x3D; new ArrayList&lt;URL&gt;();</span><br><span class="line">    if (CollectionUtils.isNotEmpty(registries)) &#123;</span><br><span class="line">        for (RegistryConfig config : registries) &#123;</span><br><span class="line">            String address &#x3D; config.getAddress();</span><br><span class="line">            if (StringUtils.isEmpty(address)) &#123;</span><br><span class="line">                address &#x3D; ANYHOST_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) &#123;</span><br><span class="line">                Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">                appendParameters(map, application);</span><br><span class="line">                appendParameters(map, config);</span><br><span class="line">                map.put(PATH_KEY, RegistryService.class.getName());</span><br><span class="line">                appendRuntimeParameters(map);</span><br><span class="line">                if (!map.containsKey(PROTOCOL_KEY)) &#123;</span><br><span class="line">                    map.put(PROTOCOL_KEY, DUBBO_PROTOCOL);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;URL&gt; urls &#x3D; UrlUtils.parseURLs(address, map);</span><br><span class="line"></span><br><span class="line">                for (URL url : urls) &#123;</span><br><span class="line">                    url &#x3D; URLBuilder.from(url)</span><br><span class="line">                            .addParameter(REGISTRY_KEY, url.getProtocol())</span><br><span class="line">                            .setProtocol(REGISTRY_PROTOCOL)</span><br><span class="line">                            .build();</span><br><span class="line">                    if ((provider &amp;&amp; url.getParameter(REGISTER_KEY, true))</span><br><span class="line">                            || (!provider &amp;&amp; url.getParameter(SUBSCRIBE_KEY, true))) &#123;</span><br><span class="line">                        registryList.add(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return registryList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态服务（例如：zookeeper不会创建临时节点）</p>
<blockquote>
<p>服务提供者初次注册时为禁用状态，需人工启用。断线时，将不会被自动删除，需人工禁用。<br>如果是一个第三方服务提供者，比如 memcached，可以直接向注册中心写入提供者地址信息，消费者正常使用 [1]：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RegistryFactory registryFactory &#x3D; ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();</span><br><span class="line">Registry registry &#x3D; registryFactory.getRegistry(URL.valueOf(&quot;zookeeper:&#x2F;&#x2F;10.20.153.10:2181&quot;));</span><br><span class="line">registry.register(URL.valueOf(&quot;memcached:&#x2F;&#x2F;10.20.153.11&#x2F;com.foo.BarService?category&#x3D;providers&amp;dynamic&#x3D;false&amp;application&#x3D;foo&quot;));</span><br></pre></td></tr></table></figure>
<p>优雅停机</p>
<blockquote>
<p>Dubbo 是通过 JDK 的 ShutdownHook 来完成优雅停机的，所以如果用户使用 kill -9 PID 等强制关闭指令，是不会执行优雅停机的，只有通过 kill PID 时，才会执行。</p>
</blockquote>
<p>主机绑定、端口绑定</p>
<blockquote>
<p>缺省主机 IP 查找顺序：</p>
</blockquote>
<ul>
<li>通过 LocalHost.getLocalHost() 获取本机地址。</li>
<li>如果是 127.* 等 loopback 地址，则扫描各网卡，获取网卡 IP。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;主机绑定</span><br><span class="line"> private String findConfigedHosts(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs, Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    boolean anyhost &#x3D; false;</span><br><span class="line"></span><br><span class="line">    String hostToBind &#x3D; getValueFromConfig(protocolConfig, DUBBO_IP_TO_BIND);</span><br><span class="line">    if (hostToBind !&#x3D; null &amp;&amp; hostToBind.length() &gt; 0 &amp;&amp; isInvalidLocalHost(hostToBind)) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Specified invalid bind ip from property:&quot; + DUBBO_IP_TO_BIND + &quot;, value:&quot; + hostToBind);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; if bind ip is not found in environment, keep looking up</span><br><span class="line">    if (StringUtils.isEmpty(hostToBind)) &#123;</span><br><span class="line">        hostToBind &#x3D; protocolConfig.getHost();</span><br><span class="line">        if (provider !&#x3D; null &amp;&amp; StringUtils.isEmpty(hostToBind)) &#123;</span><br><span class="line">            hostToBind &#x3D; provider.getHost();</span><br><span class="line">        &#125;</span><br><span class="line">        if (isInvalidLocalHost(hostToBind)) &#123;</span><br><span class="line">            anyhost &#x3D; true;</span><br><span class="line">            try &#123;</span><br><span class="line">                logger.info( &quot;No valid ip found from environment, try to find valid host from DNS.&quot;);</span><br><span class="line">                hostToBind &#x3D; InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            if (isInvalidLocalHost(hostToBind)) &#123;</span><br><span class="line">                if (CollectionUtils.isNotEmpty(registryURLs)) &#123;</span><br><span class="line">                    for (URL registryURL : registryURLs) &#123;</span><br><span class="line">                        if (MULTICAST.equalsIgnoreCase(registryURL.getParameter(&quot;registry&quot;))) &#123;</span><br><span class="line">                            &#x2F;&#x2F; skip multicast registry since we cannot connect to it via Socket</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        try (Socket socket &#x3D; new Socket()) &#123;</span><br><span class="line">                            SocketAddress addr &#x3D; new InetSocketAddress(registryURL.getHost(), registryURL.getPort());</span><br><span class="line">                            socket.connect(addr, 1000);</span><br><span class="line">                            hostToBind &#x3D; socket.getLocalAddress().getHostAddress();</span><br><span class="line">                            break;</span><br><span class="line">                        &#125; catch (Exception e) &#123;</span><br><span class="line">                            logger.warn(e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (isInvalidLocalHost(hostToBind)) &#123;</span><br><span class="line">                    hostToBind &#x3D; getLocalHost();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.put(Constants.BIND_IP_KEY, hostToBind);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; registry ip is not used for bind ip by default</span><br><span class="line">    String hostToRegistry &#x3D; getValueFromConfig(protocolConfig, DUBBO_IP_TO_REGISTRY);</span><br><span class="line">    if (hostToRegistry !&#x3D; null &amp;&amp; hostToRegistry.length() &gt; 0 &amp;&amp; isInvalidLocalHost(hostToRegistry)) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Specified invalid registry ip from property:&quot; + DUBBO_IP_TO_REGISTRY + &quot;, value:&quot; + hostToRegistry);</span><br><span class="line">    &#125; else if (StringUtils.isEmpty(hostToRegistry)) &#123;</span><br><span class="line">        &#x2F;&#x2F; bind ip is used as registry ip by default</span><br><span class="line">        hostToRegistry &#x3D; hostToBind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.put(ANYHOST_KEY, String.valueOf(anyhost));</span><br><span class="line"></span><br><span class="line">    return hostToRegistry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;端口绑定</span><br><span class="line">private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    Integer portToBind &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; parse bind port from environment</span><br><span class="line">    String port &#x3D; getValueFromConfig(protocolConfig, DUBBO_PORT_TO_BIND);</span><br><span class="line">    portToBind &#x3D; parsePort(port);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; if there&#39;s no bind port found from environment, keep looking up.</span><br><span class="line">    if (portToBind &#x3D;&#x3D; null) &#123;</span><br><span class="line">        portToBind &#x3D; protocolConfig.getPort();</span><br><span class="line">        if (provider !&#x3D; null &amp;&amp; (portToBind &#x3D;&#x3D; null || portToBind &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">            portToBind &#x3D; provider.getPort();</span><br><span class="line">        &#125;</span><br><span class="line">        final int defaultPort &#x3D; ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).getDefaultPort();</span><br><span class="line">        if (portToBind &#x3D;&#x3D; null || portToBind &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            portToBind &#x3D; defaultPort;</span><br><span class="line">        &#125;</span><br><span class="line">        if (portToBind &lt;&#x3D; 0) &#123;</span><br><span class="line">            portToBind &#x3D; getRandomPort(name);</span><br><span class="line">            if (portToBind &#x3D;&#x3D; null || portToBind &lt; 0) &#123;</span><br><span class="line">                portToBind &#x3D; getAvailablePort(defaultPort);</span><br><span class="line">                putRandomPort(name, portToBind);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; save bind port, used as url&#39;s key later</span><br><span class="line">    map.put(Constants.BIND_PORT_KEY, String.valueOf(portToBind));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; registry port, not used as bind port by default</span><br><span class="line">    String portToRegistryStr &#x3D; getValueFromConfig(protocolConfig, DUBBO_PORT_TO_REGISTRY);</span><br><span class="line">    Integer portToRegistry &#x3D; parsePort(portToRegistryStr);</span><br><span class="line">    if (portToRegistry &#x3D;&#x3D; null) &#123;</span><br><span class="line">        portToRegistry &#x3D; portToBind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return portToRegistry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
日志适配<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ApplicationConfig extends AbstractConfig &#123;</span><br><span class="line">    public void setLogger(String logger) &#123;</span><br><span class="line">        this.logger &#x3D; logger;</span><br><span class="line">        LoggerFactory.setLoggerAdapter(logger);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
日志访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程dump</span><br><span class="line">&gt;当业务线程池满时，我们需要知道线程都在等待哪些资源、条件，以找到系统的瓶颈点或异常点。dubbo通过Jstack自动导出线程堆栈来保留现场，方便排查问题</span><br></pre></td></tr></table></figure>
public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {<br>@Override<br>public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {<br>  String msg = String.format(“Thread pool is EXHAUSTED!” +<pre><code>    &quot; Thread Name: %s, Pool Size: %d (active: %d, core: %d, max: %d, largest: %d), Task: %d (completed: &quot;
    + &quot;%d),&quot; +
    &quot; Executor status:(isShutdown:%s, isTerminated:%s, isTerminating:%s), in %s://%s:%d!&quot;,
threadName, e.getPoolSize(), e.getActiveCount(), e.getCorePoolSize(), e.getMaximumPoolSize(),
e.getLargestPoolSize(),
e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(), e.isTerminating(),
url.getProtocol(), url.getIp(), url.getPort());</code></pre>  logger.warn(msg);<br>  dumpJStack();<br>  throw new RejectedExecutionException(msg);<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事件通知 &#96;&#96;&#96;FutureFilter</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生成invoker时进行设置异步方法属性</span><br><span class="line">protected static ConsumerMethodModel.AsyncMethodInfo convertMethodConfig2AyncInfo(MethodConfig methodConfig) &#123;</span><br><span class="line">    if (methodConfig &#x3D;&#x3D; null || (methodConfig.getOninvoke() &#x3D;&#x3D; null &amp;&amp; methodConfig.getOnreturn() &#x3D;&#x3D; null &amp;&amp; methodConfig.getOnthrow() &#x3D;&#x3D; null)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;check config conflict</span><br><span class="line">    if (Boolean.FALSE.equals(methodConfig.isReturn()) &amp;&amp; (methodConfig.getOnreturn() !&#x3D; null || methodConfig.getOnthrow() !&#x3D; null)) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;method config error : return attribute must be set true when onreturn or onthrow has been set.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo &#x3D; new ConsumerMethodModel.AsyncMethodInfo();</span><br><span class="line"></span><br><span class="line">    asyncMethodInfo.setOninvokeInstance(methodConfig.getOninvoke());</span><br><span class="line">    asyncMethodInfo.setOnreturnInstance(methodConfig.getOnreturn());</span><br><span class="line">    asyncMethodInfo.setOnthrowInstance(methodConfig.getOnthrow());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        String oninvokeMethod &#x3D; methodConfig.getOninvokeMethod();</span><br><span class="line">        if (StringUtils.isNotEmpty(oninvokeMethod)) &#123;</span><br><span class="line">            asyncMethodInfo.setOninvokeMethod(getMethodByName(methodConfig.getOninvoke().getClass(), oninvokeMethod));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String onreturnMethod &#x3D; methodConfig.getOnreturnMethod();</span><br><span class="line">        if (StringUtils.isNotEmpty(onreturnMethod)) &#123;</span><br><span class="line">            asyncMethodInfo.setOnreturnMethod(getMethodByName(methodConfig.getOnreturn().getClass(), onreturnMethod));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String onthrowMethod &#x3D; methodConfig.getOnthrowMethod();</span><br><span class="line">        if (StringUtils.isNotEmpty(onthrowMethod)) &#123;</span><br><span class="line">            asyncMethodInfo.setOnthrowMethod(getMethodByName(methodConfig.getOnthrow().getClass(), onthrowMethod));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return asyncMethodInfo;</span><br><span class="line">&#125;</span><br><span class="line">private void fireInvokeCallback(final Invoker&lt;?&gt; invoker, final Invocation invocation) &#123;</span><br><span class="line">    final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo &#x3D; getAsyncMethodInfo(invoker, invocation);</span><br><span class="line">    if (asyncMethodInfo &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    final Method onInvokeMethod &#x3D; asyncMethodInfo.getOninvokeMethod();</span><br><span class="line">    final Object onInvokeInst &#x3D; asyncMethodInfo.getOninvokeInstance();</span><br><span class="line"></span><br><span class="line">    if (onInvokeMethod &#x3D;&#x3D; null &amp;&amp; onInvokeInst &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (onInvokeMethod &#x3D;&#x3D; null || onInvokeInst &#x3D;&#x3D; null) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;service:&quot; + invoker.getUrl().getServiceKey() + &quot; has a oninvoke callback config , but no such &quot; + (onInvokeMethod &#x3D;&#x3D; null ? &quot;method&quot; : &quot;instance&quot;) + &quot; found. url:&quot; + invoker.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!onInvokeMethod.isAccessible()) &#123;</span><br><span class="line">        onInvokeMethod.setAccessible(true);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Object[] params &#x3D; invocation.getArguments();</span><br><span class="line">    try &#123;</span><br><span class="line">        onInvokeMethod.invoke(onInvokeInst, params);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        fireThrowCallback(invoker, invocation, e.getTargetException());</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        fireThrowCallback(invoker, invocation, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &#x2F;&#x2F;设置父类的监听器 &#x2F;&#x2F;当有返回值时进行回调 @Override public Result</span><br><span class="line">invoke(Invocation invocation) throws RpcException &#123; Result asyncResult &#x3D;</span><br><span class="line">filterInvoker.invoke(invocation);</span><br><span class="line"></span><br><span class="line">    asyncResult &#x3D; asyncResult.whenCompleteWithContext((r, t) -&gt; &#123;</span><br><span class="line">        for (int i &#x3D; filters.size() - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">            Filter filter &#x3D; filters.get(i);</span><br><span class="line">            &#x2F;&#x2F; onResponse callback</span><br><span class="line">            if (filter instanceof ListenableFilter) &#123;</span><br><span class="line">                Filter.Listener listener &#x3D; ((ListenableFilter) filter).listener();</span><br><span class="line">                if (listener !&#x3D; null) &#123;</span><br><span class="line">                    if (t &#x3D;&#x3D; null) &#123;</span><br><span class="line">                        listener.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        listener.onError(t, filterInvoker, invocation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                filter.onResponse(r, filterInvoker, invocation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return asyncResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
异步执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">消费方</span><br><span class="line">invocation.setInvokeMode(RpcUtils.getInvokeMode(url, invocation));</span><br><span class="line">public static InvokeMode getInvokeMode(URL url, Invocation inv) &#123;</span><br><span class="line">    if (isReturnTypeFuture(inv)) &#123;</span><br><span class="line">        return InvokeMode.FUTURE;</span><br><span class="line">    &#125; else if (isAsync(url, inv)) &#123;</span><br><span class="line">        return InvokeMode.ASYNC;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return InvokeMode.SYNC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object value &#x3D; doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments());</span><br><span class="line">        CompletableFuture&lt;Object&gt; future &#x3D; wrapWithFuture(value, invocation);</span><br><span class="line">        AsyncRpcResult asyncRpcResult &#x3D; new AsyncRpcResult(invocation);</span><br><span class="line">        future.whenComplete((obj, t) -&gt; &#123;</span><br><span class="line">            AppResponse result &#x3D; new AppResponse();</span><br><span class="line">            if (t !&#x3D; null) &#123;</span><br><span class="line">                if (t instanceof CompletionException) &#123;</span><br><span class="line">                    result.setException(t.getCause());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    result.setException(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.setValue(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            asyncRpcResult.complete(result);</span><br><span class="line">        &#125;);</span><br><span class="line">        return asyncRpcResult;</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        if (RpcContext.getContext().isAsyncStarted() &amp;&amp; !RpcContext.getContext().stopAsync()) &#123;</span><br><span class="line">            logger.error(&quot;Provider async started, but got an exception from the original method, cannot write the exception back to consumer because an async result may have returned the new thread.&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return AsyncRpcResult.newDefaultAsyncResult(null, e.getTargetException(), invocation);</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to invoke remote proxy method &quot; + invocation.getMethodName() + &quot; to &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">## 封装返回值</span><br><span class="line">private CompletableFuture&lt;Object&gt; wrapWithFuture (Object value, Invocation invocation) &#123;</span><br><span class="line">    if (RpcContext.getContext().isAsyncStarted()) &#123;</span><br><span class="line">        return ((AsyncContextImpl)(RpcContext.getContext().getAsyncContext())).getInternalFuture();</span><br><span class="line">    &#125; else if (value instanceof CompletableFuture) &#123;</span><br><span class="line">        return (CompletableFuture&lt;Object&gt;) value;</span><br><span class="line">    &#125;</span><br><span class="line">    return CompletableFuture.completedFuture(value);</span><br><span class="line">&#125;</span><br><span class="line">##调用者</span><br><span class="line">@Override</span><br><span class="line">protected Result doInvoke(final Invocation invocation) throws Throwable &#123;</span><br><span class="line">    RpcInvocation inv &#x3D; (RpcInvocation) invocation;</span><br><span class="line">    final String methodName &#x3D; RpcUtils.getMethodName(invocation);</span><br><span class="line">    inv.setAttachment(PATH_KEY, getUrl().getPath());</span><br><span class="line">    inv.setAttachment(VERSION_KEY, version);</span><br><span class="line"></span><br><span class="line">    ExchangeClient currentClient;</span><br><span class="line">    if (clients.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        currentClient &#x3D; clients[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        currentClient &#x3D; clients[index.getAndIncrement() % clients.length];</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean isOneway &#x3D; RpcUtils.isOneway(getUrl(), invocation);</span><br><span class="line">        int timeout &#x3D; getUrl().getMethodParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);</span><br><span class="line">        if (isOneway) &#123;</span><br><span class="line">            boolean isSent &#x3D; getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);</span><br><span class="line">            currentClient.send(inv, isSent);</span><br><span class="line">            RpcContext.getContext().setFuture(null);</span><br><span class="line">            return AsyncRpcResult.newDefaultAsyncResult(invocation);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F;全部生成CompletableFuture</span><br><span class="line">            AsyncRpcResult asyncRpcResult &#x3D; new AsyncRpcResult(inv);</span><br><span class="line">            CompletableFuture&lt;Object&gt; responseFuture &#x3D; currentClient.request(inv, timeout);</span><br><span class="line">            responseFuture.whenComplete((obj, t) -&gt; &#123;</span><br><span class="line">                if (t !&#x3D; null) &#123;</span><br><span class="line">                    asyncRpcResult.completeExceptionally(t);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    asyncRpcResult.complete((AppResponse) obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            RpcContext.getContext().setFuture(new FutureAdapter(asyncRpcResult));</span><br><span class="line">            return asyncRpcResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (TimeoutException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.TIMEOUT_EXCEPTION, &quot;Invoke remote method timeout. method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.NETWORK_EXCEPTION, &quot;Failed to invoke remote method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public CompletableFuture&lt;Object&gt; request(Object request, int timeout) throws RemotingException &#123;</span><br><span class="line">    if (closed) &#123;</span><br><span class="line">        throw new RemotingException(this.getLocalAddress(), null, &quot;Failed to send request &quot; + request + &quot;, cause: The channel &quot; + this + &quot; is closed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; create request.</span><br><span class="line">    Request req &#x3D; new Request();</span><br><span class="line">    req.setVersion(Version.getProtocolVersion());</span><br><span class="line">    req.setTwoWay(true);</span><br><span class="line">    req.setData(request);</span><br><span class="line">    DefaultFuture future &#x3D; DefaultFuture.newFuture(channel, req, timeout);</span><br><span class="line">    try &#123;</span><br><span class="line">        channel.send(req);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        future.cancel();</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">    return future;</span><br><span class="line">&#125;</span><br><span class="line">## 所有都返回CompletableFuture，当端口没有配置异步则封装AsyncToSyncInvoker成同步调用</span><br><span class="line">@Override</span><br><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    Result asyncResult &#x3D; invoker.invoke(invocation);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (InvokeMode.SYNC &#x3D;&#x3D; ((RpcInvocation) invocation).getInvokeMode()) &#123;</span><br><span class="line">            asyncResult.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Interrupted unexpectedly while waiting for remoting result to return!  method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; catch (ExecutionException e) &#123;</span><br><span class="line">        Throwable t &#x3D; e.getCause();</span><br><span class="line">        if (t instanceof TimeoutException) &#123;</span><br><span class="line">            throw new RpcException(RpcException.TIMEOUT_EXCEPTION, &quot;Invoke remote method timeout. method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">        &#125; else if (t instanceof RemotingException) &#123;</span><br><span class="line">            throw new RpcException(RpcException.NETWORK_EXCEPTION, &quot;Failed to invoke remote method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    return asyncResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
参数回调<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.dubbo.rpc.protocol.dubbo.DubboCodec encodeRequestData（消费方暴露接口）</span><br><span class="line">@Override</span><br><span class="line">protected void encodeRequestData(Channel channel, ObjectOutput out, Object data) throws IOException &#123;</span><br><span class="line">    encodeRequestData(channel, out, data, DUBBO_VERSION);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">protected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException &#123;</span><br><span class="line">    RpcInvocation inv &#x3D; (RpcInvocation) data;</span><br><span class="line"></span><br><span class="line">    out.writeUTF(version);</span><br><span class="line">    out.writeUTF(inv.getAttachment(Constants.PATH_KEY));</span><br><span class="line">    out.writeUTF(inv.getAttachment(Constants.VERSION_KEY));</span><br><span class="line"></span><br><span class="line">    out.writeUTF(inv.getMethodName());</span><br><span class="line">    out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));</span><br><span class="line">    Object[] args &#x3D; inv.getArguments();</span><br><span class="line">    if (args !&#x3D; null) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; args.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F;对回调代码进行暴露</span><br><span class="line">            out.writeObject(encodeInvocationArgument(channel, inv, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out.writeObject(RpcUtils.getNecessaryAttachments(inv));</span><br><span class="line">&#125;</span><br><span class="line">public static Object encodeInvocationArgument(Channel channel, RpcInvocation inv, int paraIndex) throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F; get URL directly</span><br><span class="line">    URL url &#x3D; inv.getInvoker() &#x3D;&#x3D; null ? null : inv.getInvoker().getUrl();</span><br><span class="line">    byte callbackStatus &#x3D; isCallBack(url, inv.getMethodName(), paraIndex);</span><br><span class="line">    Object[] args &#x3D; inv.getArguments();</span><br><span class="line">    Class&lt;?&gt;[] pts &#x3D; inv.getParameterTypes();</span><br><span class="line">    switch (callbackStatus) &#123;</span><br><span class="line">        &#x2F;&#x2F;无回调</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_NONE:</span><br><span class="line">            return args[paraIndex];</span><br><span class="line">        &#x2F;&#x2F;暴露</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_CREATE:</span><br><span class="line">            inv.setAttachment(INV_ATT_CALLBACK_KEY + paraIndex, exportOrUnexportCallbackService(channel, url, pts[paraIndex], args[paraIndex], true));</span><br><span class="line">            return null;</span><br><span class="line">        &#x2F;&#x2F;下线</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_DESTROY:</span><br><span class="line">            inv.setAttachment(INV_ATT_CALLBACK_KEY + paraIndex, exportOrUnexportCallbackService(channel, url, pts[paraIndex], args[paraIndex], false));</span><br><span class="line">            return null;</span><br><span class="line">        default:</span><br><span class="line">            return args[paraIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private static String exportOrUnexportCallbackService(Channel channel, URL url, Class clazz, Object inst, Boolean export) throws IOException &#123;</span><br><span class="line">    int instid &#x3D; System.identityHashCode(inst);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; params &#x3D; new HashMap&lt;&gt;(3);</span><br><span class="line">    &#x2F;&#x2F; no need to new client again</span><br><span class="line">    params.put(Constants.IS_SERVER_KEY, Boolean.FALSE.toString());</span><br><span class="line">    &#x2F;&#x2F; mark it&#39;s a callback, for troubleshooting</span><br><span class="line">    params.put(Constants.IS_CALLBACK_SERVICE, Boolean.TRUE.toString());</span><br><span class="line">    String group &#x3D; (url &#x3D;&#x3D; null ? null : url.getParameter(Constants.GROUP_KEY));</span><br><span class="line">    if (group !&#x3D; null &amp;&amp; group.length() &gt; 0) &#123;</span><br><span class="line">        params.put(Constants.GROUP_KEY, group);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; add method, for verifying against method, automatic fallback (see dubbo protocol)</span><br><span class="line">    params.put(Constants.METHODS_KEY, StringUtils.join(Wrapper.getWrapper(clazz).getDeclaredMethodNames(), &quot;,&quot;));</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; tmpMap &#x3D; new HashMap&lt;&gt;(url.getParameters());</span><br><span class="line">    tmpMap.putAll(params);</span><br><span class="line">    tmpMap.remove(Constants.VERSION_KEY);&#x2F;&#x2F; doesn&#39;t need to distinguish version for callback</span><br><span class="line">    tmpMap.put(Constants.INTERFACE_KEY, clazz.getName());</span><br><span class="line">    URL exportUrl &#x3D; new URL(DubboProtocol.NAME, channel.getLocalAddress().getAddress().getHostAddress(), channel.getLocalAddress().getPort(), clazz.getName() + &quot;.&quot; + instid, tmpMap);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; no need to generate multiple exporters for different channel in the same JVM, cache key cannot collide.</span><br><span class="line">    String cacheKey &#x3D; getClientSideCallbackServiceCacheKey(instid);</span><br><span class="line">    String countKey &#x3D; getClientSideCountKey(clazz.getName());</span><br><span class="line">    if (export) &#123;</span><br><span class="line">        &#x2F;&#x2F;对外暴露回调</span><br><span class="line">        &#x2F;&#x2F; one channel can have multiple callback instances, no need to re-export for different instance.</span><br><span class="line">        if (!channel.hasAttribute(cacheKey)) &#123;</span><br><span class="line">            if (!isInstancesOverLimit(channel, url, clazz.getName(), instid, false)) &#123;</span><br><span class="line">                Invoker&lt;?&gt; invoker &#x3D; proxyFactory.getInvoker(inst, clazz, exportUrl);</span><br><span class="line">                &#x2F;&#x2F; should destroy resource?</span><br><span class="line">                Exporter&lt;?&gt; exporter &#x3D; protocol.export(invoker);</span><br><span class="line">                &#x2F;&#x2F; this is used for tracing if instid has published service or not.</span><br><span class="line">                channel.setAttribute(cacheKey, exporter);</span><br><span class="line">                logger.info(&quot;Export a callback service :&quot; + exportUrl + &quot;, on &quot; + channel + &quot;, url is: &quot; + url);</span><br><span class="line">                increaseInstanceCount(channel, countKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;下线</span><br><span class="line">        if (channel.hasAttribute(cacheKey)) &#123;</span><br><span class="line">            Exporter&lt;?&gt; exporter &#x3D; (Exporter&lt;?&gt;) channel.getAttribute(cacheKey);</span><br><span class="line">            exporter.unexport();</span><br><span class="line">            channel.removeAttribute(cacheKey);</span><br><span class="line">            decreaseInstanceCount(channel, countKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return String.valueOf(instid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation（消费方创建回调代理类）</span><br><span class="line">@Override</span><br><span class="line">public Object decode(Channel channel, InputStream input) throws IOException &#123;</span><br><span class="line">    ObjectInput in &#x3D; CodecSupport.getSerialization(channel.getUrl(), serializationType)</span><br><span class="line">            .deserialize(channel.getUrl(), input);</span><br><span class="line"></span><br><span class="line">    String dubboVersion &#x3D; in.readUTF();</span><br><span class="line">    request.setVersion(dubboVersion);</span><br><span class="line">    setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion);</span><br><span class="line"></span><br><span class="line">    setAttachment(Constants.PATH_KEY, in.readUTF());</span><br><span class="line">    setAttachment(Constants.VERSION_KEY, in.readUTF());</span><br><span class="line"></span><br><span class="line">    setMethodName(in.readUTF());</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] args;</span><br><span class="line">        Class&lt;?&gt;[] pts;</span><br><span class="line">        String desc &#x3D; in.readUTF();</span><br><span class="line">        if (desc.length() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            pts &#x3D; DubboCodec.EMPTY_CLASS_ARRAY;</span><br><span class="line">            args &#x3D; DubboCodec.EMPTY_OBJECT_ARRAY;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pts &#x3D; ReflectUtils.desc2classArray(desc);</span><br><span class="line">            args &#x3D; new Object[pts.length];</span><br><span class="line">            for (int i &#x3D; 0; i &lt; args.length; i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    args[i] &#x3D; in.readObject(pts[i]);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    if (log.isWarnEnabled()) &#123;</span><br><span class="line">                        log.warn(&quot;Decode argument failed: &quot; + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setParameterTypes(pts);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map &#x3D; (Map&lt;String, String&gt;) in.readObject(Map.class);</span><br><span class="line">        if (map !&#x3D; null &amp;&amp; map.size() &gt; 0) &#123;</span><br><span class="line">            Map&lt;String, String&gt; attachment &#x3D; getAttachments();</span><br><span class="line">            if (attachment &#x3D;&#x3D; null) &#123;</span><br><span class="line">                attachment &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            attachment.putAll(map);</span><br><span class="line">            setAttachments(attachment);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;decode argument ,may be callback</span><br><span class="line">        for (int i &#x3D; 0; i &lt; args.length; i++) &#123;</span><br><span class="line">            args[i] &#x3D; decodeInvocationArgument(channel, this, pts, i, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setArguments(args);</span><br><span class="line"></span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        throw new IOException(StringUtils.toString(&quot;Read invocation data failed.&quot;, e));</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (in instanceof Cleanable) &#123;</span><br><span class="line">            ((Cleanable) in).cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">public static Object decodeInvocationArgument(Channel channel, RpcInvocation inv, Class&lt;?&gt;[] pts, int paraIndex, Object inObject) throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F; if it&#39;s a callback, create proxy on client side, callback interface on client side can be invoked through channel</span><br><span class="line">    &#x2F;&#x2F; need get URL from channel and env when decode</span><br><span class="line">    URL url &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        url &#x3D; DubboProtocol.getDubboProtocol().getInvoker(channel, inv).getUrl();</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return inObject;</span><br><span class="line">    &#125;</span><br><span class="line">    byte callbackstatus &#x3D; isCallBack(url, inv.getMethodName(), paraIndex);</span><br><span class="line">    switch (callbackstatus) &#123;</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_NONE:</span><br><span class="line">            return inObject;</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_CREATE:</span><br><span class="line">            try &#123;</span><br><span class="line">                return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt(inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), true);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                logger.error(e.getMessage(), e);</span><br><span class="line">                throw new IOException(StringUtils.toString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        case CallbackServiceCodec.CALLBACK_DESTROY:</span><br><span class="line">            try &#123;</span><br><span class="line">                return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt(inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), false);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new IOException(StringUtils.toString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        default:</span><br><span class="line">            return inObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private static Object referOrDestroyCallbackService(Channel channel, URL url, Class&lt;?&gt; clazz, Invocation inv, int instid, boolean isRefer) &#123;</span><br><span class="line">    Object proxy &#x3D; null;</span><br><span class="line">    String invokerCacheKey &#x3D; getServerSideCallbackInvokerCacheKey(channel, clazz.getName(), instid);</span><br><span class="line">    String proxyCacheKey &#x3D; getServerSideCallbackServiceCacheKey(channel, clazz.getName(), instid);</span><br><span class="line">    proxy &#x3D; channel.getAttribute(proxyCacheKey);</span><br><span class="line">    String countkey &#x3D; getServerSideCountKey(channel, clazz.getName());</span><br><span class="line">    if (isRefer) &#123;</span><br><span class="line">        if (proxy &#x3D;&#x3D; null) &#123;</span><br><span class="line">            URL referurl &#x3D; URL.valueOf(&quot;callback:&#x2F;&#x2F;&quot; + url.getAddress() + &quot;&#x2F;&quot; + clazz.getName() + &quot;?&quot; + Constants.INTERFACE_KEY + &quot;&#x3D;&quot; + clazz.getName());</span><br><span class="line">            referurl &#x3D; referurl.addParametersIfAbsent(url.getParameters()).removeParameter(Constants.METHODS_KEY);</span><br><span class="line">            if (!isInstancesOverLimit(channel, referurl, clazz.getName(), instid, true)) &#123;</span><br><span class="line">                @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">                Invoker&lt;?&gt; invoker &#x3D; new ChannelWrappedInvoker(clazz, channel, referurl, String.valueOf(instid));</span><br><span class="line">                proxy &#x3D; proxyFactory.getProxy(invoker);</span><br><span class="line">                channel.setAttribute(proxyCacheKey, proxy);</span><br><span class="line">                channel.setAttribute(invokerCacheKey, invoker);</span><br><span class="line">                increaseInstanceCount(channel, countkey);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;convert error fail fast .</span><br><span class="line">                &#x2F;&#x2F;ignore concurrent problem.</span><br><span class="line">                Set&lt;Invoker&lt;?&gt;&gt; callbackInvokers &#x3D; (Set&lt;Invoker&lt;?&gt;&gt;) channel.getAttribute(Constants.CHANNEL_CALLBACK_KEY);</span><br><span class="line">                if (callbackInvokers &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    callbackInvokers &#x3D; new ConcurrentHashSet&lt;Invoker&lt;?&gt;&gt;(1);</span><br><span class="line">                    callbackInvokers.add(invoker);</span><br><span class="line">                    channel.setAttribute(Constants.CHANNEL_CALLBACK_KEY, callbackInvokers);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(&quot;method &quot; + inv.getMethodName() + &quot; include a callback service :&quot; + invoker.getUrl() + &quot;, a proxy :&quot; + invoker + &quot; has been created.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (proxy !&#x3D; null) &#123;</span><br><span class="line">            Invoker&lt;?&gt; invoker &#x3D; (Invoker&lt;?&gt;) channel.getAttribute(invokerCacheKey);</span><br><span class="line">            try &#123;</span><br><span class="line">                Set&lt;Invoker&lt;?&gt;&gt; callbackInvokers &#x3D; (Set&lt;Invoker&lt;?&gt;&gt;) channel.getAttribute(Constants.CHANNEL_CALLBACK_KEY);</span><br><span class="line">                if (callbackInvokers !&#x3D; null) &#123;</span><br><span class="line">                    callbackInvokers.remove(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">                invoker.destroy();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                logger.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; cancel refer, directly remove from the map</span><br><span class="line">            channel.removeAttribute(proxyCacheKey);</span><br><span class="line">            channel.removeAttribute(invokerCacheKey);</span><br><span class="line">            decreaseInstanceCount(channel, countkey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
本地调用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;运用map进行保存Exporter</span><br><span class="line">InjvmExporter(Invoker&lt;T&gt; invoker, String key, Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap) &#123;</span><br><span class="line">    super(invoker);</span><br><span class="line">    this.key &#x3D; key;</span><br><span class="line">    this.exporterMap &#x3D; exporterMap;</span><br><span class="line">    &#x2F;&#x2F;新增并保存当前InjvmInvoker</span><br><span class="line">    exporterMap.put(key, this);</span><br><span class="line">&#125;</span><br><span class="line">protected boolean shouldJvmRefer(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    URL tmpUrl &#x3D; new URL(&quot;temp&quot;, &quot;localhost&quot;, 0, map);</span><br><span class="line">    boolean isJvmRefer;</span><br><span class="line">    if (isInjvm() &#x3D;&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F; if a url is specified, don&#39;t do local reference</span><br><span class="line">        if (url !&#x3D; null &amp;&amp; url.length() &gt; 0) &#123;</span><br><span class="line">            isJvmRefer &#x3D; false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; by default, reference local service if there is</span><br><span class="line">            isJvmRefer &#x3D; InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        isJvmRefer &#x3D; isInjvm();</span><br><span class="line">    &#125;</span><br><span class="line">    return isJvmRefer;</span><br><span class="line">&#125;</span><br><span class="line"> @Override</span><br><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line">    return new InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; Invoker&lt;T&gt; protocolBindingRefer(Class&lt;T&gt; serviceType, URL url) throws RpcException &#123;</span><br><span class="line">    return new InjvmInvoker&lt;T&gt;(serviceType, url, url.getServiceKey(), exporterMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isInjvmRefer(URL url) &#123;</span><br><span class="line">    String scope &#x3D; url.getParameter(SCOPE_KEY);</span><br><span class="line">    &#x2F;&#x2F; Since injvm protocol is configured explicitly, we don&#39;t need to set any extra flag, use normal refer process.</span><br><span class="line">    if (SCOPE_LOCAL.equals(scope) || (url.getParameter(LOCAL_PROTOCOL, false))) &#123;</span><br><span class="line">        &#x2F;&#x2F; if it&#39;s declared as local reference</span><br><span class="line">        &#x2F;&#x2F; &#39;scope&#x3D;local&#39; is equivalent to &#39;injvm&#x3D;true&#39;, injvm will be deprecated in the future release</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else if (SCOPE_REMOTE.equals(scope)) &#123;</span><br><span class="line">        &#x2F;&#x2F; it&#39;s declared as remote reference</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else if (url.getParameter(GENERIC_KEY, false)) &#123;</span><br><span class="line">        &#x2F;&#x2F; generic invocation is not local reference</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else if (getExporter(exporterMap, url) !&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F; by default, go through local reference if there&#39;s the service exposed locally</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
路由规则<br>服务降级<blockquote>
<p>通过ShutdownHook， 只有通过 kill PID 时，才会执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务提供方</span><br><span class="line">    停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。</span><br><span class="line">    然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。</span><br><span class="line">服务消费方</span><br><span class="line">    停止时，不再发起新的调用请求，所有新的调用在客户端即报错。</span><br><span class="line">    然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。</span><br><span class="line">dubbo.service.shutdown.wait&#x3D;15000</span><br><span class="line">调用方式 ProtocolConfig.destroyAll();</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>k8s安装</title>
    <url>/2019/11/10/k8s%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx;</span><br><span class="line">docker run --name runoob-nginx-test -p 8081:80 -d nginx;</span><br><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF;</span><br><span class="line">setenforce 0;</span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config;</span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes&#x3D;kubernetes;</span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">EOF;</span><br><span class="line">sysctl --system;</span><br><span class="line">systemctl start kubelet;</span><br><span class="line">hostnamectl set-hostname kongkong;</span><br><span class="line">kubeadm init  --apiserver-advertise-address&#x3D;192.168.10.214 --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.16.2 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16;</span><br><span class="line">service network restart;</span><br><span class="line">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward;</span><br><span class="line">mkdir -p $HOME&#x2F;.kube;</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config;</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config;</span><br><span class="line">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml;</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.10.214:6443 --token anmlxr.h0j40e0uvhi7dh94 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:213f41553a5a5823c903c879837687b89b7930b814979e29fd784b76823ee3a4</span><br></pre></td></tr></table></figure>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>Error registering network: failed to acquire lease: node “kongkong” pod cidr not assigned<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Kubeadm init，没有增加 --pod-network-cidr 10.244.0.0&#x2F;16参数</span><br></pre></td></tr></table></figure></li>
<li>Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of “crypto/rsa: verification error” while trying to verify candidate authority certificate “kubernetes”)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">rm -rf $HOME&#x2F;.kube</span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure></li>
<li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4></li>
<li>kubelet.service<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;kubelet: The Kubernetes Node Agent</span><br><span class="line">Documentation&#x3D;http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;bin&#x2F;kubelet</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">StartLimitInterval&#x3D;0</span><br><span class="line">RestartSec&#x3D;10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>10-kubeadm.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Note: This dropin only works with kubeadm and kubelet v1.11+</span><br><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;KUBELET_KUBECONFIG_ARGS&#x3D;--bootstrap-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.conf --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf&quot;</span><br><span class="line">Environment&#x3D;&quot;KUBELET_CONFIG_ARGS&#x3D;--config&#x3D;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line"># This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env</span><br><span class="line"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span><br><span class="line"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;kubelet</span><br><span class="line">ExecStart&#x3D;</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;bin&#x2F;kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS</span><br></pre></td></tr></table></figure></li>
<li>安装container linux<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;opt&#x2F;cni&#x2F;bin</span><br><span class="line">mkdir -p &#x2F;opt&#x2F;bin</span><br><span class="line">mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;containernetworking&#x2F;plugins&#x2F;releases&#x2F;download&#x2F;v0.8.2&#x2F;cni-plugins-linux-amd64-v0.8.2.tgz</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;cri-tools&#x2F;releases&#x2F;download&#x2F;v1.16.2&#x2F;crictl-v1.16.2-linux-amd64.tar.gz</span><br><span class="line">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;v1.16.2&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubeadm</span><br><span class="line">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;v1.16.2&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubelet</span><br><span class="line">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;v1.16.2&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl</span><br><span class="line">chmod +x &#123;kubeadm,kubelet,kubectl&#125;</span><br><span class="line">sudo cp .&#x2F;kubelet.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line">sudo cp .&#x2F;10-kubeadm.conf &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d&#x2F;</span><br><span class="line">cp &#123;kubeadm,kubelet,kubectl&#125; &#x2F;opt&#x2F;bin&#x2F;</span><br><span class="line">cp &#123;kubeadm,kubelet,kubectl&#125; &#x2F;opt&#x2F;bin&#x2F;</span><br><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure>
<h4 id="archlinux安装"><a href="#archlinux安装" class="headerlink" title="archlinux安装"></a>archlinux安装</h4><img src="1.png" alt="archlinux安装"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载安装包</span><br><span class="line">git clone https:&#x2F;&#x2F;aur.archlinux.org&#x2F;kubernetes-bin.git</span><br><span class="line">下载PKGBUILD中对应文件</span><br><span class="line">执行</span><br><span class="line">makepkg --install</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes dashboard"></a>安装kubernetes dashboard</h4><ul>
<li>ca证书（<a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/）" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/certificates/）</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成ca私钥</span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line">证书自签名</span><br><span class="line">openssl req -x509 -new -nodes -key ca.key -subj &quot;&#x2F;CN&#x3D;192.168.188.130&quot; -days 10000 -out ca.crt</span><br><span class="line">显示证书内容</span><br><span class="line">openssl x509 -in ca.crt -noout -text</span><br></pre></td></tr></table></figure></li>
<li>dashboard证书<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成私钥</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">配置文件csr.conf</span><br><span class="line">[ req ]</span><br><span class="line">default_bits &#x3D; 2048</span><br><span class="line">prompt &#x3D; no</span><br><span class="line">default_md &#x3D; sha256</span><br><span class="line">req_extensions &#x3D; req_ext</span><br><span class="line">distinguished_name &#x3D; dn</span><br><span class="line"></span><br><span class="line">[ dn ]</span><br><span class="line">C &#x3D; CN</span><br><span class="line">ST &#x3D; FJ</span><br><span class="line">L &#x3D; XM</span><br><span class="line">O &#x3D; system:masters</span><br><span class="line">OU &#x3D; system:masters</span><br><span class="line">CN &#x3D; 192.168.10.214</span><br><span class="line"></span><br><span class="line">[ req_ext ]</span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line"></span><br><span class="line">[ alt_names ]</span><br><span class="line">DNS.1 &#x3D; kubernetes</span><br><span class="line">DNS.2 &#x3D; kubernetes.default</span><br><span class="line">DNS.3 &#x3D; kubernetes.default.svc</span><br><span class="line">DNS.4 &#x3D; kubernetes.default.svc.cluster</span><br><span class="line">DNS.5 &#x3D; kubernetes.default.svc.cluster.local</span><br><span class="line">IP.1 &#x3D; 192.168.10.214</span><br><span class="line">IP.2 &#x3D; 192.168.10.214</span><br><span class="line"></span><br><span class="line">[ v3_ext ]</span><br><span class="line">authorityKeyIdentifier&#x3D;keyid,issuer:always</span><br><span class="line">basicConstraints&#x3D;CA:FALSE</span><br><span class="line">keyUsage&#x3D;keyEncipherment,dataEncipherment</span><br><span class="line">extendedKeyUsage&#x3D;serverAuth,clientAuth</span><br><span class="line">subjectAltName&#x3D;@alt_names</span><br><span class="line">证书签名</span><br><span class="line">openssl req -new -key server.key -out server.csr -config csr.conf</span><br><span class="line">签发证书</span><br><span class="line">openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \</span><br><span class="line">-CAcreateserial -out server.crt -days 10000 \</span><br><span class="line">-extensions v3_ext -extfile csr.conf</span><br><span class="line">显示证书内容</span><br><span class="line">openssl x509 -in server.crt -noout -text</span><br></pre></td></tr></table></figure></li>
<li>第一种创建kubernetes-dashboard（修改recommended.yaml）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一处：NodePort</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      nodePort: 30443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  type: NodePort</span><br><span class="line">第二处：添加证书</span><br><span class="line"> containers:</span><br><span class="line">        - args:</span><br><span class="line">          - --tls-cert-file&#x3D;.&#x2F;dashboard.crt</span><br><span class="line">          - --tls-key-file&#x3D;.&#x2F;dashboard.key</span><br><span class="line">第三处：修改挂载</span><br><span class="line">        - name: kubernetes-dashboard-certs</span><br><span class="line">          hostPath:</span><br><span class="line">            # directory location on host</span><br><span class="line">            path: &#x2F;certs</span><br><span class="line">            # this field is optional</span><br><span class="line">            type: Directory</span><br><span class="line">         # secret:</span><br><span class="line">         #  secretName: kubernetes-dashboard-certs</span><br><span class="line">kubectl apply -f .&#x2F;recommended.yaml</span><br></pre></td></tr></table></figure></li>
<li>第二种创建kubernetes-dashboard（创建证书，直接挂载）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file&#x3D;$HOME&#x2F;certs -n kubernetes-dashboard</span><br><span class="line">kubectl apply -f .&#x2F;recommended.yaml</span><br></pre></td></tr></table></figure></li>
<li>授权<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kuberenetes-dashboard1 --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kubernetes-dashboard:kubernetes-dashboard</span><br></pre></td></tr></table></figure></li>
<li>获取token<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl describe secrets $(kubectl get secrets -A |grep kubernetes-dashboard-token|awk &#39;&#123;print $2&#125;&#39;) -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<h4 id="安装监控Heapster"><a href="#安装监控Heapster" class="headerlink" title="安装监控Heapster"></a>安装监控Heapster</h4></li>
<li>下载<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir heapster &amp;&amp; cd heapster</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;heapster&#x2F;master&#x2F;deploy&#x2F;kube-config&#x2F;influxdb&#x2F;grafana.yaml</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;heapster&#x2F;master&#x2F;deploy&#x2F;kube-config&#x2F;influxdb&#x2F;heapster.yaml</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;heapster&#x2F;master&#x2F;deploy&#x2F;kube-config&#x2F;influxdb&#x2F;influxdb.yaml</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;heapster&#x2F;master&#x2F;deploy&#x2F;kube-config&#x2F;rbac&#x2F;heapster-rbac.yaml</span><br><span class="line">sed -i &quot;s&#x2F;k8s.gcr.io&#x2F;registry.cn-hangzhou.aliyuncs.com\&#x2F;google_containers&#x2F;g&quot; &#96;grep &quot;k8s.gcr.io&quot; -rl .&#x2F;&#96;</span><br><span class="line">sed -i &quot;s&#x2F;apiVersion: extensions\&#x2F;v1beta1&#x2F;apiVersion: apps\&#x2F;v1&#x2F;g&quot; &#96;grep &quot;apiVersion: extensions\&#x2F;v1beta1&quot; -rl .&#x2F;&#96;</span><br><span class="line">kubectl create -f .&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">istioctl manifest apply --set values.pilot.resources.requests.cpu&#x3D;100m --set values.pilot.resources.requests.memory&#x3D;256Mi --set values.gateways.istio-ingressgateway.type&#x3D;NodePort --set values.mixer.telemetry.resources.requests.cpu&#x3D;100m --set values.mixer.telemetry.resources.requests.memory&#x3D;100Mi --set profile&#x3D;default</span><br><span class="line">查看路由</span><br><span class="line">route -n</span><br><span class="line">查看iptables</span><br><span class="line">iptables -t nat -nvL</span><br><span class="line">抓包</span><br><span class="line">tcpdump tcp  port 15029</span><br><span class="line">进入容器</span><br><span class="line">kubectl exec -it istio-pilot-7989874664-f5pvf sh -n istio-system     </span><br><span class="line">重启</span><br><span class="line">kubectl get po istio-pilot-7989874664-vlz5q -n istio-system -oyaml|kubectl replace --force -f -</span><br></pre></td></tr></table></figure>
<h4 id="监控博客"><a href="#监控博客" class="headerlink" title="监控博客"></a>监控博客</h4><a href="https://www.cnblogs.com/skyflask/articles/11410063.html" target="_blank" rel="noopener">kubernetes监控方案–cAdvisor+Heapster+InfluxDB+Grafana</a><br><a href="https://www.cnblogs.com/skyflask/p/11480988.html" target="_blank" rel="noopener">kubernetes监控终极方案-kube-promethues</a><h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;kubectl&#x2F;cheatsheet&#x2F;?source&#x3D;post_page---------------------------</span><br></pre></td></tr></table></figure>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4></li>
<li>Not enough data to create auth info structure.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;&#123;print $1&#125;&#39;)</span><br><span class="line">将整个token添加到~&#x2F;.kube&#x2F;config的最后</span><br></pre></td></tr></table></figure></li>
<li>Deployment” in version “extensions/v1beta1”<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改apiVersion</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br></pre></td></tr></table></figure></li>
<li>k8s内存<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">您可以使用以下后缀之一作为平均整数或定点整数表示内存：E，P，T，G，M，K。</span><br><span class="line"></span><br><span class="line">您还可以使用两个字母的等效的幂数：Ei，Pi，Ti ，Gi，Mi，Ki。例如，以下代表大致相同的值：</span><br><span class="line"></span><br><span class="line">128974848, 129e6, 129M, 123Mi</span><br><span class="line">i表示（1Mi&#x3D;1024x1024）, M表示（1M&#x3D;1000x1000）（其它单位类推， 如Ki&#x2F;K Gi&#x2F;G）</span><br></pre></td></tr></table></figure></li>
<li>k8s删除pod一直处于terminating状态<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get all -ns NS</span><br><span class="line">kubectl delete pod [pod name] --force --grace-period&#x3D;0 -n [namespace]</span><br><span class="line">kubectl patch pvc PVC_NAME -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;: []&#125;&#125;&#39; --type&#x3D;merge</span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/installation.md" target="_blank" rel="noopener">github kubernetes-dashboard</a><br><a href="https://feisky.gitbooks.io/kubernetes/components/kubectl.html" target="_blank" rel="noopener">Kubernetes指南</a><br><a href="https://blog.51cto.com/goome/2358569" target="_blank" rel="noopener">k8s实践2:user和rbac绑定</a></li>
</ul>
]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro安装问题</title>
    <url>/2019/09/06/manjaro%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li><p>sogou输入法无法输入中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sogou-qimpanel: error while loading shared libraries: libfcitx-qt.so.0: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">yaourt -S fcitx-qt4 错误解除</span><br></pre></td></tr></table></figure></li>
<li><p>sogou配置有误 （一直停留登录界面）<br>修改vim ~/.xprofile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export XIM&#x3D;fcitx  </span><br><span class="line">export XIM_PROGRAM&#x3D;fcitx</span><br><span class="line">export GTK_IM_MODULE&#x3D;fcitx</span><br><span class="line">export QT_IM_MODULE&#x3D;fcitx</span><br><span class="line">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>无法找到目标文件分割所需的 strip 二进制文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S core&#x2F;binutils</span><br></pre></td></tr></table></figure></li>
<li><p>PKGBUILD:行35: patch：未找到命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S patch</span><br></pre></td></tr></table></figure>
</li>
<li><p>sogou-qimpanel: error while loading shared libraries: libfcitx-qt.so.0: cannot open shared object file: No such file or directory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装 fcitx-qt4</span><br><span class="line">yay -S aur&#x2F;fcitx-qt4</span><br></pre></td></tr></table></figure>
</li>
<li><p>代理问题Failed to connect to 127.0.0.1 port 1080: Connection refused</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env | grep -i proxy</span><br><span class="line">unset http_proxy</span><br><span class="line">unset ftp_proxy</span><br><span class="line">unset all_proxy</span><br><span class="line">unset https_proxy</span><br><span class="line">unset no_proxy</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>添加application</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;applications </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;share&#x2F;applications</span><br><span class="line">~&#x2F;.local&#x2F;share&#x2F;applications</span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Version&#x3D;1.0</span><br><span class="line">Name&#x3D;IntelliJ IDEA</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;ide&#x2F;idea&#x2F;bin&#x2F;idea.sh</span><br><span class="line">Icon&#x3D;&#x2F;opt&#x2F;ide&#x2F;idea&#x2F;bin&#x2F;idea.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Categories&#x3D;Development;Languages;Java;</span><br></pre></td></tr></table></figure>
</li>
<li><p>zsh: corrupt history file /home/XXX/.zsh_history</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp .zsh_history zsh_history</span><br><span class="line">rm -f .zsh_history </span><br><span class="line">strings zsh_history .zsh_history</span><br><span class="line">#OK了，修复成功。</span><br></pre></td></tr></table></figure></li>
<li><p>查看驱动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mhwd -li</span><br></pre></td></tr></table></figure></li>
<li><p>花生壳ssh登录</p>
<ul>
<li>下载phddns-3.0.2.x86_64.rpm</li>
<li>解压将相关的文件复制到根目录下的/etc/和/usr/sbin</li>
<li>phddns stop (yes停止)</li>
<li>启动服务</li>
<li>phdaemon</li>
<li>复制 sn 如(ORAYd4eca0e090f8)登录<a href="https://b.oray.com" target="_blank" rel="noopener">https://b.oray.com</a></li>
</ul>
</li>
</ul>
<h3 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.配置镜像源:</span><br><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">2.设置 archlinuxcn 源,antergos源,arch4edu源:</span><br><span class="line">sudo vi &#x2F;etc&#x2F;pacman.conf</span><br><span class="line"></span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel &#x3D; Optional TrustedOnly</span><br><span class="line">#中科大源</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class="line">#清华源</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class="line"></span><br><span class="line">[antergos]</span><br><span class="line">SigLevel &#x3D; TrustAll</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;antergos&#x2F;$repo&#x2F;$arch</span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">SigLevel &#x3D; TrustAll</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;arch4edu&#x2F;$arch</span><br><span class="line"></span><br><span class="line">[sublime-text]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;download.sublimetext.com&#x2F;arch&#x2F;stable&#x2F;x86_64</span><br><span class="line"></span><br><span class="line">3.更新源列表</span><br><span class="line">sudo pacman-mirrors -g</span><br><span class="line">curl -O https:&#x2F;&#x2F;download.sublimetext.com&#x2F;sublimehq-pub.gpg &amp;&amp; sudo pacman-key --add sublimehq-pub.gpg &amp;&amp; sudo pacman-key --lsign-key 8A8F901A &amp;&amp; rm sublimehq-pub.gpg</span><br><span class="line">4.更新pacman数据库并全面更新系统</span><br><span class="line">sudo pacman -Syyu</span><br><span class="line">5.防止PGP签名错误</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br><span class="line">sudo pacman -S antergos-keyring</span><br></pre></td></tr></table></figure>

<h3 id="安装基础工具"><a href="#安装基础工具" class="headerlink" title="安装基础工具"></a>安装基础工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S base-devel &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm git &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm vim &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm yay &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm yaourt &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm wps-office &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm ttf-wps-fonts &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm fcitx-googlepinyin &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm fcitx-im &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm fcitx-configtool &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm bash-completion &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm flashplugin &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm tree &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm nodejs &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm npm &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm postman &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm patch &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm google-chrome &amp;&amp;\</span><br><span class="line">sudo pacman -S --noconfirm zsh zsh-completions &amp;&amp;\</span><br><span class="line">sudo pacman -Syu sublime-text &amp;&amp;\</span><br><span class="line">yay -S --noconfirm debtap &amp;&amp;\</span><br><span class="line">yay -S --noconfirm foxitreader &amp;&amp;\</span><br><span class="line">yay -S --noconfirm xmind &amp;&amp;\</span><br><span class="line">yaourt -S --noconfirm netease-cloud-music &amp;&amp;\</span><br><span class="line">yaourt -S --noconfirm deepin.com.thunderspeed &amp;&amp;\</span><br><span class="line">yaourt -S --noconfirm deepin-wine-wechat &amp;&amp;\</span><br><span class="line">yaourt -S --noconfirm deepin-wine-tim &amp;&amp;\</span><br><span class="line">yaourt -S --noconfirm deepin-wine-tim</span><br></pre></td></tr></table></figure>
<h3 id="debtap"><a href="#debtap" class="headerlink" title="debtap"></a>debtap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开 &#x2F;usr&#x2F;bin&#x2F;debtap，更换 debtap内容：</span><br><span class="line"></span><br><span class="line">替换：http:&#x2F;&#x2F;ftp.debian.org&#x2F;debian&#x2F;dists</span><br><span class="line">https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;dists</span><br><span class="line"></span><br><span class="line">替换：http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F;dists</span><br><span class="line">https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F;dists&#x2F;</span><br><span class="line"></span><br><span class="line">sudo debtap -u</span><br></pre></td></tr></table></figure>

<h3 id="修改home目录名为英文"><a href="#修改home目录名为英文" class="headerlink" title="修改home目录名为英文"></a>修改home目录名为英文</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.config&#x2F;user-dirs.dirs</span><br><span class="line">修改如下</span><br><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Download&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;</span><br><span class="line">执行</span><br><span class="line">cd ~</span><br><span class="line">mv 公共 Public</span><br><span class="line">mv 模板 Templates</span><br><span class="line">mv 视频 Videos</span><br><span class="line">mv 图片 Pictures</span><br><span class="line">mv 文档 Documents</span><br><span class="line">mv 下载 Download</span><br><span class="line">mv 音乐 Music</span><br><span class="line">mv 桌面 Desktop</span><br></pre></td></tr></table></figure>

<h3 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line">.&#x2F;oh-my-zsh.sh</span><br><span class="line">cat &#x2F;etc&#x2F;shells</span><br><span class="line">chsh -s &#x2F;bin&#x2F;zsh</span><br><span class="line"></span><br><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;gradle&#x2F;gradle-completion ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;gradle-completion</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;zsh-autosuggestions</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;romkatv&#x2F;powerlevel10k.git $ZSH_CUSTOM&#x2F;themes&#x2F;powerlevel10k</span><br><span class="line"></span><br><span class="line">vim ~&#x2F;.zshrc</span><br><span class="line">设置 ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;</span><br><span class="line"></span><br><span class="line">plugins+&#x3D;(gradle-completion)</span><br><span class="line">plugins+&#x3D;(zsh-syntax-highlighting)</span><br><span class="line">plugins+&#x3D;(zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="输入法配置"><a href="#输入法配置" class="headerlink" title="输入法配置"></a>输入法配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim ~&#x2F;.xprofile</span><br><span class="line"></span><br><span class="line">export GTK_IM_MODULE&#x3D;fcitx</span><br><span class="line">export QT_IM_MODULE&#x3D;fcitx</span><br><span class="line">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;</span><br></pre></td></tr></table></figure>

<h3 id="npm配置"><a href="#npm配置" class="headerlink" title="npm配置"></a>npm配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">mkdir ~&#x2F;.npm-global </span><br><span class="line">npm config set prefix &#39;~&#x2F;.npm-global&#39;</span><br><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br><span class="line">export PATH&#x3D;~&#x2F;.npm-global&#x2F;bin:$PATH</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line">npm install -g npm-check-updates</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;huangyangcong&quot;</span><br><span class="line">git config --global user.email &quot;1352640897@qq.com&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;1352640897@qq.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h3><h3 id="配置golang"><a href="#配置golang" class="headerlink" title="配置golang"></a>配置golang</h3><h3 id="安装deb（百度网盘）"><a href="#安装deb（百度网盘）" class="headerlink" title="安装deb（百度网盘）"></a>安装deb（百度网盘）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解包</span><br><span class="line">sudo debtap baidunetdisk_linux_3.0.1.2.deb</span><br><span class="line">安装</span><br><span class="line">sudo pacman -U baidunetdisk_linux_3.0.1.2.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="scrt-sfx"><a href="#scrt-sfx" class="headerlink" title="scrt-sfx"></a>scrt-sfx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装 </span><br><span class="line">双击scrt-sfx-8.7.2-1-x86_64.pkg.tar.zst</span><br><span class="line">复制</span><br><span class="line">cd icu4c-63_2-src&#x2F;icu&#x2F;source </span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr          </span><br><span class="line">make</span><br><span class="line">sudo cp lib&#x2F;libicuuc.so.63  &#x2F;usr&#x2F;lib;sudo cp lib&#x2F;libicui18n.so.63 &#x2F;usr&#x2F;lib;sudo cp stubdata&#x2F;libicudata.so.63 &#x2F;usr&#x2F;lib</span><br><span class="line">破解</span><br><span class="line">sudo perl securefx_forgeek_crack.pl &#x2F;usr&#x2F;bin&#x2F;SecureFX</span><br><span class="line">sudo perl securecrt_forgeek_crack.pl &#x2F;usr&#x2F;bin&#x2F;SecureCRT</span><br></pre></td></tr></table></figure>

<h3 id="配置idea"><a href="#配置idea" class="headerlink" title="配置idea"></a>配置idea</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在idea.sh顶部中添加</span><br><span class="line">export XMODIFIERS&#x3D;@im&#x3D;fcitx</span><br><span class="line">export QT_IM_MODULE&#x3D;fcitx</span><br><span class="line"></span><br><span class="line">打开fctix配置</span><br><span class="line">删除ctrl+shift+s的快捷键</span><br><span class="line"></span><br><span class="line">打开一个项目将jetbrains-agent.jar拖入项目，重启选择code破解完成</span><br></pre></td></tr></table></figure>

<h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看已安装驱动</span><br><span class="line">mhwd -li</span><br><span class="line">删除驱动</span><br><span class="line">mhwd -r pci video-nvidia</span><br><span class="line"></span><br><span class="line">------ 台式机----------</span><br><span class="line">添加可执行权限</span><br><span class="line">chmod a+x *.run</span><br><span class="line">#关闭显示管理器</span><br><span class="line">systemctl stop lightdm | systemctl stop gdm</span><br><span class="line">安装</span><br><span class="line">uname -r </span><br><span class="line">sudo pacman -S linux56-headers</span><br><span class="line">sudo .&#x2F;NVIDIA-Linux-x86_64-435.212.run --kernel-source-path&#x3D;&#x2F;lib&#x2F;modules&#x2F;4.19.66-1-MANJARO&#x2F;build</span><br><span class="line">------ 台式机----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------笔记本双显卡解决方案----------</span><br><span class="line">sudo mhwd -f -i pci video-hybrid-intel-nvidia-430xx-bumblebee</span><br><span class="line">sudo systemctl enable bumblebeed</span><br><span class="line">sudo gpasswd -a $USER bumblebee</span><br><span class="line"></span><br><span class="line">配置Bumblebee</span><br><span class="line">sudo vim &#x2F;etc&#x2F;bumblebee&#x2F;bumblebee.conf</span><br><span class="line">修改如下内容</span><br><span class="line">[driver-nvidia]</span><br><span class="line"># Module name to load, defaults to Driver if empty or unset</span><br><span class="line">KernelDriver&#x3D;nvidia</span><br><span class="line">PMMethod&#x3D;bbswitch</span><br><span class="line">[driver-nouveau]</span><br><span class="line">KernelDriver&#x3D;nouveau</span><br><span class="line">PMMethod&#x3D;bbswitch</span><br><span class="line">XorgConfFile&#x3D;&#x2F;etc&#x2F;bumblebee&#x2F;xorg.conf.nouveau</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line"></span><br><span class="line">开启NVIDIA显卡</span><br><span class="line">sudo tee &#x2F;proc&#x2F;acpi&#x2F;bbswitch &lt;&lt;&lt; ON  # 关闭是off</span><br><span class="line"></span><br><span class="line">NVIDIA控制面板无法打开的问题</span><br><span class="line">通过如下指令打开</span><br><span class="line">optirun -b none nvidia-settings -c :8</span><br><span class="line">————————————————</span><br><span class="line">------------------笔记本双显卡解决方案----------</span><br><span class="line"></span><br><span class="line">查看显卡运行状况</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>manjaro</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令记录</title>
    <url>/2019/08/09/linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="egrep："><a href="#egrep：" class="headerlink" title="egrep："></a>egrep：</h4><ul>
<li>-i 忽略字母大小写</li>
<li>-v 条件取反</li>
<li>-c 统计匹配行数</li>
<li>-q 静默，无任何输出</li>
<li>-n 显示匹配结果所在的行号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取当前目录以jar结尾的文件名</span><br><span class="line">ls |egrep &#39;jar$&#39;</span><br></pre></td></tr></table></figure>

<h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w 向后移动一个单词</span><br><span class="line">e 也是向后移动一个单词，但是是移动到单词尾部，w是移动到单词首部</span><br><span class="line">b 向前移动一个单词</span><br><span class="line">数字+gg，移动到第几行</span><br><span class="line">数字 + j or k，向下向上移动多行，建议配合相对行号使用</span><br><span class="line">^移动到行首(不包含空格)，0也是移动到行首（包含空格），$移动到行尾</span><br><span class="line">ctrl-d 向下移动半页</span><br><span class="line">ctrl-u 向上移动半页</span><br><span class="line">ctrl-f 向下移动一页</span><br><span class="line">ctrl-b 向上移动一页</span><br><span class="line">f + 字符，向后移动到某字符，按;向后继续查找，,向前查找，使用F是向前移动（vim基本所有字母的大小写功能都相反）</span><br></pre></td></tr></table></figure>

<h4 id="行缩进"><a href="#行缩进" class="headerlink" title="行缩进"></a>行缩进</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">49行移动5个tab</span><br><span class="line">:49&gt;5</span><br></pre></td></tr></table></figure>
<h4 id="行移动"><a href="#行移动" class="headerlink" title="行移动"></a>行移动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:5 move 2</span><br><span class="line">:5 m 2</span><br><span class="line">:m-2</span><br></pre></td></tr></table></figure>
<h4 id="多行删除"><a href="#多行删除" class="headerlink" title="多行删除"></a>多行删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:49,50d</span><br></pre></td></tr></table></figure>

<h4 id="获取文件名和后缀"><a href="#获取文件名和后缀" class="headerlink" title="获取文件名和后缀"></a>获取文件名和后缀</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*file&#x3D;&quot;thisfile.txt&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;filename: $&#123;file%.*&#125;&quot;</span><br><span class="line"></span><br><span class="line">txt </span><br><span class="line">echo &quot;extension: $&#123;file##*.&#125;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="获取端口的进程"><a href="#获取端口的进程" class="headerlink" title="获取端口的进程"></a>获取端口的进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -nlp | grep :21100| awk &#39;&#123;print $7&#125;&#39;| awk -F&quot;&#x2F;&quot; &#39;&#123;print $1&#125;&#39;</span><br></pre></td></tr></table></figure>

<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5044 -j DROP</span><br></pre></td></tr></table></figure>


<h4 id="替换文件字符串"><a href="#替换文件字符串" class="headerlink" title="替换文件字符串"></a>替换文件字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、将当前目录下包含jack串的文件中，jack字符串替换为tom</span><br><span class="line">sed -i &quot;s&#x2F;jack&#x2F;tom&#x2F;g&quot; &#96;grep &quot;jack&quot; -rl .&#x2F;&#96;</span><br><span class="line"></span><br><span class="line">2、将某个文件中的jack字符串替换为tom</span><br><span class="line">sed -i &quot;s&#x2F;jack&#x2F;tom&#x2F;g&quot; test.txt</span><br></pre></td></tr></table></figure>

<h4 id="批量删除进程"><a href="#批量删除进程" class="headerlink" title="批量删除进程"></a>批量删除进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 &#96;ps -ef |grep xxx|awk &#39;&#123;print $2&#125;&#39; &#96;</span><br></pre></td></tr></table></figure>

<h4 id="vim中文乱码"><a href="#vim中文乱码" class="headerlink" title="vim中文乱码"></a>vim中文乱码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">找到&#x2F;etc&#x2F;vimrc</span><br><span class="line">编辑~&#x2F;.vimrc文件，加上如下几行：</span><br><span class="line">set fileencodings&#x3D;utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line">set termencoding&#x3D;utf-8</span><br><span class="line">set encoding&#x3D;utf-8</span><br></pre></td></tr></table></figure>

<h4 id="进程释放空间"><a href="#进程释放空间" class="headerlink" title="进程释放空间"></a>进程释放空间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nc-ftp02 data]# lsof -n &#x2F;data |grep deleted  </span><br><span class="line">sh         8757 root    1w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">sh         8757 root    2w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">rsync     28485 root    1w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">rsync     28485 root    2w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">ssh       28486 root    2w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">ssh       28486 root    6w   REG  202,5 287246420690       12 &#x2F;data&#x2F;nohup.out (deleted)</span><br><span class="line">[root@nc-ftp02 data]# lsof -n &#x2F;data |grep deleted|awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">8757</span><br><span class="line">8757</span><br><span class="line">28674</span><br><span class="line">28674</span><br><span class="line">28675</span><br><span class="line">28675</span><br><span class="line">[root@nc-ftp02 data]# lsof -n &#x2F;data |grep deleted|awk &#39;&#123;print $2&#125;&#39;|xargs kill -9</span><br><span class="line">[root@nc-ftp02 data]# lsof -n &#x2F;data |grep deleted</span><br><span class="line">[root@nc-ftp02 data]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;xvda2       99G  4.2G   90G   5% &#x2F;</span><br><span class="line">tmpfs           3.9G  228K  3.9G   1% &#x2F;dev&#x2F;shm</span><br><span class="line">&#x2F;dev&#x2F;xvda1      380M   66M  294M  19% &#x2F;boot</span><br><span class="line">&#x2F;dev&#x2F;xvda5      386G   22G  345G   6% &#x2F;data</span><br></pre></td></tr></table></figure>

<h4 id="开放端口-1"><a href="#开放端口-1" class="headerlink" title="开放端口"></a>开放端口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、查看状态：iptables -L -n</span><br><span class="line">2、直接编辑：vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br><span class="line">3、端口开放：-A INPUT -m state --state NEW -m tcp -p tcp --dport 18080 -j ACCEPT</span><br><span class="line">4、保存文件：:wq</span><br><span class="line">5、重启防火墙：service iptables restart</span><br><span class="line">备注：批量开端口 -A INPUT -p tcp -m tcp --dport 18080:18090 -j ACCEPT</span><br><span class="line"></span><br><span class="line">屏蔽ip</span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令</span><br><span class="line">iptables -I INPUT -s 123.0.0.0&#x2F;8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令</span><br><span class="line">iptables -I INPUT -s 124.45.0.0&#x2F;16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令</span><br><span class="line">iptables -I INPUT -s 123.45.6.0&#x2F;24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令是</span><br></pre></td></tr></table></figure>

<h4 id="jar后台运行"><a href="#jar后台运行" class="headerlink" title="jar后台运行"></a>jar后台运行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Linux下要使程序后台运行，可通过  java -jar Client.jar &amp;  来实现</span><br><span class="line">在Windows下，则通过  start &#x2F;b java -jar Client.jar  来实现</span><br></pre></td></tr></table></figure>

<h4 id="显示过滤注释-开头-和空行后的配置信息"><a href="#显示过滤注释-开头-和空行后的配置信息" class="headerlink" title="显示过滤注释( # ; 开头) 和空行后的配置信息"></a>显示过滤注释( # ; 开头) 和空行后的配置信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grep -Ev &quot;^$|^[#;]&quot; server.conf</span><br><span class="line"></span><br><span class="line">cat elasticsearch.yml | grep &quot;^\s*[^# \t].*$&quot;</span><br><span class="line"></span><br><span class="line">cat elasticsearch.yml  | grep -v  ^#  |grep -v ^$</span><br></pre></td></tr></table></figure>

<h4 id="显示所有带-root-的行"><a href="#显示所有带-root-的行" class="headerlink" title="显示所有带 root 的行"></a>显示所有带 root 的行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grep root &#x2F;etc&#x2F;passwd</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin</span><br><span class="line">$ cat &#x2F;etc&#x2F;passwd | grep root </span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>
<h4 id="将没有出现-root-的行取出来"><a href="#将没有出现-root-的行取出来" class="headerlink" title="将没有出现 root 的行取出来"></a>将没有出现 root 的行取出来</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grep -v root &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<h3 id="ll命令"><a href="#ll命令" class="headerlink" title="ll命令"></a>ll命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看隐藏文件</span><br><span class="line">ll -a</span><br><span class="line">查看文件大小以，K,M,G</span><br><span class="line">ll -alh</span><br></pre></td></tr></table></figure>

<h3 id="删除技巧"><a href="#删除技巧" class="headerlink" title="删除技巧"></a>删除技巧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;[Ctrl-v][Enter]&#x2F;&#x2F;g 删除DOS方式的回车^M</span><br><span class="line">:%s&#x3D; *$&#x3D;&#x3D; 删除行尾空白</span><br><span class="line">:%!sort -u 删除重复行</span><br><span class="line">:%s&#x2F;^.&#123;-&#125;pdf&#x2F;new.pdf&#x2F; 只是删除第一个pdf</span><br><span class="line">:%s&#x2F;&#x2F;&#x2F; 删除多行注释</span><br><span class="line">:g&#x2F;^$&#x2F;d 删除所有空行 </span><br><span class="line">:g!&#x2F;^dd&#x2F;d 删除不含字符串&#39;dd&#39;的行</span><br><span class="line">:v&#x2F;^dd&#x2F;d 删除不含字符串&#39;dd&#39;的行</span><br><span class="line">:g&#x2F;str1&#x2F;,&#x2F;str2&#x2F;d 删除所有第一个含str1到第一个含str2之间的行</span><br><span class="line">:v&#x2F;.&#x2F;.,&#x2F;.&#x2F;-1join 压缩空行</span><br><span class="line">:g&#x2F;^$&#x2F;,&#x2F;.&#x2F;-j 压缩空行</span><br><span class="line">ndw 或 ndW 删除光标处开始及其后的 n-1 个字符。</span><br><span class="line">d0 删至行首。</span><br><span class="line">d$ 删至行尾。</span><br><span class="line">ndd 删除当前行及其后 n-1 行。</span><br><span class="line">x 或 X 删除一个字符。</span><br><span class="line">Ctrl+u 删除输入方式下所输入的文本。</span><br><span class="line">D 删除到行尾</span><br><span class="line">x,y 删除与复制包含高亮区</span><br><span class="line">dl 删除当前字符（与x命令功能相同）</span><br><span class="line">d0 删除到某一行的开始位置</span><br><span class="line">d^ 删除到某一行的第一个字符位置（不包括空格或TAB字符）</span><br><span class="line">dw 删除到某个单词的结尾位置</span><br><span class="line">d3w 删除到第三个单词的结尾位置</span><br><span class="line">db 删除到某个单词的开始位置</span><br><span class="line">dW 删除到某个以空格作为分隔符的单词的结尾位置</span><br><span class="line">dB 删除到某个以空格作为分隔符的单词的开始位置</span><br><span class="line">d7B 删除到前面7个以空格作为分隔符的单词的开始位置</span><br><span class="line">d） 删除到某个语句的结尾位置</span><br><span class="line">d4） 删除到第四个语句的结尾位置</span><br><span class="line">d（ 删除到某个语句的开始位置</span><br><span class="line">d） 删除到某个段落的结尾位置</span><br><span class="line">d&#123; 删除到某个段落的开始位置</span><br><span class="line">d7&#123; 删除到当前段落起始位置之前的第7个段落位置</span><br><span class="line">dd 删除当前行</span><br><span class="line">d&#x2F;text 删除从文本中出现“text”中所指定字样的位置，一直向前直到下一个该字样所出现的位置（但不包括该字样）之间的内容</span><br><span class="line">dfc 删除从文本中出现字符“c”的位置，一直向前直到下一个该字符所出现的位置（包括该字符）之间的内容</span><br><span class="line">dtc 删除当前行直到下一个字符“c”所出现位置之间的内容</span><br><span class="line">D 删除到某一行的结尾</span><br><span class="line">d$ 删除到某一行的结尾</span><br><span class="line">5dd 删除从当前行所开始的5行内容</span><br><span class="line">dL 删除直到屏幕上最后一行的内容</span><br><span class="line">dH 删除直到屏幕上第一行的内容</span><br><span class="line">dG 删除直到工作缓存区结尾的内容</span><br><span class="line">d1G 删除直到工作缓存区开始的内容</span><br></pre></td></tr></table></figure>
<h3 id="查找含有某字符串的所有文件"><a href="#查找含有某字符串的所有文件" class="headerlink" title="查找含有某字符串的所有文件"></a>查找含有某字符串的所有文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -r &quot;&#123;关键字&#125;&quot;  &#123;路径&#125;</span><br><span class="line">例如：</span><br><span class="line">grep -r &quot;xxx&quot;  &#x2F;data&#x2F;reports</span><br><span class="line">* : 表示当前目录所有文件，也可以是某个文件名</span><br><span class="line">-r 是递归查找</span><br><span class="line">-n 是显示行号</span><br><span class="line">-R 查找所有文件包含子目录</span><br><span class="line">-i 忽略大小写</span><br></pre></td></tr></table></figure>

<p>###</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看当前目录下的文件数量（不包含子目录中的文件）</span><br><span class="line">ls -l|grep &quot;^-&quot;| wc -l</span><br><span class="line"></span><br><span class="line"># 查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录</span><br><span class="line">ls -lR|grep &quot;^-&quot;| wc -l</span><br><span class="line"></span><br><span class="line"># 查看当前目录下的文件夹目录个数（不包含子目录中的目录），同上述理，如果需要查看子目录的，加上R</span><br><span class="line">ls -l|grep &quot;^d&quot;| wc -l</span><br><span class="line"></span><br><span class="line"># 查询当前路径下的指定前缀名的目录下的所有文件数量</span><br><span class="line"></span><br><span class="line"># 例如：统计所有以“20161124”开头的目录下的全部文件数量</span><br><span class="line">ls -lR 20161124*&#x2F;|grep &quot;^-&quot;| wc -l</span><br></pre></td></tr></table></figure>

<h3 id="find-不递归查找"><a href="#find-不递归查找" class="headerlink" title="find 不递归查找"></a>find 不递归查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1 -name “*.txt”</span><br></pre></td></tr></table></figure>

<h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">控制端口&#x2F;服务</span><br><span class="line">firewall-cmd --add-service&#x3D;mysql # 开放mysql端口</span><br><span class="line">firewall-cmd --remove-service&#x3D;http # 阻止http端口</span><br><span class="line">firewall-cmd --list-services  # 查看开放的服务</span><br><span class="line">firewall-cmd --add-port&#x3D;3306&#x2F;tcp # 开放通过tcp访问3306</span><br><span class="line">firewall-cmd --remove-port&#x3D;80tcp # 阻止通过tcp访问3306</span><br><span class="line">firewall-cmd --add-port&#x3D;233&#x2F;udp  # 开放通过udp访问233</span><br><span class="line">firewall-cmd --list-ports  # 查看开放的端口</span><br><span class="line"></span><br><span class="line">伪装ip</span><br><span class="line">firewall-cmd --query-masquerade # 检查是否允许伪装IP</span><br><span class="line">firewall-cmd --add-masquerade # 允许防火墙伪装IP</span><br><span class="line">firewall-cmd --remove-masquerade# 禁止防火墙伪装IP</span><br><span class="line"></span><br><span class="line">端口转发</span><br><span class="line">将80端口的流量转发至8080</span><br><span class="line">firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toport&#x3D;8080</span><br><span class="line"># 将80端口的流量转发至</span><br><span class="line">firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toaddr&#x3D;192.168.1.0.1192.168.0.1</span><br><span class="line"># 将80端口的流量转发至192.168.0.1的8080端口</span><br><span class="line">firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toaddr&#x3D;192.168.0.1:toport&#x3D;8080</span><br></pre></td></tr></table></figure>

<h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$&#123;file#*&#x2F;&#125;：删掉第一个 &#x2F; 及其左边的字符串：dir1&#x2F;dir2&#x2F;dir3&#x2F;my.file.txt</span><br><span class="line">$&#123;file##*&#x2F;&#125;：删掉最后一个 &#x2F; 及其左边的字符串：my.file.txt</span><br><span class="line">$&#123;file#*.&#125;：删掉第一个 . 及其左边的字符串：file.txt</span><br><span class="line">$&#123;file##*.&#125;：删掉最后一个 . 及其左边的字符串：txt</span><br><span class="line">$&#123;file%&#x2F;*&#125;：删掉最后一个 &#x2F; 及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3</span><br><span class="line">$&#123;file%%&#x2F;*&#125;：删掉第一个 &#x2F; 及其右边的字符串：(空值)</span><br><span class="line">$&#123;file%.*&#125;：删掉最后一个 . 及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;my.file</span><br><span class="line">$&#123;file%%.*&#125;：删掉第一个 . 及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;my</span><br></pre></td></tr></table></figure>

<h4 id="查看硬件信息"><a href="#查看硬件信息" class="headerlink" title="查看硬件信息"></a>查看硬件信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看CPU信息</span><br><span class="line"># 总核数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数</span><br><span class="line"># 总逻辑CPU数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</span><br><span class="line"># 查看物理CPU个数</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span><br><span class="line"># 查看每个物理CPU中core的个数(即核数)</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br><span class="line"># 查看逻辑CPU的个数</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo| grep &quot;processor&quot;| wc -l</span><br><span class="line"># 查看CPU信息（型号）</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"></span><br><span class="line"># 查看内存信息</span><br><span class="line">cat &#x2F;proc&#x2F;meminfo</span><br><span class="line"></span><br><span class="line"># 查看是否固态硬盘</span><br><span class="line">lsscsi</span><br><span class="line"># 查看硬盘</span><br><span class="line">cat &#x2F;proc&#x2F;scsi&#x2F;scsi</span><br><span class="line"># 查看块设备信息</span><br><span class="line">lsblk </span><br><span class="line">#查看硬盘大小</span><br><span class="line">fdisk -l |grep Disk  </span><br><span class="line">#查看磁盘空间占用情况</span><br><span class="line">df -h </span><br><span class="line"># 查看是否ssd 返回值0即为SSD；返回1即为HDD。</span><br><span class="line">cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;rotational</span><br></pre></td></tr></table></figure>
<h4 id="排序归并"><a href="#排序归并" class="headerlink" title="排序归并"></a>排序归并</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls *.log.*.log|grep -Eo &quot;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&quot;| sort |uniq</span><br></pre></td></tr></table></figure>

<h4 id="硬盘热插拔"><a href="#硬盘热插拔" class="headerlink" title="硬盘热插拔"></a>硬盘热插拔</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;f-ck-need-u&#x2F;p&#x2F;7067006.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes</title>
    <url>/2019/09/16/kubernetes/</url>
    <content><![CDATA[<h3 id="kubernetes-port-nodePort-targetPort-理解"><a href="#kubernetes-port-nodePort-targetPort-理解" class="headerlink" title="kubernetes port nodePort targetPort 理解"></a>kubernetes port nodePort targetPort 理解</h3><ul>
<li>targetport<br>targetPort是pod上的端口，从port和nodePort上到来的数据最终经过kube-proxy流入到后端pod的targetPort上进入容器。</li>
<li>port<br>service暴露在cluster ip上的端口，<cluster ip>:port 是提供给集群内部客户访问service的入口。</li>
<li>nodePort<br>nodePort是kubernetes提供给集群外部客户访问service入口的一种方式（另一种方式是LoadBalancer），所以，<nodeIP>:nodePort 是提供给集群外部客户访问service的入口。</li>
</ul>
<h3 id="Serive定义时，我们需要指定spec-type字段"><a href="#Serive定义时，我们需要指定spec-type字段" class="headerlink" title="Serive定义时，我们需要指定spec.type字段"></a>Serive定义时，我们需要指定spec.type字段</h3><ul>
<li>ClusterIP<br>默认值。给这个Service分配一个Cluster IP，它是Kubernetes系统自动分配的虚拟IP，因此只能在集群内部访问。</li>
<li>NodePort<br>将Service通过指定的Node上的端口暴露给外部。通过此方法，访问任意一个NodeIP:nodePort都将路由到ClusterIP，从而成功获得该服务。</li>
<li>LoadBalancer<br>在 NodePort 的基础上，借助 cloud provider 创建一个外部的负载均衡器，并将请求转发到 :NodePort。此模式只能在云服务器（AWS等）上使用。</li>
<li>ExternalName<br>将服务通过 DNS CNAME 记录方式转发到指定的域名（通过 spec.externlName 设定）。需要 kube-dns 版本在 1.7 以上。<h3 id="Pod的liveness和readiness探针"><a href="#Pod的liveness和readiness探针" class="headerlink" title="Pod的liveness和readiness探针"></a>Pod的liveness和readiness探针</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readinessProbe:  #（就绪探针）来确定容器是否已经就绪可以接受流量</span><br><span class="line">  httpGet:</span><br><span class="line">    path: &#x2F;jiaparts-support-api&#x2F;ver.txt</span><br><span class="line">    port: 8080</span><br><span class="line">    scheme: HTTP</span><br><span class="line">  initialDelaySeconds: 15  #告诉kubelet在第一次执行probe之前要的等待15秒</span><br><span class="line">  failureThreshold: 3   #探测成功后，最少连续探测失败多少次才被认定为失败。</span><br><span class="line">  periodSeconds: 30    #规定kubelet要每隔30秒执行一次liveness probe</span><br><span class="line">  timeoutSeconds: 20    #探测超时时间</span><br><span class="line">livenessProbe:   #（存活探针）来确定何时重启容器</span><br><span class="line">  httpGet:</span><br><span class="line">    path: &#x2F;jiaparts-support-api&#x2F;ver.txt</span><br><span class="line">    port: 8080</span><br><span class="line">    scheme: HTTP</span><br><span class="line">  initialDelaySeconds: 15</span><br><span class="line">  failureThreshold: 3</span><br><span class="line">  periodSeconds: 30</span><br><span class="line">  timeoutSeconds: 20</span><br></pre></td></tr></table></figure>
<h3 id="Kubernetes（Pod-Deployment-ReplicaSet-Service）之间的关系"><a href="#Kubernetes（Pod-Deployment-ReplicaSet-Service）之间的关系" class="headerlink" title="Kubernetes（Pod, Deployment, ReplicaSet,Service）之间的关系"></a>Kubernetes（Pod, Deployment, ReplicaSet,Service）之间的关系</h3>![Kubernetes（Pod, Deployment, ReplicaSet,Service）之间的关系](（Pod, Deployment, ReplicaSet,Service）之间的关系.png)<h3 id="相同命名空间访问"><a href="#相同命名空间访问" class="headerlink" title="相同命名空间访问"></a>相同命名空间访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;service.name&gt;:port</span><br><span class="line">&lt;service.name&gt;.&lt;namespace.name&gt;:port</span><br></pre></td></tr></table></figure>
<h3 id="不同命名空间访问"><a href="#不同命名空间访问" class="headerlink" title="不同命名空间访问"></a>不同命名空间访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql-svc.default.svc.cluster.local:port</span><br><span class="line">mysql-svc.default:port</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="apollo在k8s中"><a href="#apollo在k8s中" class="headerlink" title="apollo在k8s中"></a>apollo在k8s中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.jpa.database-platform &#x3D; org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure>
<h3 id="pod控制器"><a href="#pod控制器" class="headerlink" title="pod控制器"></a>pod控制器</h3><ul>
<li>ReplicationController<ul>
<li>在旧版本的Kubernetes中，只有ReplicationController对象。它的主要作用是确保Pod以你指定的副本数运行，即如果有容器异常退出，会自动创建新的 Pod 来替代；而异常多出来的容器也会自动回收。可以说，通过ReplicationController，Kubernetes实现了集群的高可用性。</li>
</ul>
</li>
<li>ReplicaSet<ul>
<li>它的核心作用是代用户创建指定数量的Pod副本，并确定Pod副本一直处于满足用户期望数量的状态，多退少补，同时支持扩缩容机制。主要有三个组件：<ul>
<li>用户期望的Pod副本数量；</li>
<li>标签选择器，选择属于自己管理和控制的Pod；</li>
<li>当前Pod数量不满足用户期望数量时，根据资源模板进行新建。</li>
</ul>
</li>
</ul>
</li>
<li>Deployment<ul>
<li>工作在ReplicaSet之上，用于管理无状态应用，除了ReplicaSet的机制，还增加了滚动更新和回滚功能，提供声明式配置。</li>
</ul>
</li>
<li>DaemonSet<ul>
<li>用于确保集群中的每一个节点只运行特定的pod副本，通常用于实现系统级后台任务。比如ELK服务。要求：服务是无状态的；服务必须是守护进程</li>
</ul>
</li>
<li>Job<ul>
<li>只要完成就立即退出，不需要重启或重建。</li>
</ul>
</li>
<li>Cronjob<ul>
<li>周期性任务控制，不需要持续后台运行。</li>
</ul>
</li>
<li>StatefulSet<ul>
<li>管理有状态应用，如mysql，redis等。</li>
<li>Pod一致性：包含次序（启动、停止次序）、网络一致性。此一致性与Pod相关，与被调度到哪个node节点无关。</li>
<li>稳定的次序：对于N个副本的StatefulSet，每个Pod都在[0，N)的范围内分配一个数字序号，且是唯一的。</li>
<li>稳定的网络：Pod的hostname模式为$(statefulset名称)-$(序号)。</li>
<li>稳定的存储：通过VolumeClaimTemplate为每个Pod创建一个PV。删除、减少副本，不会删除相关的卷。</li>
</ul>
</li>
</ul>
<h4 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h4><ul>
<li>Volume<ul>
<li>emptyDir<ul>
<li>emptyDir类型的Volume在Pod分配到Node上时被创建，Kubernetes会在Node上自动分配一个目录，因此无需指定宿主机Node上对应的目录文件。<br>这个目录的初始内容为空，当Pod从Node上移除时，emptyDir中的数据会被永久删除。</li>
</ul>
</li>
<li>hostPath<ul>
<li>hostPath Volume的作用是将Docker Host文件系统中已经存在的目录mount给Pod的容器。</li>
</ul>
</li>
</ul>
</li>
<li>Storage Provider<ul>
<li>如果k8s部署在公有云上，可以直接使用云硬盘作为Volume。</li>
</ul>
</li>
<li>PersistentVolume<ul>
<li>是外部存储系统中的一块存储空间，由管理员创建和维护。与Volume一样，PV具有持久性，生命周期独立于Pod。</li>
</ul>
</li>
<li>PersistentVolumeClaim<ul>
<li>是对PV的申请。pvc通常由普通用户创建和维护。</li>
</ul>
</li>
</ul>
<h4 id="Kubernetes各组件服务重启"><a href="#Kubernetes各组件服务重启" class="headerlink" title="Kubernetes各组件服务重启"></a>Kubernetes各组件服务重启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MASTER端+NODE共同服务</span><br><span class="line">systemctl restart etcd</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable flanneld</span><br><span class="line">systemctl restart flanneld</span><br><span class="line"></span><br><span class="line">MASTER端独有服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-apiserver</span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-controller-manager</span><br><span class="line">systemctl restart kube-controller-manager</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-scheduler</span><br><span class="line">systemctl restart kube-scheduler</span><br><span class="line"></span><br><span class="line">NODE端独有服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl restart kubelet（status状态为 not ready时候重启即可）</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-proxy</span><br><span class="line">systemctl restart kube-proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl status etcd</span><br><span class="line">systemctl status flanneld</span><br><span class="line">systemctl status kube-apiserver</span><br><span class="line">systemctl status kube-controller-manager</span><br><span class="line">systemctl status kube-scheduler</span><br><span class="line">systemctl status kubelet</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure>

<h4 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes dashboard"></a>安装kubernetes dashboard</h4><ul>
<li><p>ca证书（<a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/）" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/certificates/）</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成ca私钥</span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line">证书自签名</span><br><span class="line">openssl req -x509 -new -nodes -key ca.key -subj &quot;&#x2F;CN&#x3D;192.168.188.130&quot; -days 10000 -out ca.crt</span><br><span class="line">显示证书内容</span><br><span class="line">openssl x509 -in ca.crt -noout -text</span><br></pre></td></tr></table></figure></li>
<li><p>dashboard证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成私钥</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">配置文件csr.conf</span><br><span class="line">[ req ]</span><br><span class="line">default_bits &#x3D; 2048</span><br><span class="line">prompt &#x3D; no</span><br><span class="line">default_md &#x3D; sha256</span><br><span class="line">req_extensions &#x3D; req_ext</span><br><span class="line">distinguished_name &#x3D; dn</span><br><span class="line"></span><br><span class="line">[ dn ]</span><br><span class="line">C &#x3D; CN</span><br><span class="line">ST &#x3D; FJ</span><br><span class="line">L &#x3D; XM</span><br><span class="line">O &#x3D; system:masters</span><br><span class="line">OU &#x3D; system:masters</span><br><span class="line">CN &#x3D; 192.168.10.214</span><br><span class="line"></span><br><span class="line">[ req_ext ]</span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line"></span><br><span class="line">[ alt_names ]</span><br><span class="line">DNS.1 &#x3D; kubernetes</span><br><span class="line">DNS.2 &#x3D; kubernetes.default</span><br><span class="line">DNS.3 &#x3D; kubernetes.default.svc</span><br><span class="line">DNS.4 &#x3D; kubernetes.default.svc.cluster</span><br><span class="line">DNS.5 &#x3D; kubernetes.default.svc.cluster.local</span><br><span class="line">IP.1 &#x3D; 192.168.10.214</span><br><span class="line">IP.2 &#x3D; 192.168.10.214</span><br><span class="line"></span><br><span class="line">[ v3_ext ]</span><br><span class="line">authorityKeyIdentifier&#x3D;keyid,issuer:always</span><br><span class="line">basicConstraints&#x3D;CA:FALSE</span><br><span class="line">keyUsage&#x3D;keyEncipherment,dataEncipherment</span><br><span class="line">extendedKeyUsage&#x3D;serverAuth,clientAuth</span><br><span class="line">subjectAltName&#x3D;@alt_names</span><br><span class="line">证书签名</span><br><span class="line">openssl req -new -key server.key -out server.csr -config csr.conf</span><br><span class="line">签发证书</span><br><span class="line">openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \</span><br><span class="line">-CAcreateserial -out server.crt -days 10000 \</span><br><span class="line">-extensions v3_ext -extfile csr.conf</span><br><span class="line">显示证书内容</span><br><span class="line">openssl x509 -in server.crt -noout -text</span><br></pre></td></tr></table></figure></li>
<li><p>第一种创建kubernetes-dashboard（修改recommended.yaml）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一处：NodePort</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      nodePort: 30443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  type: NodePort</span><br><span class="line">第二处：添加证书</span><br><span class="line"> containers:</span><br><span class="line">        - args:</span><br><span class="line">          - --tls-cert-file&#x3D;.&#x2F;dashboard.crt</span><br><span class="line">          - --tls-key-file&#x3D;.&#x2F;dashboard.key</span><br><span class="line">第三处：修改挂载</span><br><span class="line">        - name: kubernetes-dashboard-certs</span><br><span class="line">          hostPath:</span><br><span class="line">            # directory location on host</span><br><span class="line">            path: &#x2F;certs</span><br><span class="line">            # this field is optional</span><br><span class="line">            type: Directory</span><br><span class="line">         # secret:</span><br><span class="line">         #  secretName: kubernetes-dashboard-certs</span><br><span class="line">kubectl apply -f .&#x2F;recommended.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>第二种创建kubernetes-dashboard（创建证书，直接挂载）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file&#x3D;$HOME&#x2F;certs -n kubernetes-dashboard</span><br><span class="line">kubectl apply -f .&#x2F;recommended.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kuberenetes-dashboard1 --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kubernetes-dashboard:kubernetes-dashboard</span><br></pre></td></tr></table></figure></li>
<li><p>获取token</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get secret -n kubernetes-dashboard</span><br><span class="line">kubectl get secret kubernetes-dashboard-token-lmfgc  -n kubernetes-dashboard -o json| jq -r &#39;.data[&quot;token&quot;]&#39; | base64 -d &gt; user_token.txt</span><br><span class="line">cat user_token.txt</span><br></pre></td></tr></table></figure>
<h4 id="私有云裸金属架构的kubernetes集群不支持LoadBalance"><a href="#私有云裸金属架构的kubernetes集群不支持LoadBalance" class="headerlink" title="私有云裸金属架构的kubernetes集群不支持LoadBalance"></a>私有云裸金属架构的kubernetes集群不支持LoadBalance</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;metallb&#x2F;v0.8.2&#x2F;manifests&#x2F;metallb.yaml</span><br><span class="line">cat &lt;&lt;EOF | tee metallb-conf.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    address-pools:</span><br><span class="line">    - name: default</span><br><span class="line">      protocol: layer2</span><br><span class="line">      addresses:</span><br><span class="line">      - 10.10.6.240-10.10.6.250</span><br><span class="line">      - 10.10.7.240-10.10.7.250</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl apply -f  metallb.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n metallb-system  -o wide</span><br><span class="line"></span><br><span class="line">kubectl apply -f metallb-conf.yaml</span><br></pre></td></tr></table></figure>
<h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;kubectl&#x2F;cheatsheet&#x2F;?source&#x3D;post_page---------------------------</span><br></pre></td></tr></table></figure>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4></li>
<li><p>k8s-loadbalancer一直处于pending</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: MetalLB自建私有Kubernetes的LoadBalancer负载均衡类型服务</span><br><span class="line">1.1 kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;metallb&#x2F;v0.7.1&#x2F;manifests&#x2F;metallb.yaml</span><br><span class="line">1.2 创建metallb_configmap.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    address-pools:</span><br><span class="line">    - name: my-ip-space</span><br><span class="line">      protocol: layer2</span><br><span class="line">      addresses:</span><br><span class="line">      - 10.211.55.240&#x2F;28</span><br><span class="line">1.3 kubectl apply -f metallb_configmap.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>Not enough data to create auth info structure.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;&#123;print $1&#125;&#39;)</span><br><span class="line">将整个token添加到~&#x2F;.kube&#x2F;config的最后</span><br></pre></td></tr></table></figure></li>
<li><p>忘记join命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure></li>
<li><p>kubernetes（k8s）DNS 服务反复重启解决：<br>k8s.io/dns/pkg/dns/dns.go:150: Failed to list *v1.Service: Get <a href="https://10.96.0.1:443/api/v1/services?resourceVersion=0" target="_blank" rel="noopener">https://10.96.0.1:443/api/v1/services?resourceVersion=0</a>: dial tcp 10.96.0.1:443: getsockopt: no route to host<br>在使用 Minikube 部署 kubernetes 服务时，出现 Kube DNS 服务反复重启现象（错误如上），<br>这很可能是 iptables 规则乱了，我通过执行以下命令解决了，在此记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用root</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">iptables --flush</span><br><span class="line">iptables -tnat --flush</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl start docker</span><br><span class="line">或者把iptables 开启</span><br></pre></td></tr></table></figure></li>
<li><p>1 node(s) had taints that the pod didn’t tolerate</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用kubeadm初始化的集群，出于安全考虑Pod不会被调度到Master Node上，也就是说Master Node不参与工作负载。</span><br><span class="line">#开启</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io&#x2F;master-</span><br><span class="line">#禁用</span><br><span class="line">kubectl taint nodes k8s node-role.kubernetes.io&#x2F;master&#x3D;true:NoSchedule</span><br></pre></td></tr></table></figure>
</li>
<li><p>unable to do port forwarding: socat not found.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install socat</span><br><span class="line">sudo pacman -S socat</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/installation.md" target="_blank" rel="noopener">github kubernetes-dashboard</a><br><a href="https://feisky.gitbooks.io/kubernetes/components/kubectl.html" target="_blank" rel="noopener">Kubernetes指南</a><br><a href="https://blog.51cto.com/goome/2358569" target="_blank" rel="noopener">k8s实践2:user和rbac绑定</a></p>
]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>linux日志压缩</title>
    <url>/2019/09/18/linux%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p><img src="1.gif" alt="1.gif"></p>
<a id="more"></a>
<h3 id="log-sh"><a href="#log-sh" class="headerlink" title="log.sh"></a>log.sh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">config_file&#x3D;&quot;&#x2F;root&#x2F;log.config&quot;</span><br><span class="line">log_file&#x3D;&quot;.&#x2F;log.log&quot;</span><br><span class="line">debug_mode&#x3D;&quot;no&quot;</span><br><span class="line"></span><br><span class="line">for i in $*; do</span><br><span class="line">  if [[ &quot;$i&quot; &#x3D;~ &quot;config_file&#x3D;&quot; ]]; then</span><br><span class="line">    config_file&#x3D;&#96;echo $i | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">  elif [[ &quot;$i&quot; &#x3D;~ &quot;log_file&#x3D;&quot; ]]; then</span><br><span class="line">    log_file&#x3D;&#96;echo $i | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">  elif [[ &quot;$i&quot; &#x3D;~ &quot;debug_mode&#x3D;&quot; ]]; then</span><br><span class="line">    debug_mode&#x3D;&#96;echo $i | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ ! -f &quot;$config_file&quot; ]; then</span><br><span class="line">  echo &quot;config file ( $config_file ) not found !&quot;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -f &quot;$log_file&quot; ]; then</span><br><span class="line">#  echo &quot;log file ( $log_file ) not found !&quot;</span><br><span class="line">#  exit</span><br><span class="line">  touch $log_file</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$debug_mode&quot; &#x3D;&#x3D; &quot;no&quot; -a &quot;date &#39;+%H&#39;&quot; !&#x3D; &quot;00&quot; ]; then</span><br><span class="line">  echo Please run the script at 0 a.m.</span><br><span class="line">  exit</span><br><span class="line">elif [ &quot;$debug_mode&quot; !&#x3D; &quot;no&quot; ]; then</span><br><span class="line">  debug_mode&#x3D;&quot;yes&quot;</span><br><span class="line">  echo debug_mode is enabled ! Do NOT use in production environment !</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - debug_mode is enabled ! Do NOT use in production environment ! &gt;&gt;$log_file</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#1. get mount</span><br><span class="line">config_file_flag&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep -c &quot;mount&#x3D;&quot;&#96;</span><br><span class="line">if [ $config_file_flag &#x3D;&#x3D; 1 ]; then</span><br><span class="line">  mount&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;mount&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">elif [ $config_file_flag &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount parameter is not found !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">else</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount parameter is too many !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &#96;df -h |grep &quot;$mount&quot; | awk -F&#39; &#39; &#39;&#123;print $5&#125;&#39; | awk -F&#39;%&#39; &#39;&#123;print $1&#125;&#39; | grep -c &#39;^[[:digit:]]*$&#39;&#96; &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount parameter is error !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#2. get mount_used_size_percent</span><br><span class="line">config_file_flag&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep -c &quot;mount_used_size_percent&#x3D;&quot;&#96;</span><br><span class="line">if [ $config_file_flag &#x3D;&#x3D; 1 ]; then</span><br><span class="line">  mount_used_size_percent&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;mount_used_size_percent&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">elif [ $config_file_flag &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount_used_size_percent parameter is not found !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">else</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount_used_size_percent parameter is too many !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &#96;echo $mount_used_size_percent | grep -c &#39;^[[:digit:]]*$&#39;&#96; &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount_used_size_percent parameter is not number !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $mount_used_size_percent -lt 50 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount_used_size_percent parameter requires more than or equal to 50 !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">elif [ $mount_used_size_percent -gt 85 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;mount_used_size_percent parameter requires less than or equal to 85 !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#3. get delete_log_format_regex</span><br><span class="line">config_file_flag&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep -c &quot;delete_log_format_regex&#x3D;&quot;&#96;</span><br><span class="line">if [ $config_file_flag &#x3D;&#x3D; 1 ]; then</span><br><span class="line">  delete_log_format_regex&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;delete_log_format_regex&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">elif [ $config_file_flag &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;delete_log_format_regex parameter is not found !&quot; &gt;&gt;$log_file</span><br><span class="line">  #exit</span><br><span class="line">else</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;delete_log_format_regex parameter is too many !&quot; &gt;&gt;$log_file</span><br><span class="line">  #exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#4. get log_dir_list</span><br><span class="line">config_file_flag&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep -c &quot;delete_log_dir&#x3D;&quot;&#96;</span><br><span class="line">if [ $config_file_flag -ge 1 ]; then</span><br><span class="line">  log_dir_list&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;delete_log_dir&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">elif [ $config_file_flag &#x3D;&#x3D; 0 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;delete_log_dir parameter is not found !&quot; &gt;&gt;$log_file</span><br><span class="line">  #exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for delete_log_dir in $log_dir_list; do</span><br><span class="line">  if [ ! -d &quot;$delete_log_dir&quot; ]; then</span><br><span class="line">    echo $(date &quot;+%F %H:%M&quot;) - &quot;delete_log_dir $delete_log_dir does not exist !&quot; &gt;&gt;$log_file</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#5. delete log file</span><br><span class="line">while [ &#96;df -h | grep &quot;$mount&quot; | awk -F&#39; &#39; &#39;&#123;print $5&#125;&#39; | awk -F&#39;%&#39; &#39;&#123;print $1&#125;&#39;&#96; -gt $mount_used_size_percent ]; do</span><br><span class="line">  while_flag&#x3D;&quot;&quot;</span><br><span class="line">  for delete_log_dir in $log_dir_list; do</span><br><span class="line">    if [ &#96;find $delete_log_dir -type f | grep -cE $delete_log_format_regex&#96; -gt 0 ]; then</span><br><span class="line">      find $delete_log_dir -type f | grep -E $delete_log_format_regex | xargs ls -ta | tail -1 | xargs rm -f</span><br><span class="line">      while_flag&#x3D;$while_flag&quot;1&quot;</span><br><span class="line">    else</span><br><span class="line">      while_flag&#x3D;$while_flag&quot;0&quot;</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">  if [ &#96;echo $while_flag | grep -c 1&#96; &#x3D;&#x3D; 0 ]; then</span><br><span class="line">    echo $(date &quot;+%F %H:%M&quot;) - &quot;Delete all the log files is completed , but did not reach the $mount_used_size_percent % used precent !&quot; &gt;&gt;$log_file</span><br><span class="line">    break</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#6. get cut_log_list</span><br><span class="line">cut_log_list&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;cut_log&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line"></span><br><span class="line">for cut_log in $cut_log_list; do</span><br><span class="line">  if [ ! -f &quot;$cut_log&quot; ]; then</span><br><span class="line">    echo $(date &quot;+%F %H:%M&quot;) - &quot;cut_log $cut_log does not exist !&quot; &gt;&gt;$log_file</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#7. cut log</span><br><span class="line">yesterday&#x3D;$(date -d &quot;$(date) -1 day&quot; +%Y%m%d)</span><br><span class="line">for cut_log in $cut_log_list; do</span><br><span class="line">  cp $cut_log $cut_log.$yesterday &amp;&amp; echo &gt;$cut_log</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#8. get gz_log_dir_regex_list</span><br><span class="line">config_file_flag&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep -c &quot;gz_delay_day&#x3D;&quot;&#96;</span><br><span class="line">if [ $config_file_flag &#x3D;&#x3D; 0 -o $config_file_flag &#x3D;&#x3D; 1 ]; then</span><br><span class="line">  if [ $config_file_flag &#x3D;&#x3D; 1 ]; then</span><br><span class="line">    gz_delay_day&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;gz_delay_day&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">  elif [ $config_file_flag &#x3D;&#x3D; 0 ]; then</span><br><span class="line">    gz_delay_day&#x3D;1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ $(echo $gz_delay_day | grep -c &#39;^[[:digit:]]*$&#39;) &#x3D;&#x3D; 0 ]; then</span><br><span class="line">    echo $(date &quot;+%F %H:%M&quot;) - &quot;gz_delay_day parameter is not number !&quot; &gt;&gt;$log_file</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ $gz_delay_day -lt 1 ]; then</span><br><span class="line">    echo $(date &quot;+%F %H:%M&quot;) - &quot;gz_delay_day parameter requires more than or equal to 1 !&quot; &gt;&gt;$log_file</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  gz_log_dir_regex_list&#x3D;&#96;cat $config_file | grep -v &quot;#&quot; | sed &quot;s# ##g&quot; | grep -vE &quot;&#x3D;$&quot; | grep &quot;gz_log_dir_regex&#x3D;&quot; | awk -F&#39;&#x3D;&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">  date_year&#x3D;$(date -d &quot;$(date) - $&#123;gz_delay_day&#125; day&quot; +%Y)</span><br><span class="line">  date_month&#x3D;$(date -d &quot;$(date) - $&#123;gz_delay_day&#125; day&quot; +%m)</span><br><span class="line">  date_day&#x3D;$(date -d &quot;$(date) - $&#123;gz_delay_day&#125; day&quot; +%d)</span><br><span class="line"></span><br><span class="line">  log_date_list&#x3D;$(find . -name &quot;*.log&quot; | grep -Eo &quot;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&quot; | sort | uniq)</span><br><span class="line"></span><br><span class="line">  for gz_log_dir_regex in $gz_log_dir_regex_list; do</span><br><span class="line">    gz_log_dir&#x3D;&#96;echo $gz_log_dir_regex|cut -d &#39;:&#39; -f 1&#96;</span><br><span class="line">    gz_log_regex&#x3D;&#96;echo $gz_log_dir_regex|cut -d &#39;:&#39; -f 2&#96;</span><br><span class="line">    gz_log_dir_regex&#x3D;$(echo $gz_log_dir_regex | sed &quot;s#%YYYY#$date_year#g&quot; | sed &quot;s#%MMMM#$date_month#g&quot; | sed &quot;s#%DDDD#$date_day#g&quot;)</span><br><span class="line">    if [ $(ls &quot;$gz_log&quot;* | grep -v &quot;$&#123;gz_log_dir_regex&#125;.tar.gz&quot; 2&gt;&#x2F;dev&#x2F;null | wc -l) &#x3D;&#x3D; 0 ]; then</span><br><span class="line">      echo $(date &quot;+%F %H:%M&quot;) - &quot;gz_log_dir_regex $gz_log_dir_regex does not exist !&quot; &gt;&gt;$log_file</span><br><span class="line">      exit</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">elif [ $config_file_flag -gt 1 ]; then</span><br><span class="line">  echo $(date &quot;+%F %H:%M&quot;) - &quot;gz_delay_day parameter is too many !&quot; &gt;&gt;$log_file</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#9. gz log</span><br><span class="line">echo $(date &quot;+%F %H:%M&quot;) - &quot;&#x3D;&#x3D;&#x3D; gz log &#x3D;&#x3D;&#x3D;&quot; &gt;&gt;$log_file</span><br><span class="line">echo &quot;开始压缩$date_year-$date_month-$date_day前的文件&quot; &gt;&gt;$log_file</span><br><span class="line">for gz_log_dir_regex in $gz_log_dir_regex_list; do</span><br><span class="line">  gz_log_dir&#x3D;&#96;echo $gz_log_dir_regex|cut -d &#39;:&#39; -f 1&#96;</span><br><span class="line">  gz_log_regex&#x3D;&#96;echo $gz_log_dir_regex|cut -d &#39;:&#39; -f 2&#96;</span><br><span class="line">  gz_log_prefix&#x3D;&#96;echo $gz_log_dir_regex|cut -d &#39;:&#39; -f 3&#96;</span><br><span class="line">  log_date_list&#x3D;$(find $gz_log_dir -name &quot;*&quot;| grep -Eo $gz_log_regex | sort | uniq)</span><br><span class="line">  echo &quot;压缩的匹配字符串：&quot;$log_date_list</span><br><span class="line">  cd $gz_log_dir</span><br><span class="line">  for log_date in $log_date_list; do</span><br><span class="line">    if [ &quot;$log_date&quot; \&gt; &quot;$date_year-$date_month-$date_day&quot; ]; then</span><br><span class="line">      echo &quot;跳过日期$log_date的日志文件&quot; &gt;&gt;$log_file</span><br><span class="line">      continue</span><br><span class="line">    fi</span><br><span class="line">    SRCFILE&#x3D;&quot;*$log_date*&quot;</span><br><span class="line">    DESFILE&#x3D;&quot;$gz_log_prefix-$log_date.tar.gz&quot;</span><br><span class="line">    count&#x3D;$(ls -l $SRCFILE | wc -l)</span><br><span class="line">    if [ $count &#x3D;&#x3D; 0 ]; then</span><br><span class="line">      echo &#39;$gz_log_dir中$gz_log_regex文件不存在，跳过&#39; &gt;&gt;$log_file</span><br><span class="line">    else</span><br><span class="line">      echo &quot;正在执行压缩$SRCFILE至$DESFILE&quot; &gt;&gt;$log_file</span><br><span class="line">      if [ -d $DESFILE ]; then</span><br><span class="line">        tar -zcvf $DESFILE --exclude&#x3D;.*\.tar\.gz $SRCFILE &gt;&gt;$log_file</span><br><span class="line">      else</span><br><span class="line">        tar -uvf $DESFILE --exclude&#x3D;.*\.tar\.gz $SRCFILE &gt;&gt;$log_file</span><br><span class="line">      fi</span><br><span class="line">      ls $SRCFILE | grep -v &quot;.tar.gz&quot; | xargs rm -f</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">done</span><br><span class="line">echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &gt;&gt;$log_file</span><br></pre></td></tr></table></figure>
<h3 id="log-config"><a href="#log-config" class="headerlink" title="log.config"></a>log.config</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置日志文件所在的挂载点，如：mount&#x3D;&#x2F;www ，具体挂载点请用 df -h 命令查看。</span><br><span class="line">#mount 取值范围：该值必须配置且仅允许配置一次。</span><br><span class="line">mount&#x3D;&#x2F;dev&#x2F;vda1</span><br><span class="line"></span><br><span class="line">#设置该挂载点最多可以使用多少空间，单位是百分比。</span><br><span class="line">#取值范围：该值必须配置且仅允许配置一次，取值范围在 50 ≤ x ≤ 85 之间。</span><br><span class="line">mount_used_size_percent&#x3D;60</span><br><span class="line"></span><br><span class="line">#设置日志文件所在的文件夹，如：delete_log_dir&#x3D;&#x2F;www&#x2F;accesslog ，用于自动清理日志文件（从文件修改时间是最旧的日志文件开始删除，包括子文件夹下的日志文件），直到上述挂载点的可使用空间最多不超过 mount_used_size_percent 这个百分比为止（除非日志文件已经全部删除完毕）。</span><br><span class="line">#取值范围：该值必须配置且允许配置多次，如果文件夹不存在会将错误信息写入到日志文件 log.log 并终止运行。</span><br><span class="line">delete_log_dir&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#是一串正则表达式，用于自定义待删除的日志文件格式，防止误删除。</span><br><span class="line">#取值范围：该值必须配置且仅允许配置一次。</span><br><span class="line">#请不要把 .log 这个关键字写入进去，因为很多正在写入的日志文件都是以 xxx.log 命名的，这些文件是不能匹配到并删除的。</span><br><span class="line">#delete_log_format_regex&#x3D;(.tar|.gz|.tar.gz|.bz2|.tar.bz2|.bz|.tar.bz|.Z|.tar.Z|.tgz|.tar.tgz|.zip|.lha|.rar)$</span><br><span class="line">delete_log_format_regex&#x3D;(.tar|.gz|.tar.gz|.bz2|.tar.bz2|.bz|.tar.bz|.Z|.tar.Z|.tgz|.tar.tgz|.zip|.lha|.rar)$</span><br><span class="line"></span><br><span class="line">#设置需要进行按天分割的日志文件的文件路径。</span><br><span class="line">#取值范围：该值可不配置且允许配置多次，日志文件路径必须是绝对路径，如果文件不存在会将错误信息写入到日志文件 log.log 并终止运行。</span><br><span class="line">cut_log&#x3D;</span><br><span class="line"></span><br><span class="line">#设置需要进行压缩的日志文件的文件路径和正则匹配。</span><br><span class="line">#取值范围：该值可不配置且允许配置多次，日志文件路径必须是绝对路径，如果文件不存在会将错误信息写入到日志文件 log.log 并终止运行。</span><br><span class="line">gz_log_dir_regex&#x3D;&#x2F;home&#x2F;hyc&#x2F;logs:[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;:mspp</span><br><span class="line"></span><br><span class="line">#设置延迟压缩的天数</span><br><span class="line">#取值范围：该值可不配置且仅允许配置一次，取值范围是 x ≥ 1 ，默认值是 1 。</span><br><span class="line">gz_delay_day&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="简单明了"><a href="#简单明了" class="headerlink" title="简单明了"></a>简单明了</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#需要备份文件的目录</span><br><span class="line">FILEPATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;app&#x2F;mspp-jar&#x2F;logs&quot;</span><br><span class="line"></span><br><span class="line">#取前一天年月日</span><br><span class="line">y&#x3D;&#96;date --date&#x3D;&#39;1 days ago&#39; &quot;+%Y&quot;&#96;</span><br><span class="line">m&#x3D;&#96;date --date&#x3D;&#39;1 days ago&#39; &quot;+%m&quot;&#96;</span><br><span class="line">d&#x3D;&#96;date --date&#x3D;&#39;1 days ago&#39; &quot;+%d&quot;&#96;</span><br><span class="line"></span><br><span class="line">echo &quot;开始压缩$y-$m-$d前的文件&quot;</span><br><span class="line">#压缩处理</span><br><span class="line">cd $FILEPATH</span><br><span class="line">log_date_list&#x3D;$(find . -name &quot;*.log&quot; | grep -Eo &quot;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&quot; | sort | uniq)</span><br><span class="line">echo &quot;压缩文件的日期：&quot;$log_date_list</span><br><span class="line">for log_date in $log_date_list; do</span><br><span class="line">  if [ &quot;$log_date&quot; \&gt; &quot;$y-$m-$d&quot; ]; then</span><br><span class="line">    echo &quot;跳过日期$log_date的日志文件&quot;</span><br><span class="line">    continue</span><br><span class="line">  fi</span><br><span class="line">  SRCFILE&#x3D;&quot;*.log.$log_date.*.log&quot;</span><br><span class="line">  DESFILE&#x3D;&quot;mspp-$log_date.tar.gz&quot;</span><br><span class="line">  count&#x3D;$(ls -l $SRCFILE | wc -l)</span><br><span class="line">  if [ $count &#x3D;&#x3D; 0 ]; then</span><br><span class="line">    echo &#39;文件不存在&#39;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;正在执行压缩$SRCFILE-----------&quot;</span><br><span class="line">    if [ -d $DESFILE ]; then</span><br><span class="line">      tar -zcf $DESFILE $SRCFILE &amp;&amp; rm -f $SRCFILE</span><br><span class="line">    else</span><br><span class="line">      tar -uf $DESFILE $SRCFILE &amp;&amp; rm -f $SRCFILE</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="执行定期"><a href="#执行定期" class="headerlink" title="执行定期"></a>执行定期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每天晚上23点压缩前天的日志</span><br><span class="line">crontab -e</span><br><span class="line">添加</span><br><span class="line">00 23 * * *  &#x2F;usr&#x2F;local&#x2F;app&#x2F;mspp-jar&#x2F;log.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven动态修改jdk版本</title>
    <url>/2019/08/17/maven%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9jdk%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="动态修改jdk版本"><a href="#动态修改jdk版本" class="headerlink" title="动态修改jdk版本"></a>动态修改jdk版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br></pre></td></tr></table></figure>
<h3 id="安装jar"><a href="#安装jar" class="headerlink" title="安装jar"></a>安装jar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1). 安装到本地库： </span><br><span class="line">mvn install:install-file -DgroupId&#x3D;com.cunnar -DartifactId&#x3D;cunnar -Dversion&#x3D;1.0 -Dpackaging&#x3D;jar -Dfile&#x3D;E:\workspace\文档\存证云\opencloud\opencloud.jar --setting &#x2F;opt&#x2F;xxx&#x2F;xx&#x2F;setting.xml</span><br><span class="line">----注意：maven 配置 localreposties</span><br><span class="line"></span><br><span class="line">2). 安装到私服 </span><br><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.cunnar -DartifactId&#x3D;cunnar -Dversion&#x3D;1.0 -Dpackaging&#x3D;jar -Dfile&#x3D;E:\workspace\文档\存证云\opencloud\opencloud.jar -Durl&#x3D;http:&#x2F;&#x2F;192.168.1.8:8080&#x2F;repository&#x2F;3rd_part&#x2F; -Drepositor</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -T 1C -Dmaven.test.skip&#x3D;true -Dmaven.compile.fork&#x3D;true -T 1C 代表每个CPU核心跑一个工程。 -Dmaven.test.skip&#x3D;true 代表跳过测试 -Dmaven.compile.fork&#x3D;true 使用多线程编译</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>maven特殊命令</title>
    <url>/2019/07/25/maven%E7%89%B9%E6%AE%8A%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-pl 构建制定模块</span><br><span class="line">-am 选项可以同时构建所列模块的依赖模块。</span><br><span class="line">-amd 选项可以同时构建依赖于所列模块的模块。</span><br><span class="line">-rf 选项可以在完整的反应堆构建顺序基础上，指定从哪个模块开始构建。</span><br><span class="line">在-pl -am或者-pl -amd的基础上，还能应用-rf参数，以对裁剪后的反应堆再次裁剪。</span><br></pre></td></tr></table></figure>
<ul>
<li>maven 搜索链路<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_repo &gt; settings_profile_repo &gt; pom_profile_repo &gt; pom_repositories &gt; settings_mirror &gt; central</span><br></pre></td></tr></table></figure></li>
<li>maven配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">settings.xml 中可以使用变量，可以尝试使用变量解决：</span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">	&lt;mirrorOf&gt;$&#123;aliyun&#125;&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;netease&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;mirrors.163.com&#x2F;maven&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;mirrorOf&gt;$&#123;netease&#125;&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;&#x2F;mirror&gt;</span><br><span class="line">   &lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;default&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;192.168.0.100&#x2F;nexus&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br><span class="line"></span><br><span class="line">默认情况下配置多个mirror的情况下，只有第一个生效</span><br><span class="line">执行： mvn help:effective-settings 可以看到使用的是私服</span><br><span class="line"></span><br><span class="line">如果希望使用阿里云镜像，如下执行：</span><br><span class="line">mvn help-effective-settings -Daliyun&#x3D;central</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos刷新配置源码解析</title>
    <url>/2019/07/05/nacos%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>nacos</category>
        <category>springcloud-alibaba</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>springcloud-alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx服务心跳</title>
    <url>/2019/09/09/nginx%E6%9C%8D%E5%8A%A1%E5%BF%83%E8%B7%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>nginx安装</title>
    <url>/2019/08/13/nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li>安装工具包(默认已存在这些功能)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line">yum install -y vim-enhanced</span><br><span class="line">yum install -y make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure></li>
<li>安装依赖包(pcre可能直接无法安装，从官网上下载编译安装即可；)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li>
<li>下载nginx安装包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;tengine.taobao.org&#x2F;download&#x2F;tengine-2.3.2.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>安装jemalloc<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-devel openssl-devel zlib-devel pcre-devel</span><br><span class="line">tar -jxvf jemalloc-5.2.1.tar.bz2</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;jemalloc</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li>解压到指定目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.6.2.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>进行configure配置，进入nginx-1.6.2目录然后在执行./configure命令，成功后编译安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-jemalloc&#x3D;&#x2F;usr&#x2F;local&#x2F;app&#x2F;jemalloc-5.2.1 --with-stream --add-module&#x3D;.&#x2F;modules&#x2F;ngx_http_upstream_check_module&#x2F;make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream mspp &#123;</span><br><span class="line">       #server 192.168.10.253:8080;</span><br><span class="line">       #server 192.168.10.252:8080;</span><br><span class="line">       server 192.168.20.155:8080;</span><br><span class="line">       server 192.168.20.155:8081;</span><br><span class="line">       ##心跳检查</span><br><span class="line">       check interval&#x3D;3000 rise&#x3D;2 fall&#x3D;5 timeout&#x3D;1000 type&#x3D;http;</span><br><span class="line">       check_http_send &quot;HEAD &#x2F; HTTP&#x2F;1.0\r\n\r\n&quot;;</span><br><span class="line">       check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">   &#125;</span><br><span class="line">server &#123;</span><br><span class="line">       listen       8086;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">       #access_log  &quot;pipe:rollback logs&#x2F;host.access_log interval&#x3D;1d baknum&#x3D;7 maxsize&#x3D;2G&quot;  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">           proxy_pass http:&#x2F;&#x2F;mspp;</span><br><span class="line">       &#125;</span><br><span class="line">         location &#x2F;status &#123;</span><br><span class="line">           check_status;</span><br><span class="line">           access_log   off;</span><br><span class="line">       #    allow SOME.IP.ADD.RESS;</span><br><span class="line">        #   deny all;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">       #错误重定向</span><br><span class="line">       error_page   500 503 504  &#x2F;50x.html;</span><br><span class="line">       location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br><span class="line">       error_page 502 &#x2F;502;</span><br><span class="line">       location &#x3D; &#x2F;502 &#123;</span><br><span class="line">           default_type application&#x2F;json;</span><br><span class="line">               add_header Content-Type &#39;text&#x2F;html; charset&#x3D;utf-8&#39;;</span><br><span class="line">               return 200 &#39;&#123;&quot;code&quot;:&quot;6666,&quot;msg&quot;:&quot;服务正在维护中，请稍后再试！&quot;&#125;&#39;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，检查是否已正常启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c conf&#x2F;nginx.conf</span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></li>
<li>关闭、重启服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure></li>
<li>热部署</li>
<li>配置</li>
</ol>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://blog.csdn.net/zzhongcy/article/details/88735174" target="_blank" rel="noopener">nginx防止ddos攻击</a></p>
]]></content>
  </entry>
  <entry>
    <title>nginx添加模块</title>
    <url>/2019/09/09/nginx%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="下载模块"><a href="#下载模块" class="headerlink" title="下载模块"></a>下载模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;tengine.taobao.org&#x2F;download&#x2F;tengine-2.3.2.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nio</title>
    <url>/2019/10/29/nio/</url>
    <content><![CDATA[<h4 id="nio客户端和服务端"><a href="#nio客户端和服务端" class="headerlink" title="nio客户端和服务端"></a>nio客户端和服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NIO服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器端已经被启动。。。。。。"</span>);</span><br><span class="line">        <span class="comment">//1、创建服务通道</span></span><br><span class="line">        ServerSocketChannel socketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2、切换异步非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//jdk1.7以上</span></span><br><span class="line">        <span class="comment">//3、绑定连接</span></span><br><span class="line">        socketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">//4、获取选择器</span></span><br><span class="line">        Selector selector=Selector.open();</span><br><span class="line">        <span class="comment">//5、将通道注册到选择器中 并且指定其监听接受事件</span></span><br><span class="line">        socketChannel.register(selector,SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">//6、轮询获取“已经准备就绪的事件”</span></span><br><span class="line">        <span class="keyword">while</span>(selector.select()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//7、获取当前选择器中所有已经注册的选择键</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span>(selectionKeys.hasNext())&#123;</span><br><span class="line">                <span class="comment">//8、获取准备就绪事件</span></span><br><span class="line">                SelectionKey selectionKey = selectionKeys.next();</span><br><span class="line">                <span class="comment">//9、判断准备就绪的事件类型</span></span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//10、如果是 接受就绪，则获取客户端连接</span></span><br><span class="line">                    SocketChannel socketChannel1=socketChannel.accept();</span><br><span class="line">                    <span class="comment">//11、设置阻塞模式</span></span><br><span class="line">                    socketChannel1.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//12、注册通道</span></span><br><span class="line">                    socketChannel1.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">//13、获取当前选择器“就绪”状态的通道</span></span><br><span class="line">                    SocketChannel channel = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">//14、读取数据</span></span><br><span class="line">                    ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>((len=channel.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                selectionKeys.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户端已经启动。。。"</span>);</span><br><span class="line">        <span class="comment">//1、创建socket 通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8080</span>));</span><br><span class="line">        <span class="comment">//2、设置异步非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//jdk1.7以上方可</span></span><br><span class="line">        <span class="comment">//指定缓冲区大小</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.put(<span class="keyword">new</span> Date().toString().getBytes());</span><br><span class="line">        <span class="comment">//切换到读取模式</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h4><p><a href="https://blog.csdn.net/qq_37049496/article/details/81267367" target="_blank" rel="noopener">https://blog.csdn.net/qq_37049496/article/details/81267367</a></p>
]]></content>
  </entry>
  <entry>
    <title>node</title>
    <url>/2019/10/11/node/</url>
    <content><![CDATA[<h4 id="npm设置prefix和cache"><a href="#npm设置prefix和cache" class="headerlink" title="npm设置prefix和cache"></a>npm设置prefix和cache</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置全局包目录</span><br><span class="line">npm config set prefix &quot;&#x2F;home&#x2F;hyc&#x2F;node&#x2F;prefix&quot; </span><br><span class="line">&#x2F;&#x2F;设置缓存目录</span><br><span class="line">npm config set cache &quot;&#x2F;home&#x2F;hyc&#x2F;node&#x2F;cache&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>pactbroker安装</title>
    <url>/2019/10/30/pactbroker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>minikube</title>
    <url>/2019/08/17/minikube/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-apiserver:v1.12.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.12.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-scheduler:v1.12.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-proxy:v1.12.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;etcd:3.2.24</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;coredns:1.2.2</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;coredns:1.2.2</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-apiserver:v1.12.4 k8s.gcr.io&#x2F;kube-apiserver:v1.12.4 </span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.12.4 k8s.gcr.io&#x2F;kube-controller-manager:v1.12.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-scheduler:v1.12.4 k8s.gcr.io&#x2F;kube-scheduler:v1.12.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-proxy:v1.12.4 k8s.gcr.io&#x2F;kube-proxy:v1.12.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;etcd:3.2.24 k8s.gcr.io&#x2F;etcd:3.2.24 </span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;coredns:1.2.2 k8s.gcr.io&#x2F;coredns:1.2.2</span><br><span class="line"></span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-apiserver:v1.12.4</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.12.4</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-scheduler:v1.12.4</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-proxy:v1.12.4</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.1</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;etcd:3.2.24</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;coredns:1.2.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-controller:v0.2.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-creds-init:v0.2.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-git-init:v0.2.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-nop:v0.2.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-webhook:v0.2.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-activator:v0.2.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-queue:v0.2.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-autoscaler:v0.2.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-controller:v0.2.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-webhook:v0.2.2</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;gcs-fetcher</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;fluentd-elasticsearch:v2.0.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;addon-resizer:1.7</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-controller:v0.2.0 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;build&#x2F;cmd&#x2F;controller:v0.2.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-creds-init:v0.2.0 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;build&#x2F;cmd&#x2F;creds-init:v0.2.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-git-init:v0.2.0 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;build&#x2F;cmd&#x2F;git-init:v0.2.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-nop:v0.2.0 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;build&#x2F;cmd&#x2F;nop:v0.2.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-webhook:v0.2.0 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;build&#x2F;cmd&#x2F;webhook:v0.2.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-activator:v0.2.2 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;cmd&#x2F;activator:v0.2.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-queue:v0.2.2 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;cmd&#x2F;queue:v0.2.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-autoscaler:v0.2.2 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;cmd&#x2F;autoscaler:v0.2.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-controller:v0.2.2 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;cmd&#x2F;controller:v0.2.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-webhook:v0.2.2 gcr.io&#x2F;knative-releases&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;cmd&#x2F;webhook:v0.2.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;gcs-fetcher gcr.io&#x2F;cloud-builders&#x2F;gcs-fetcher</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;fluentd-elasticsearch:v2.0.4 gcr.io&#x2F;fluentd-elasticsearch:v2.0.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;addon-resizer:1.7 k8s.gcr.io&#x2F;addon-resizer:1.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-controller:v0.2.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-creds-init:v0.2.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-git-init:v0.2.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-nop:v0.2.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;build-webhook:v0.2.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-activator:v0.2.2</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-queue:v0.2.2</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-autoscaler:v0.2.2</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-controller:v0.2.2</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;knative-mirrors&#x2F;serving-webhook:v0.2.2</span><br><span class="line"></span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;gcs-fetcher</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;fluentd-elasticsearch:v2.0.4</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;kubernetes-mirrors&#x2F;addon-resizer:1.7</span><br><span class="line"></span><br><span class="line">#安装minikube</span><br><span class="line">## curl -Lo minikube http:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;minikube&#x2F;releases&#x2F;v1.3.1&#x2F;minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">rm -rf ~&#x2F;.minikube</span><br><span class="line"></span><br><span class="line">curl -Lo minikube https:&#x2F;&#x2F;storage.googleapis.com&#x2F;minikube&#x2F;releases&#x2F;latest&#x2F;minikube-linux-amd64 \</span><br><span class="line">  &amp;&amp; chmod +x minikube</span><br><span class="line"></span><br><span class="line">sudo cp minikube &#x2F;usr&#x2F;local&#x2F;bin &amp;&amp; rm minikube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">minikube start --memory&#x3D;10240 --cpus&#x3D;4 \</span><br><span class="line">  --kubernetes-version&#x3D;v1.11.3 \</span><br><span class="line">  --registry-mirror&#x3D;https:&#x2F;&#x2F;registry.docker-cn.com\</span><br><span class="line">  --kubernetes-version v1.12.1\</span><br><span class="line">  --disk-size&#x3D;30g \</span><br><span class="line">  --extra-config&#x3D;apiserver.enable-admission-plugins&#x3D;&quot;LimitRanger,NamespaceExists,NamespaceLifecycle,ResourceQuota,ServiceAccount,DefaultStorageClass,MutatingAdmissionWebhook&quot;</span><br><span class="line"></span><br><span class="line">eval $(minikube docker-env)</span><br><span class="line"></span><br><span class="line">##自动完成</span><br><span class="line">sudo pacman -S bash-completion</span><br><span class="line"></span><br><span class="line">#### NodePort</span><br><span class="line">export INGRESS_HOST&#x3D;$(minikube ip)</span><br><span class="line">export INGRESS_PORT&#x3D;$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath&#x3D;&#39;&#123;.spec.ports[?(@.name&#x3D;&#x3D;&quot;http2&quot;)].nodePort&#125;&#39;)</span><br><span class="line">export SECURE_INGRESS_PORT&#x3D;$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath&#x3D;&#39;&#123;.spec.ports[?(@.name&#x3D;&#x3D;&quot;https&quot;)].nodePort&#125;&#39;)</span><br><span class="line">export GATEWAY_URL&#x3D;$INGRESS_HOST:$INGRESS_PORT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl delete -f samples&#x2F;bookinfo&#x2F;networking&#x2F;bookinfo-gateway.yaml</span><br><span class="line">kubectl delete -f samples&#x2F;bookinfo&#x2F;platform&#x2F;kube&#x2F;bookinfo.yaml</span><br><span class="line">kubectl delete -f $HOME&#x2F;istio.yaml</span><br><span class="line"></span><br><span class="line">kubectl delete namespace istio-system</span><br><span class="line"></span><br><span class="line">helm template install&#x2F;kubernetes&#x2F;helm&#x2F;istio --name istio   --namespace istio-system   --set gateways.istio-ingressgateway.type&#x3D;NodePort --set gateways.istio-egressgateway.type&#x3D;NodePort --set tracing.enabled&#x3D;true  --set tracing.ingress.enabled&#x3D;true --set servicegraph.enabled&#x3D;true   --set prometheus.enabled&#x3D;true   --set tracing.jaeger.enabled&#x3D;true  --set grafana.enabled&#x3D;true   --set global.configValidation&#x3D;false   --set global.nodePort&#x3D;true &gt; $HOME&#x2F;istio.yaml</span><br><span class="line"></span><br><span class="line">kubectl label namespace default istio-injection&#x3D;enabled</span><br><span class="line"></span><br><span class="line">kubectl create namespace istio-system</span><br><span class="line">kubectl apply -f $HOME&#x2F;istio.yaml</span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line">kubectl apply -f samples&#x2F;bookinfo&#x2F;platform&#x2F;kube&#x2F;bookinfo.yaml</span><br><span class="line">kubectl apply -f samples&#x2F;bookinfo&#x2F;networking&#x2F;bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line">##打开prometheus</span><br><span class="line">kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app&#x3D;prometheus -o jsonpath&#x3D;&#39;&#123;.items[0].metadata.name&#125;&#39;) 9090:9090 &amp;</span><br></pre></td></tr></table></figure>


<h3 id="安装kvm"><a href="#安装kvm" class="headerlink" title="安装kvm"></a>安装kvm</h3><p>[<a href="https://www.fosslinux.com/2484/how-to-install-virtual-machine-manager-kvm-in-manjaro-and-arch-linux.htm/]" target="_blank" rel="noopener">https://www.fosslinux.com/2484/how-to-install-virtual-machine-manager-kvm-in-manjaro-and-arch-linux.htm/]</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LC_ALL&#x3D;C lscpu | grep Virtualization</span><br><span class="line">sudo pacman -S virt-manager qemu vde2 ebtables dnsmasq bridge-utils openbsd-netcat</span><br><span class="line">sudo systemctl enable libvirtd.service</span><br><span class="line">sudo systemctl start libvirtd.service</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>python学习</title>
    <url>/2019/11/13/python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>freetype,png<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyparsing" target="_blank" rel="noopener">python安装包</a></li>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -m pip install D:\numpy‑1.11.3+mkl‑cp27‑cp27m‑win_amd64.whl</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2019/11/05/mysql/</url>
    <content><![CDATA[<h4 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h4><p><a href="https://www.cnblogs.com/xiaochina/p/6886115.html" target="_blank" rel="noopener">单机多实例MYSQL主从复制</a><br><a href="https://www.cnblogs.com/cloudhere/p/10991520.html" target="_blank" rel="noopener">mysql-主从搭建</a></p>
<h4 id="mysql8二进制安装"><a href="#mysql8二进制安装" class="headerlink" title="mysql8二进制安装"></a>mysql8二进制安装</h4><ul>
<li><p>基础配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port&#x3D;8307</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;&#x2F;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306&#x2F;mysql_mulit  </span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;&#x2F;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306</span><br><span class="line">#套接字</span><br><span class="line">socket&#x3D;&#x2F;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306&#x2F;3306_mysql.sock </span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 允许连接失败的次数。</span><br><span class="line">max_connect_errors&#x3D;10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">#mysql_native_password</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br><span class="line"></span><br><span class="line">#运行账户</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">#开启二进制日志           </span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">#定义服务ID   </span><br><span class="line">server-id&#x3D;001        </span><br><span class="line">         </span><br><span class="line">##最大</span><br><span class="line">max_allowed_packet&#x3D;50M</span><br><span class="line">###等待超时默认s</span><br><span class="line">wait_timeout&#x3D;3600</span><br><span class="line">###活动超时  </span><br><span class="line">interactive_timeout&#x3D;3600      </span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size &#x3D; 128M</span><br><span class="line">join_buffer_size &#x3D; 128M</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#定义数据库默认字符 server\collation</span><br><span class="line">init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server&#x3D;utf8                </span><br><span class="line">collation-server&#x3D;utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line"></span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">#对表的大小写不敏感</span><br><span class="line">lower_case_table_names &#x3D; 0</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error&#x3D;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306&#x2F;3306_err.log              #错误日志</span><br><span class="line">pid-file&#x3D;&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306&#x2F;mysqld.pid   #pid,多协议通信 tcp&#x2F;sock</span><br><span class="line">[mysql]</span><br><span class="line">#客户端tab补全</span><br><span class="line">auto-rehash</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port&#x3D;8307</span><br><span class="line">#客户端连接编码</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure></li>
<li><p>主从配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主库配置</span><br><span class="line">[mysqld]</span><br><span class="line">#从库会基于此log-bin来做复制</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">#哪个数据库要生成bin-log(不配置全部)</span><br><span class="line">binlog-do-db&#x3D;mytest </span><br><span class="line">#哪个表要生成bin-log</span><br><span class="line">binlog-do-table&#x3D;mytest(不配置全部)</span><br><span class="line">#不用于读写分离的具体数据库</span><br><span class="line">binlog_ignore_db&#x3D;mysql </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#和binlog-do-db一样，可以设置多个</span><br><span class="line">binlog_ignore_db&#x3D;information_schema </span><br><span class="line">#选择row模式 </span><br><span class="line">binlog-format&#x3D;ROW</span><br><span class="line">server-id&#x3D;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">＃　从库配置</span><br><span class="line">[mysqld]</span><br><span class="line">#从库会基于此log-bin来做复制</span><br><span class="line">log-bin&#x3D;mysql-bin </span><br><span class="line">#忽略</span><br><span class="line">replicate-ignore-db&#x3D;mysql</span><br><span class="line">replicate-ignore-db&#x3D;information_schema</span><br><span class="line">replicate-ignore-db&#x3D;performance_schema</span><br><span class="line">#复制bin-log的哪个数据库(不配置全部)</span><br><span class="line">replicate-do-db&#x3D;mytest</span><br><span class="line">#复制bin-log的哪个表(不配置全部)</span><br><span class="line">replicate-do-table&#x3D;</span><br><span class="line">#选择row模式 </span><br><span class="line">binlog-format&#x3D;ROW</span><br><span class="line">server-id&#x3D;2</span><br></pre></td></tr></table></figure></li>
<li><p>初始化主库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;mysqld --defaults-file&#x3D;conf&#x2F;3307my.cnf --initialize --console  --user&#x3D;mysql</span><br><span class="line">bin&#x2F;mysql_ssl_rsa_setup</span><br><span class="line">会显示密码要记住，如果没有记住在命令行添加--skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure></li>
<li><p>启动主库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;mysqld_safe --defaults-file&#x3D;conf&#x2F;3306my.cnf &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>配置service</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql.server</span><br></pre></td></tr></table></figure></li>
<li><p>主库添加要从库账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">create user &#39;slave&#39;@&#39;%&#39; identified by &#39;slave@1234&#39;;</span><br><span class="line">grant replication slave on *.*  to &#39;slave&#39;@&#39;%&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
<li><p>配置主从</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;192.168.10.214&#39;,</span><br><span class="line">master_port&#x3D;3306,</span><br><span class="line">master_user&#x3D;&#39;slave&#39;,</span><br><span class="line">master_password&#x3D;&#39;slave@1234&#39;,</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000005&#39;,</span><br><span class="line">master_log_pos&#x3D;1518;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">stop slave;</span><br></pre></td></tr></table></figure>
<p>这里的master_log_file和master_log_pos是通过在主库执行show master status查询到的;</p>
</li>
<li><p>查看启动状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status;</span><br></pre></td></tr></table></figure></li>
<li><p>如果提示错误跟命令顺序有关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;mysqld --defaults-file&#x3D;conf&#x2F;3306my.cnf --initialize  --user&#x3D;mysql</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mysql.server &#x2F;etc&#x2F;init.d&#x2F;</span><br><span class="line">rm -rf &#x2F;etc&#x2F;my.cnf   #很有可能你的服务器安装过mariadb</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql.server start</span><br></pre></td></tr></table></figure>
<h4 id="mysqld-multi-配置MySQL多实例"><a href="#mysqld-multi-配置MySQL多实例" class="headerlink" title="mysqld_multi 配置MySQL多实例"></a>mysqld_multi 配置MySQL多实例</h4></li>
<li><p>添加用户和用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd mysql #添加mysql用户组  </span><br><span class="line">useradd -g mysql mysql #创建mysql用户并把它放到mysql组下  </span><br><span class="line">chown -R root:mysql &#x2F;usr&#x2F;local&#x2F;mysql #修改mysql文件属性</span><br></pre></td></tr></table></figure></li>
<li><p>初始化数据目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#把用到的工具添加到&#x2F;usr&#x2F;bin目录  </span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld_multi &#x2F;usr&#x2F;bin&#x2F;mysqld_multi  </span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld &#x2F;usr&#x2F;bin&#x2F;mysqld  </span><br><span class="line">  </span><br><span class="line">#初始化四个数据目录  </span><br><span class="line">bin&#x2F;mysqld --initialize --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql1 --user&#x3D;mysql</span><br><span class="line">bin&#x2F;mysqld --initialize --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql2 --user&#x3D;mysql</span><br><span class="line">bin&#x2F;mysqld --initialize --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql3 --user&#x3D;mysql</span><br><span class="line">bin&#x2F;mysqld --initialize --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql4 --user&#x3D;mysql</span><br><span class="line">  </span><br><span class="line">#修改属性  </span><br><span class="line">chown -R mysql &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql1   </span><br><span class="line">chown -R mysql &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql2  </span><br><span class="line">chown -R mysql &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql3   </span><br><span class="line">chown -R mysql &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql4</span><br></pre></td></tr></table></figure></li>
<li><p>主主</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master a</span><br><span class="line"></span><br><span class="line">#由于两个服务器都可以写数据，为了防止自增的key冲突，需要设置下面两个，increment是每次增长数，两台服务器设为2即可，offset是起始偏移，一个服务器设置为1，另一个设置为2，这样自增id在服务器A上是1、3、5这样，在服务器B上就是2、4、6不会产生冲突</span><br><span class="line">auto-increment-increment        &#x3D;2</span><br><span class="line">auto-increment-offset           &#x3D;1</span><br><span class="line"></span><br><span class="line">master b</span><br><span class="line"></span><br><span class="line">#由于两个服务器都可以写数据，为了防止自增的key冲突，需要设置下面两个，increment是每次增长数，两台服务器设为2即可，offset是起始偏移，一个服务器设置为1，另一个设置为2，这样自增id在服务器A上是1、3、5这样，在服务器B上就是2、4、6不会产生冲突</span><br><span class="line">auto-increment-increment        &#x3D;2</span><br><span class="line">auto-increment-offset           &#x3D;2</span><br></pre></td></tr></table></figure></li>
<li><p>配置多实例启动脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;src&#x2F;mysql-5.1.60&#x2F;support-files&#x2F;mysqld_multi.server &#x2F;etc&#x2F;init.d&#x2F;mysqld_multi.server  </span><br><span class="line">  </span><br><span class="line">#修改basedir和bindir为安装路径  </span><br><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql  </span><br><span class="line">bindir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure></li>
<li><p>配置多实例数据库配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">default-character-set&#x3D;utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt&#x3D;\\u@\\h:\\p \\d \\r:\\m:\\s&gt;</span><br><span class="line">default-character-set &#x3D; utf8</span><br><span class="line"></span><br><span class="line">[mysqld_multi]  </span><br><span class="line">mysqld     &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld_safe  </span><br><span class="line">mysqladmin &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqladmin  </span><br><span class="line">#user       &#x3D; mysql  </span><br><span class="line">#password   &#x3D; my_password  </span><br><span class="line">  </span><br><span class="line">[mysqld1]  </span><br><span class="line">socket     &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql1&#x2F;mysql1.sock  </span><br><span class="line">port       &#x3D; 3306  </span><br><span class="line">pid-file   &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql1&#x2F;mysql1.pid  </span><br><span class="line">datadir    &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql1  </span><br><span class="line">#language   &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;share&#x2F;mysql&#x2F;english  </span><br><span class="line">user       &#x3D; mysql</span><br><span class="line">  </span><br><span class="line">[mysqld2]  </span><br><span class="line">socket     &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql2&#x2F;mysql2.sock  </span><br><span class="line">port       &#x3D; 3307  </span><br><span class="line">pid-file   &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql2&#x2F;mysql2.pid  </span><br><span class="line">datadir    &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql2  </span><br><span class="line">#language   &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;share&#x2F;mysql&#x2F;english  </span><br><span class="line">user       &#x3D; mysql  </span><br><span class="line">  </span><br><span class="line">[mysqld3]  </span><br><span class="line">socket     &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql3&#x2F;mysql3.sock  </span><br><span class="line">port       &#x3D; 3308  </span><br><span class="line">pid-file   &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql3&#x2F;mysql3.pid  </span><br><span class="line">datadir    &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql3  </span><br><span class="line">#language   &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;share&#x2F;mysql&#x2F;english  </span><br><span class="line">user       &#x3D; mysql  </span><br><span class="line">  </span><br><span class="line">[mysqld4]  </span><br><span class="line">socket     &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql4&#x2F;mysql4.sock  </span><br><span class="line">port       &#x3D; 3309  </span><br><span class="line">pid-file   &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql4&#x2F;mysql4.pid  </span><br><span class="line">datadir    &#x3D; &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql4  </span><br><span class="line">#language   &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;share&#x2F;mysql&#x2F;english  </span><br><span class="line">user       &#x3D; mysql</span><br></pre></td></tr></table></figure></li>
<li><p>启动多实例数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin加到$PATH环境变量里  </span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin:$PATH  </span><br><span class="line">  </span><br><span class="line">#查看数据库状态  </span><br><span class="line">mysqld_multi --defaults-extra-file&#x3D;&#x2F;etc&#x2F;mysqld_multi.cnf report  </span><br><span class="line">#结果都为没有运行  </span><br><span class="line">Reporting MySQL servers  </span><br><span class="line">MySQL server from group: mysqld1 is not running  </span><br><span class="line">MySQL server from group: mysqld2 is not running  </span><br><span class="line">MySQL server from group: mysqld3 is not running  </span><br><span class="line">MySQL server from group: mysqld4 is not running  </span><br><span class="line">  </span><br><span class="line">#启动</span><br><span class="line">mysqld_multi --defaults-extra-file&#x3D;&#x2F;etc&#x2F;mysqld_multi.cnf start</span><br><span class="line">mysqld_multi start&#x2F;stop&#x2F;report&#x2F;reload [server-id]</span><br><span class="line">#结果为  </span><br><span class="line">Reporting MySQL servers  </span><br><span class="line">MySQL server from group: mysqld1 is not running  </span><br><span class="line">MySQL server from group: mysqld2 is not running  </span><br><span class="line">MySQL server from group: mysqld3 is not running  </span><br><span class="line">MySQL server from group: mysqld4 is not running  </span><br><span class="line">  </span><br><span class="line">#启动具体某一个实例可在start、stop后面加上具体数据1,2,3等</span><br></pre></td></tr></table></figure>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="log-slave-updates-true-将复制事件写入binlog-一台服务器既做主库又做从库此选项必须要开启"><a href="#log-slave-updates-true-将复制事件写入binlog-一台服务器既做主库又做从库此选项必须要开启" class="headerlink" title="log-slave-updates = true     #将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启"></a>log-slave-updates = true     #将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启</h5><h5 id="binlog-format-binlog的格式也有三种：STATEMENT，ROW，MIXED。"><a href="#binlog-format-binlog的格式也有三种：STATEMENT，ROW，MIXED。" class="headerlink" title="binlog-format(binlog的格式也有三种：STATEMENT，ROW，MIXED。 )"></a>binlog-format(binlog的格式也有三种：STATEMENT，ROW，MIXED。 )</h5></li>
<li><p>STATEMENT模式（SBR）<br>每一条会修改数据的sql语句会记录到binlog中。优点是并不需要记录每一条sql语句和每一行的数据变化，减少了binlog日志量，节约IO，提高性能。缺点是在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)</p>
</li>
<li><p>ROW模式（RBR）<br>不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样了。而且不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。缺点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。</p>
</li>
<li><p>MIXED模式（MBR）<br>以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。<br>binlog复制配置</p>
<h5 id="参考命令"><a href="#参考命令" class="headerlink" title="参考命令"></a>参考命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave 停止</span><br><span class="line">reset slave all 删除</span><br><span class="line">flush tables with read lock 锁表</span><br><span class="line">unlock tables 接触锁表</span><br><span class="line">show processlist 查看连接</span><br></pre></td></tr></table></figure>
<h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4></li>
<li><p>‘Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令行添加</span><br><span class="line">--socket&#x3D;&#x2F;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3306&#x2F;3306_mysql.sock</span><br></pre></td></tr></table></figure></li>
<li><p>error: ‘Access denied for user ‘root’@’localhost’ (using password: NO)’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先执行 sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server stop</span><br><span class="line">再执行sudo mysqld_safe --user&#x3D;mysql --skip-grant-tables</span><br><span class="line">mysql -u root mysql</span><br><span class="line">ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newpassward&#39;;</span><br><span class="line">FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure></li>
<li><p>忘记密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;mysqld_safe --defaults-file&#x3D;conf&#x2F;3307my.cnf --skip-grant-tables&amp;</span><br><span class="line">mysql --socket&#x3D;&#x2F;home&#x2F;hyc&#x2F;software&#x2F;mysql-8.0.18-linux-glibc2.12-x86_64&#x2F;data_3307&#x2F;3307_mysql.sock -uroot -P3307 -p</span><br><span class="line">use mysql</span><br><span class="line">flush privileges</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure></li>
<li><p>修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql5.7.6</span><br><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;new_password&#39;) where user&#x3D;&#39;root&#39; and Host &#x3D;&#39;localhost&#39;;</span><br><span class="line">或者</span><br><span class="line">update user set password &#x3D; password(&#39;new-password&#39;) where user &#x3D; &#39;root&#39; ;   </span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">#mysql5.7.9</span><br><span class="line">ALTER USER &#39;jeffrey&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password AS &#39;authentication_string字段内容&#39;;</span><br><span class="line">或者</span><br><span class="line">通过  SET GLOBAL  validate_password_policy&#x3D;&#39;LOW&#39;;  命令，降低安全等级后，就可以直接使用，限制是必须8个字符以上；</span><br><span class="line">ALTER USER USER() IDENTIFIED BY &#39;news_password&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#mysql8</span><br><span class="line">use mysql;</span><br><span class="line">flush privileges;</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass&#39;;</span><br></pre></td></tr></table></figure></li>
<li><p>密码失效问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default_password_lifetime&#x3D;0</span><br><span class="line">或者</span><br><span class="line">执行ALTER USER &#39;script&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>redis集群部署</title>
    <url>/2019/08/12/redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;software</span><br><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.4.tar.gz</span><br><span class="line">tar -zxvf redis-3.2.4.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-3.2.4</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis</span><br><span class="line">cp src&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class="line">cp src&#x2F;redis-cli &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class="line">cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class="line">groupadd redis</span><br><span class="line">useradd -g redis redis --no-create-home</span><br><span class="line">chown -R redis:redis &#x2F;usr&#x2F;local&#x2F;redis</span><br></pre></td></tr></table></figure>
<h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp utils&#x2F;redis_init_script &#x2F;etc&#x2F;init.d&#x2F;redisd</span><br><span class="line">cd &#x2F;etc&#x2F;init.d&#x2F;</span><br><span class="line">chkconfig redisd on</span><br></pre></td></tr></table></figure>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line">port  7000                                        &#x2F;&#x2F;端口7000,7002,7003        </span><br><span class="line">bind 本机ip                                       &#x2F;&#x2F;默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群</span><br><span class="line">daemonize    yes                               &#x2F;&#x2F;redis后台运行</span><br><span class="line">pidfile  &#x2F;var&#x2F;run&#x2F;redis_7000.pid          &#x2F;&#x2F;pidfile文件对应7000,7001,7002</span><br><span class="line">cluster-enabled  yes                           &#x2F;&#x2F;开启集群  把注释#去掉</span><br><span class="line">cluster-config-file  nodes_7000.conf   &#x2F;&#x2F;集群的配置  配置文件首次启动自动生成 7000,7001,7002</span><br><span class="line">cluster-node-timeout  15000                &#x2F;&#x2F;请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  yes                           &#x2F;&#x2F;aof日志开启  有需要就开启，它会每次写操作都记录一条日志</span><br></pre></td></tr></table></figure>

<h4 id="将-redis-trib-rb-复制到-usr-local-bin-目录下"><a href="#将-redis-trib-rb-复制到-usr-local-bin-目录下" class="headerlink" title="将 redis-trib.rb 复制到 /usr/local/bin 目录下"></a>将 redis-trib.rb 复制到 /usr/local/bin 目录下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">cp redis-trib.rb &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="创建-Redis-节点"><a href="#创建-Redis-节点" class="headerlink" title="创建 Redis 节点"></a>创建 Redis 节点</h4><blockquote>
<p>首先在 192.168.31.245 机器上 /root/software/redis-3.2.4 目录下创建 redis_cluster 目录；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir redis_cluster</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 redis_cluster 目录下，创建名为7000、7001、7002的目录，并将 redis.conf 拷贝到这三个目录中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir 7000 7001 7002</span><br><span class="line">cp redis.conf redis_cluster&#x2F;7000</span><br><span class="line">cp redis.conf redis_cluster&#x2F;7001</span><br><span class="line">cp redis.conf redis_cluster&#x2F;7002</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分别修改这三个配置文件，修改如下内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port  7000                                        &#x2F;&#x2F;端口7000,7002,7003        </span><br><span class="line">bind 本机ip                                       &#x2F;&#x2F;默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群</span><br><span class="line">daemonize    yes                               &#x2F;&#x2F;redis后台运行</span><br><span class="line">pidfile  &#x2F;var&#x2F;run&#x2F;redis_7000.pid          &#x2F;&#x2F;pidfile文件对应7000,7001,7002</span><br><span class="line">cluster-enabled  yes                           &#x2F;&#x2F;开启集群  把注释#去掉</span><br><span class="line">cluster-config-file  nodes_7000.conf   &#x2F;&#x2F;集群的配置  配置文件首次启动自动生成 7000,7001,7002</span><br><span class="line">cluster-node-timeout  15000                &#x2F;&#x2F;请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  yes                           &#x2F;&#x2F;aof日志开启  有需要就开启，它会每次写操作都记录一条日志</span><br></pre></td></tr></table></figure>
<h4 id="启动各个节点"><a href="#启动各个节点" class="headerlink" title="启动各个节点"></a>启动各个节点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一台机器上执行</span><br><span class="line">redis-server redis_cluster&#x2F;7000&#x2F;redis.conf</span><br><span class="line">redis-server redis_cluster&#x2F;7001&#x2F;redis.conf</span><br><span class="line">redis-server redis_cluster&#x2F;7002&#x2F;redis.conf</span><br><span class="line"> </span><br><span class="line">另外一台机器上执行</span><br><span class="line">redis-server redis_cluster&#x2F;7003&#x2F;redis.conf</span><br><span class="line">redis-server redis_cluster&#x2F;7004&#x2F;redis.conf</span><br><span class="line">redis-server redis_cluster&#x2F;7005&#x2F;redis.conf</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>检查 redis 启动情况<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##一台机器&lt;br&gt;ps -ef | grep redis</span><br><span class="line">root      61020      1  0 02:14 ?        00:00:01 redis-server 127.0.0.1:7000 [cluster]    </span><br><span class="line">root      61024      1  0 02:14 ?        00:00:01 redis-server 127.0.0.1:7001 [cluster]    </span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 127.0.0.1:7002 [cluster]    </span><br><span class="line"> </span><br><span class="line">netstat -tnlp | grep redis</span><br><span class="line">tcp        0      0 127.0.0.1:17000             0.0.0.0:*                   LISTEN      61020&#x2F;redis-server </span><br><span class="line">tcp        0      0 127.0.0.1:17001             0.0.0.0:*                   LISTEN      61024&#x2F;redis-server </span><br><span class="line">tcp        0      0 127.0.0.1:17002             0.0.0.0:*                   LISTEN      61029&#x2F;redis-server </span><br><span class="line">tcp        0      0 127.0.0.1:7000              0.0.0.0:*                   LISTEN      61020&#x2F;redis-server </span><br><span class="line">tcp        0      0 127.0.0.1:7001              0.0.0.0:*                   LISTEN      61024&#x2F;redis-server </span><br><span class="line">tcp        0      0 127.0.0.1:7002              0.0.0.0:*                   LISTEN      61029&#x2F;redis-server</span><br><span class="line"></span><br><span class="line">##另外一台机器</span><br><span class="line">ps -ef | grep redis</span><br><span class="line">root       9957      1  0 02:32 ?        00:00:01 redis-server 127.0.0.1:7003 [cluster]</span><br><span class="line">root       9964      1  0 02:32 ?        00:00:01 redis-server 127.0.0.1:7004 [cluster]</span><br><span class="line">root       9971      1  0 02:32 ?        00:00:01 redis-server 127.0.0.1:7005 [cluster]</span><br><span class="line">root      10065   4744  0 02:38 pts&#x2F;0    00:00:00 grep --color&#x3D;auto redis</span><br><span class="line">netstat -tlnp | grep redis</span><br><span class="line">tcp        0      0 127.0.0.1:17003         0.0.0.0:*               LISTEN      9957&#x2F;redis-server 1</span><br><span class="line">tcp        0      0 127.0.0.1:17004         0.0.0.0:*               LISTEN      9964&#x2F;redis-server 1</span><br><span class="line">tcp        0      0 127.0.0.1:17005         0.0.0.0:*               LISTEN      9971&#x2F;redis-server 1</span><br><span class="line">tcp        0      0 127.0.0.1:7003          0.0.0.0:*               LISTEN      9957&#x2F;redis-server 1</span><br><span class="line">tcp        0      0 127.0.0.1:7004          0.0.0.0:*               LISTEN      9964&#x2F;redis-server 1</span><br><span class="line">tcp        0      0 127.0.0.1:7005          0.0.0.0:*               LISTEN      9971&#x2F;redis-server 1</span><br></pre></td></tr></table></figure>
<h4 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h4><h5 id="安装perl5"><a href="#安装perl5" class="headerlink" title="安装perl5"></a>安装perl5</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf perl-5.30.0.tar.gz</span><br><span class="line">cd perl-5.30.0</span><br><span class="line">.&#x2F;Configure -des -Dprefix&#x3D;$HOME&#x2F;localperl</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf openssl-1.1.1d.tar.gz</span><br><span class="line">cd openssl-1.1.1d</span><br><span class="line">.&#x2F;config -fPIC --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl enable-shared</span><br><span class="line">.&#x2F;config -t</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h5 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install zlib-devel</span><br><span class="line">安装ruby</span><br><span class="line">tar -xvf ruby-2.6.4.tar.gz</span><br><span class="line">cd ruby-2.6.4</span><br><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure>

<h5 id="安装ruby自带的zlib"><a href="#安装ruby自带的zlib" class="headerlink" title="安装ruby自带的zlib"></a>安装ruby自带的zlib</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入ruby源码文件夹,安装ruby自身提供的zlib包</span><br><span class="line">cd ruby-2.5.1&#x2F;ext&#x2F;zlib</span><br><span class="line">ruby .&#x2F;extconf.rb </span><br><span class="line">修改Makefile（不然会报错）</span><br><span class="line">vi Makefile</span><br><span class="line">:%s&#x2F;$(top_srcdir)&#x2F;..\&#x2F;..&#x2F;g</span><br><span class="line">zlib.o: $(top_srcdir)&#x2F;include&#x2F;ruby.h 改成：zlib.o: ..&#x2F;..&#x2F;include&#x2F;ruby.h</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h5 id="安装ruby自带的openssl"><a href="#安装ruby自带的openssl" class="headerlink" title="安装ruby自带的openssl"></a>安装ruby自带的openssl</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ruby-2.6.4&#x2F;ext&#x2F;openssl&#x2F;</span><br><span class="line">ruby extconf.rb  --with-openssl-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F; --with-openssl-lib&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib</span><br><span class="line">vi Makefile</span><br><span class="line">:%s&#x2F;$(top_srcdir)&#x2F;..\&#x2F;..&#x2F;g</span><br><span class="line">ossl.o: $(top_srcdir)&#x2F;include&#x2F;ruby.h 修改成 ossl.o: ..&#x2F;..&#x2F;include&#x2F;ruby.h</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h5 id="安装redis-4-1-3-gem"><a href="#安装redis-4-1-3-gem" class="headerlink" title="安装redis-4.1.3.gem"></a>安装redis-4.1.3.gem</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install .&#x2F;redis-4.1.3.gem</span><br></pre></td></tr></table></figure>

<h4 id="redis-trib-rb"><a href="#redis-trib-rb" class="headerlink" title="redis-trib.rb"></a>redis-trib.rb</h4><blockquote>
<p>这个工具是用 ruby 实现的，所以需要安装ruby</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ruby ruby-devel rubygems rpm-build</span><br><span class="line">gem install redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis4或者redis3用</span><br><span class="line">redis-trib.rb  create  --replicas  1  192.168.31.245:7000 192.168.31.245:7001  192.168.31.245:7002 192.168.31.210:7003  192.168.31.210:7004  192.168.31.210:7005</span><br><span class="line">添加节点</span><br><span class="line">.&#x2F;redis-trib.rb add-node 127.0.0.1:7006 127.0.0.1:7000</span><br><span class="line">添加节点作为副本</span><br><span class="line">.&#x2F;redis-trib.rb add-node --slave 127.0.0.1:7006 127.0.0.1:7000</span><br><span class="line">删除接节点</span><br><span class="line">.&#x2F;redis-trib del-node 127.0.0.1:7000 &#96;&lt;node-id&gt;&#96;</span><br><span class="line">.&#x2F;redis-trib.rb del-node 127.0.0.1:7006 7c7b7f68bc56bf24cbb36b599d2e2d97b26c5540</span><br><span class="line">重新分片</span><br><span class="line">.&#x2F;redis-trib.rb reshard 127.0.0.1:7000</span><br><span class="line">.&#x2F;redis-trib.rb reshard --from &lt;node-id&gt; --to &lt;node-id&gt; --slots &lt;number of slots&gt; --yes &lt;host&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>
<h4 id="用create-cluster创建集群"><a href="#用create-cluster创建集群" class="headerlink" title="用create-cluster创建集群"></a>用create-cluster创建集群</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp utils&#x2F;create-cluster&#x2F;create-cluster &#x2F;usr&#x2F;local&#x2F;redis</span><br><span class="line">redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001  127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1</span><br><span class="line">create-cluster start</span><br><span class="line">create-cluster create</span><br></pre></td></tr></table></figure>

<h4 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli -p 7003 -c -h 192.168.80.231</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>rocketmq负载均衡</title>
    <url>/2019/09/27/rocketmq%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h4 id="生产者负载均衡"><a href="#生产者负载均衡" class="headerlink" title="生产者负载均衡"></a>生产者负载均衡</h4><ul>
<li>生产者负载均衡实质上是在选择MessageQueue对象（内部包含brokerName与queueId），一种是默认策略，从MessageQueue列表中随机选择一个，实现过程是通过自增随机数对列表大小取余获取位置信息，<br>但获得的MessageQueue所在的集群不能是上次的失败集群。另一种是集群超时容忍策略，先随机选择一个MessageQueue，如果因为超时等异常发送失败，会优先选择该broker集群下其他的messeagequeue进行发送；<br>如果没有找到则从之前发送失败broker集群中选择一个MessageQueue进行发送；如果还没有找到则使用默认策略<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName) &#123;</span><br><span class="line">    if (this.sendLatencyFaultEnable) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int index &#x3D; tpInfo.getSendWhichQueue().getAndIncrement();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; tpInfo.getMessageQueueList().size(); i++) &#123;</span><br><span class="line">                int pos &#x3D; Math.abs(index++) % tpInfo.getMessageQueueList().size();</span><br><span class="line">                if (pos &lt; 0)</span><br><span class="line">                    pos &#x3D; 0;</span><br><span class="line">                MessageQueue mq &#x3D; tpInfo.getMessageQueueList().get(pos);</span><br><span class="line">                if (latencyFaultTolerance.isAvailable(mq.getBrokerName())) &#123;</span><br><span class="line">                    if (null &#x3D;&#x3D; lastBrokerName || mq.getBrokerName().equals(lastBrokerName))</span><br><span class="line">                        return mq;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            final String notBestBroker &#x3D; latencyFaultTolerance.pickOneAtLeast();</span><br><span class="line">            int writeQueueNums &#x3D; tpInfo.getQueueIdByBroker(notBestBroker);</span><br><span class="line">            if (writeQueueNums &gt; 0) &#123;</span><br><span class="line">                final MessageQueue mq &#x3D; tpInfo.selectOneMessageQueue();</span><br><span class="line">                if (notBestBroker !&#x3D; null) &#123;</span><br><span class="line">                    mq.setBrokerName(notBestBroker);</span><br><span class="line">                    mq.setQueueId(tpInfo.getSendWhichQueue().getAndIncrement() % writeQueueNums);</span><br><span class="line">                &#125;</span><br><span class="line">                return mq;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                latencyFaultTolerance.remove(notBestBroker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;Error occurred when selecting message queue&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return tpInfo.selectOneMessageQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return tpInfo.selectOneMessageQueue(lastBrokerName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改内存大小"><a href="#修改内存大小" class="headerlink" title="修改内存大小"></a>修改内存大小</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">runbroker.sh 和runserver.sh</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><img src="https://www.cnblogs.com/toUpdating/p/9989477.html" alt="https://www.cnblogs.com/toUpdating/p/9989477.html"><br><img src="https://gitbook.cn/books/5d340810c43fe20aeadc88db/index.html" alt="https://gitbook.cn/books/5d340810c43fe20aeadc88db/index.html"><br><img src="https://www.cnblogs.com/chenjunjie12321/p/7913323.html" alt="https://www.cnblogs.com/chenjunjie12321/p/7913323.html"><br><img src="https://blog.csdn.net/mxlmxlmxl33/article/details/85949429" alt="https://blog.csdn.net/mxlmxlmxl33/article/details/85949429"></p>
]]></content>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>rocketmq部署</title>
    <url>/2019/09/24/rocketmq%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>unzip rocketmq-all-4.5.2-bin-release.zip<br>mv rocketmq-all-4.5.2-bin-release /usr/local/rocketmq</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul>
<li>修改conf/2m-2s-async/broker-a.properties主要内容为如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#所属集群名字</span><br><span class="line">brokerClusterName&#x3D;rocketmq-cluster</span><br><span class="line">#broker名字，名字可重复,为了管理,每个master起一个名字,他的slave同他,eg:Amaster叫broker-a,他的slave也叫broker-a</span><br><span class="line">brokerName&#x3D;broker-a</span><br><span class="line">#0 表示 Master，&gt;0 表示 Slave</span><br><span class="line">brokerId&#x3D;0</span><br><span class="line">#nameServer地址，分号分割</span><br><span class="line">namesrvAddr&#x3D;192.168.229.5:9876;192.168.229.6:9876</span><br><span class="line">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums&#x3D;4</span><br><span class="line">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br><span class="line">autoCreateTopicEnable&#x3D;true</span><br><span class="line">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="line">autoCreateSubscriptionGroup&#x3D;true</span><br><span class="line">#Broker 对外服务的监听端口,</span><br><span class="line">listenPort&#x3D;10911</span><br><span class="line">#删除文件时间点，默认凌晨 4点</span><br><span class="line">deleteWhen&#x3D;04</span><br><span class="line">#文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime&#x3D;120</span><br><span class="line">#commitLog每个文件的大小默认1G</span><br><span class="line">mapedFileSizeCommitLog&#x3D;1073741824</span><br><span class="line">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br><span class="line">mapedFileSizeConsumeQueue&#x3D;300000</span><br><span class="line">#destroyMapedFileIntervalForcibly&#x3D;120000</span><br><span class="line">#redeleteHangedFileInterval&#x3D;120000</span><br><span class="line">#检测物理文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio&#x3D;88</span><br><span class="line">#存储路径</span><br><span class="line">storePathRootDir&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a</span><br><span class="line">#commitLog 存储路径</span><br><span class="line">storePathCommitLog&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;commitlog</span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;abort</span><br><span class="line">#限制的消息大小</span><br><span class="line">maxMessageSize&#x3D;65536</span><br><span class="line">#flushCommitLogLeastPages&#x3D;4</span><br><span class="line">#flushConsumeQueueLeastPages&#x3D;2</span><br><span class="line">#flushCommitLogThoroughInterval&#x3D;10000</span><br><span class="line">#flushConsumeQueueThoroughInterval&#x3D;60000</span><br><span class="line">#Broker 的角色</span><br><span class="line">#- ASYNC_MASTER 异步复制Master</span><br><span class="line">#- SYNC_MASTER 同步双写Master</span><br><span class="line">#- SLAVE</span><br><span class="line">brokerRole&#x3D;ASYNC_MASTER</span><br><span class="line">#刷盘方式</span><br><span class="line">#- ASYNC_FLUSH 异步刷盘</span><br><span class="line">#- SYNC_FLUSH 同步刷盘</span><br><span class="line">flushDiskType&#x3D;ASYNC_FLUSH</span><br><span class="line">#checkTransactionMessageEnable&#x3D;false</span><br><span class="line">#发消息线程池数量</span><br><span class="line">#sendMessageThreadPoolNums&#x3D;128</span><br><span class="line">#拉消息线程池数量</span><br><span class="line">#pullMessageThreadPoolNums&#x3D;128</span><br></pre></td></tr></table></figure></li>
<li>修改conf/2m-2s-async/broker-b-s.properties主要内容为如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#所属集群名字</span><br><span class="line">brokerClusterName&#x3D;rocketmq-cluster</span><br><span class="line">#broker名字，名字可重复,为了管理,每个master起一个名字,他的slave同他,eg:Amaster叫broker-a,他的slave也叫broker-a</span><br><span class="line">brokerName&#x3D;broker-b</span><br><span class="line">#0 表示 Master，&gt;0 表示 Slave</span><br><span class="line">brokerId&#x3D;1</span><br><span class="line">#nameServer地址，分号分割</span><br><span class="line">namesrvAddr&#x3D;192.168.229.5:9876;192.168.229.6:9876</span><br><span class="line">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums&#x3D;4</span><br><span class="line">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br><span class="line">autoCreateTopicEnable&#x3D;true</span><br><span class="line">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="line">autoCreateSubscriptionGroup&#x3D;true</span><br><span class="line">#Broker 对外服务的监听端口,</span><br><span class="line">listenPort&#x3D;10920</span><br><span class="line">#删除文件时间点，默认凌晨 4点</span><br><span class="line">deleteWhen&#x3D;04</span><br><span class="line">#文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime&#x3D;120</span><br><span class="line">#commitLog每个文件的大小默认1G</span><br><span class="line">mapedFileSizeCommitLog&#x3D;1073741824</span><br><span class="line">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br><span class="line">mapedFileSizeConsumeQueue&#x3D;300000</span><br><span class="line">#destroyMapedFileIntervalForcibly&#x3D;120000</span><br><span class="line">#redeleteHangedFileInterval&#x3D;120000</span><br><span class="line">#检测物理文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio&#x3D;88</span><br><span class="line">#存储路径</span><br><span class="line">storePathRootDir&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s</span><br><span class="line">#commitLog 存储路径</span><br><span class="line">storePathCommitLog&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;commitlog</span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;abort</span><br><span class="line">#限制的消息大小</span><br><span class="line">maxMessageSize&#x3D;65536</span><br><span class="line">#flushCommitLogLeastPages&#x3D;4</span><br><span class="line">#flushConsumeQueueLeastPages&#x3D;2</span><br><span class="line">#flushCommitLogThoroughInterval&#x3D;10000</span><br><span class="line">#flushConsumeQueueThoroughInterval&#x3D;60000</span><br><span class="line">#Broker 的角色</span><br><span class="line">#- ASYNC_MASTER 异步复制Master</span><br><span class="line">#- SYNC_MASTER 同步双写Master</span><br><span class="line">#- SLAVE</span><br><span class="line">brokerRole&#x3D;SLAVE</span><br><span class="line">#刷盘方式</span><br><span class="line">#- ASYNC_FLUSH 异步刷盘</span><br><span class="line">#- SYNC_FLUSH 同步刷盘</span><br><span class="line">flushDiskType&#x3D;ASYNC_FLUSH</span><br><span class="line">#checkTransactionMessageEnable&#x3D;false</span><br><span class="line">#发消息线程池数量</span><br><span class="line">#sendMessageThreadPoolNums&#x3D;128</span><br><span class="line">#拉消息线程池数量</span><br><span class="line">#pullMessageThreadPoolNums&#x3D;128</span><br></pre></td></tr></table></figure>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3></li>
<li>节点1执行:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;nsumequeue &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;commitlog &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a&#x2F;index &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;nsumequeue &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;commitlog &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b-s&#x2F;index</span><br></pre></td></tr></table></figure></li>
<li>节点2执行:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a-s &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a-s&#x2F;nsumequeue &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a-s&#x2F;commitlog &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-a-s&#x2F;index &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b&#x2F;nsumequeue &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b&#x2F;commitlog &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;broker-b&#x2F;index</span><br></pre></td></tr></table></figure>
<h3 id="启动mqnamesrv（多个节点）"><a href="#启动mqnamesrv（多个节点）" class="headerlink" title="启动mqnamesrv（多个节点）"></a>启动mqnamesrv（多个节点）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup sh &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;bin&#x2F;mqnamesrv &gt;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs&#x2F;mqnamesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="启动broker"><a href="#启动broker" class="headerlink" title="启动broker"></a>启动broker</h3></li>
<li>节点1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 节点1</span><br><span class="line">nohup sh &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;bin&#x2F;mqbroker -c &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;conf&#x2F;2m-2s-async&#x2F;broker-a.properties &gt; &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs&#x2F;broker-a.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 节点2</span><br><span class="line">nohup sh &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;bin&#x2F;mqbroker -c &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;conf&#x2F;2m-2s-async&#x2F;broker-a-s.properties &gt; &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs&#x2F;broker-a-s.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 节点2</span><br><span class="line">nohup sh &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;bin&#x2F;mqbroker -c &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;conf&#x2F;2m-2s-async&#x2F;broker-b.properties &gt; &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs&#x2F;broker-b.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 节点1</span><br><span class="line">nohup sh &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;bin&#x2F;mqbroker -c &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;conf&#x2F;2m-2s-async&#x2F;broker-b-s.properties &gt; &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;logs&#x2F;broker-b-s.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="配置管理界面"><a href="#配置管理界面" class="headerlink" title="配置管理界面"></a>配置管理界面</h3><img src="https://github.com/apache/rocketmq-externals" alt="https://github.com/apache/rocketmq-externals"> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 验证</span><br><span class="line">- 在ROCKETMQ_HOME路径下执行以下命令模拟Producer发消息：</span><br></pre></td></tr></table></figure>
<p>sh tools.sh org.apache.rocketmq.example.quickstart.Producer</p>
<p>``` </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><img src="https://blog.csdn.net/weixin_40533111/article/details/84451219" alt="https://blog.csdn.net/weixin_40533111/article/details/84451219"><br><img src="https://www.cnblogs.com/xiaodf/p/5075167.html" alt="https://blog.csdn.net/weixin_40533111/article/details/84451219"></p>
]]></content>
  </entry>
  <entry>
    <title>seata安装</title>
    <url>/2019/10/30/seata%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><h4 id="修改-conf-registry-conf"><a href="#修改-conf-registry-conf" class="headerlink" title="修改 conf/registry.conf"></a>修改 conf/registry.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file nacos</span><br><span class="line">  type &#x3D; &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;192.168.10.200&quot;</span><br><span class="line">    namespace &#x3D; &quot;public&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul</span><br><span class="line">  type &#x3D; &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;192.168.10.200&quot;</span><br><span class="line">    namespace &#x3D; &quot;public&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改conf-nacos-config-txt"><a href="#修改conf-nacos-config-txt" class="headerlink" title="修改conf/nacos-config.txt"></a>修改conf/nacos-config.txt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transport.type&#x3D;TCP</span><br><span class="line">transport.server&#x3D;NIO</span><br><span class="line">transport.heartbeat&#x3D;true</span><br><span class="line">transport.thread-factory.boss-thread-prefix&#x3D;NettyBoss</span><br><span class="line">transport.thread-factory.worker-thread-prefix&#x3D;NettyServerNIOWorker</span><br><span class="line">transport.thread-factory.server-executor-thread-prefix&#x3D;NettyServerBizHandler</span><br><span class="line">transport.thread-factory.share-boss-worker&#x3D;false</span><br><span class="line">transport.thread-factory.client-selector-thread-prefix&#x3D;NettyClientSelector</span><br><span class="line">transport.thread-factory.client-selector-thread-size&#x3D;1</span><br><span class="line">transport.thread-factory.client-worker-thread-prefix&#x3D;NettyClientWorkerThread</span><br><span class="line">transport.thread-factory.boss-thread-size&#x3D;1</span><br><span class="line">transport.thread-factory.worker-thread-size&#x3D;8</span><br><span class="line">transport.shutdown.wait&#x3D;3</span><br><span class="line">service.vgroup_mapping.my_test_tx_group&#x3D;default</span><br><span class="line">service.enableDegrade&#x3D;false</span><br><span class="line">service.disable&#x3D;false</span><br><span class="line">service.max.commit.retry.timeout&#x3D;-1</span><br><span class="line">service.max.rollback.retry.timeout&#x3D;-1</span><br><span class="line">client.async.commit.buffer.limit&#x3D;10000</span><br><span class="line">client.lock.retry.internal&#x3D;10</span><br><span class="line">client.lock.retry.times&#x3D;30</span><br><span class="line">client.lock.retry.policy.branch-rollback-on-conflict&#x3D;true</span><br><span class="line">client.table.meta.check.enable&#x3D;true</span><br><span class="line">client.report.retry.count&#x3D;5</span><br><span class="line">client.tm.commit.retry.count&#x3D;1</span><br><span class="line">client.tm.rollback.retry.count&#x3D;1</span><br><span class="line">store.mode&#x3D;file</span><br><span class="line">store.file.dir&#x3D;file_store&#x2F;data</span><br><span class="line">store.file.max-branch-session-size&#x3D;16384</span><br><span class="line">store.file.max-global-session-size&#x3D;512</span><br><span class="line">store.file.file-write-buffer-cache-size&#x3D;16384</span><br><span class="line">store.file.flush-disk-mode&#x3D;async</span><br><span class="line">store.file.session.reload.read_size&#x3D;100</span><br><span class="line">store.db.datasource&#x3D;dbcp</span><br><span class="line">store.db.db-type&#x3D;mysql</span><br><span class="line">store.db.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">store.db.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata?useUnicode&#x3D;true</span><br><span class="line">store.db.user&#x3D;mysql</span><br><span class="line">store.db.password&#x3D;mysql</span><br><span class="line">store.db.min-conn&#x3D;1</span><br><span class="line">store.db.max-conn&#x3D;3</span><br><span class="line">store.db.global.table&#x3D;global_table</span><br><span class="line">store.db.branch.table&#x3D;branch_table</span><br><span class="line">store.db.query-limit&#x3D;100</span><br><span class="line">store.db.lock-table&#x3D;lock_table</span><br><span class="line">recovery.committing-retry-period&#x3D;1000</span><br><span class="line">recovery.asyn-committing-retry-period&#x3D;1000</span><br><span class="line">recovery.rollbacking-retry-period&#x3D;1000</span><br><span class="line">recovery.timeout-retry-period&#x3D;1000</span><br><span class="line">transaction.undo.data.validation&#x3D;true</span><br><span class="line">transaction.undo.log.serialization&#x3D;jackson</span><br><span class="line">transaction.undo.log.save.days&#x3D;7</span><br><span class="line">transaction.undo.log.delete.period&#x3D;86400000</span><br><span class="line">transaction.undo.log.table&#x3D;undo_log</span><br><span class="line">transport.serialization&#x3D;seata</span><br><span class="line">transport.compressor&#x3D;none</span><br><span class="line">metrics.enabled&#x3D;false</span><br><span class="line">metrics.registry-type&#x3D;compact</span><br><span class="line">metrics.exporter-list&#x3D;prometheus</span><br><span class="line">metrics.exporter-prometheus-port&#x3D;9898</span><br><span class="line">support.spring.datasource.autoproxy&#x3D;false</span><br></pre></td></tr></table></figure>
<ul>
<li>修改项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.mode :存储模式 默认file 这里我修改为db 模式 ，并且需要三个表global_table、branch_table和lock_table</span><br><span class="line">store.db.driver-class-name： 默认没有，会报错。添加了 com.mysql.jdbc.Driver</span><br><span class="line">store.db.datasource&#x3D;dbcp ：数据源 dbcp</span><br><span class="line">store.db.db-type&#x3D;mysql : 存储数据库的类型为mysql</span><br><span class="line">store.db.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.10.200:3306&#x2F;seata?useUnicode&#x3D;true : 修改为自己的数据库url、port、数据库名称</span><br><span class="line">store.db.user&#x3D;lidong :数据库的账号</span><br><span class="line">store.db.password&#x3D;cwj887766@@ :数据库的密码</span><br><span class="line">service.vgroup_mapping.order-service-seata-service-group&#x3D;default</span><br><span class="line">service.vgroup_mapping.account-service-seata-service-group&#x3D;default</span><br><span class="line">service.vgroup_mapping.storage-service-seata-service-group&#x3D;default</span><br><span class="line">service.vgroup_mapping.business-service-seata-service-group&#x3D;default</span><br></pre></td></tr></table></figure>
<h4 id="导入sql"><a href="#导入sql" class="headerlink" title="导入sql"></a>导入sql</h4></li>
<li>如果store.mode为db需要引用三张表conf/db_store.sql</li>
<li>执行回滚表db_undo_log.sql(mysql)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- the table to store seata xid data</span><br><span class="line">-- 0.7.0+ add context</span><br><span class="line">-- you must to init this sql for you business databese. the seata server not need it.</span><br><span class="line">-- 此脚本必须初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）</span><br><span class="line">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span><br><span class="line">drop table &#96;undo_log&#96;;</span><br><span class="line">CREATE TABLE &#96;undo_log&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;branch_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;xid&#96; varchar(100) NOT NULL,</span><br><span class="line">  &#96;context&#96; varchar(128) NOT NULL,</span><br><span class="line">  &#96;rollback_info&#96; longblob NOT NULL,</span><br><span class="line">  &#96;log_status&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;log_created&#96; datetime NOT NULL,</span><br><span class="line">  &#96;log_modified&#96; datetime NOT NULL,</span><br><span class="line">  &#96;ext&#96; varchar(100) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>
<ul>
<li>执行回滚表db_undo_log.sql(oracle)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- Create table</span><br><span class="line">create table UNDO_LOG</span><br><span class="line">(</span><br><span class="line">  id            NUMBER(20) not null,</span><br><span class="line">  branch_id     NUMBER(20) not null,</span><br><span class="line">  xid           VARCHAR2(100) not null,</span><br><span class="line">  context       VARCHAR2(128) not null,</span><br><span class="line">  rollback_info BLOB not null,</span><br><span class="line">  log_status    NUMBER(11) not null,</span><br><span class="line">  log_created   DATE not null,</span><br><span class="line">  log_modified  DATE not null,</span><br><span class="line">  ext           VARCHAR2(100)</span><br><span class="line">)</span><br><span class="line">tablespace CP2</span><br><span class="line">  pctfree 10</span><br><span class="line">  initrans 1</span><br><span class="line">  maxtrans 255</span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    initial 64K</span><br><span class="line">    next 1M</span><br><span class="line">    minextents 1</span><br><span class="line">    maxextents unlimited</span><br><span class="line">  );</span><br><span class="line">-- Create&#x2F;Recreate indexes </span><br><span class="line">create unique index IDX_UNDO_LOG_1 on UNDO_LOG (BRANCH_ID, XID)</span><br><span class="line">  tablespace CP2</span><br><span class="line">  pctfree 10</span><br><span class="line">  initrans 2</span><br><span class="line">  maxtrans 255</span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    initial 64K</span><br><span class="line">    next 1M</span><br><span class="line">    minextents 1</span><br><span class="line">    maxextents unlimited</span><br><span class="line">  );</span><br><span class="line">-- Create&#x2F;Recreate primary, unique and foreign key constraints </span><br><span class="line">alter table UNDO_LOG</span><br><span class="line">  add constraint PK_UNDO_LOG primary key (ID)</span><br><span class="line">  using index </span><br><span class="line">  tablespace CP2</span><br><span class="line">  pctfree 10</span><br><span class="line">  initrans 2</span><br><span class="line">  maxtrans 255</span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    initial 64K</span><br><span class="line">    next 1M</span><br><span class="line">    minextents 1</span><br><span class="line">    maxextents unlimited</span><br><span class="line">  );</span><br><span class="line">-- auto-generated definition</span><br><span class="line">create sequence SEQ_UNDO_LOG_ID;</span><br><span class="line">create trigger UNDO_LOG_INSERT_TRIGGER</span><br><span class="line">    before insert</span><br><span class="line">    on UNDO_LOG</span><br><span class="line">    for each row</span><br><span class="line">DECLARE</span><br><span class="line">begin</span><br><span class="line"> select SEQ_UNDO_LOG_ID.nextval into :new.id from dual;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h4 id="修改nacos-config-sh中namespaceId和tenant"><a href="#修改nacos-config-sh中namespaceId和tenant" class="headerlink" title="修改nacos-config.sh中namespaceId和tenant"></a>修改nacos-config.sh中namespaceId和tenant</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result&#x3D;&#96;curl -X POST &quot;http:&#x2F;&#x2F;$nacosIp:8848&#x2F;nacos&#x2F;v1&#x2F;cs&#x2F;configs?tenant&#x3D;8d1568a1-93ed-4155-9362-352fc5e8c6da&amp;namespaceId&#x3D;8d1568a1-93ed-4155-9362-352fc5e8c6da&amp;dataId&#x3D;$key&amp;group&#x3D;SEATA_GROUP&amp;content&#x3D;$value&quot;&#96;</span><br></pre></td></tr></table></figure>
<h4 id="将Seata配置添加到Nacos中"><a href="#将Seata配置添加到Nacos中" class="headerlink" title="将Seata配置添加到Nacos中"></a>将Seata配置添加到Nacos中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh nacos-config.sh localhost</span><br></pre></td></tr></table></figure>
<h4 id="修改项目中两个配置文件registry-conf-file-conf"><a href="#修改项目中两个配置文件registry-conf-file-conf" class="headerlink" title="修改项目中两个配置文件registry.conf,file.conf"></a>修改项目中两个配置文件registry.conf,file.conf</h4></li>
<li>如果为seata-spring-boot-starter依赖就不需要配置这两个文件，直接配置在application.yml中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seata:</span><br><span class="line">  application-id: $&#123;spring.application.name&#125;</span><br><span class="line">  tx-service-group: $&#123;spring.application.name&#125;-seata-service-group</span><br><span class="line">  registry:</span><br><span class="line">    # nacoss</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: $&#123;spring.cloud.nacos.discovery.server-addr&#125;</span><br><span class="line">      namespace: $&#123;spring.cloud.nacos.discovery.namespace&#125;</span><br><span class="line">      cluster: &quot;default&quot;</span><br><span class="line">  config:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: $&#123;spring.cloud.nacos.discovery.server-addr&#125;</span><br><span class="line">      namespace: $&#123;spring.cloud.nacos.discovery.namespace&#125;</span><br><span class="line">  service:</span><br><span class="line">    grouplist: localhost:8091</span><br><span class="line">    vgroup-mapping: $&#123;seata.tx-service-group&#125;</span><br></pre></td></tr></table></figure></li>
<li>file.conf是registry.file类型才需要配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type &#x3D; &quot;TCP&quot;</span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server &#x3D; &quot;NIO&quot;</span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat &#x3D; true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  thread-factory &#123;</span><br><span class="line">    boss-thread-prefix &#x3D; &quot;NettyBoss&quot;</span><br><span class="line">    worker-thread-prefix &#x3D; &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    server-executor-thread-prefix &#x3D; &quot;NettyServerBizHandler&quot;</span><br><span class="line">    share-boss-worker &#x3D; false</span><br><span class="line">    client-selector-thread-prefix &#x3D; &quot;NettyClientSelector&quot;</span><br><span class="line">    client-selector-thread-size &#x3D; 1</span><br><span class="line">    client-worker-thread-prefix &#x3D; &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    boss-thread-size &#x3D; 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    worker-thread-size &#x3D; 8</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait &#x3D; 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization &#x3D; &quot;seata&quot;</span><br><span class="line">  compressor &#x3D; &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service &#123;</span><br><span class="line">  #vgroup-&gt;rgroup</span><br><span class="line">  vgroup_mapping.my_test_tx_group &#x3D; &quot;default&quot;</span><br><span class="line">  #only support single node</span><br><span class="line">  default.grouplist &#x3D; &quot;127.0.0.1:8091&quot;</span><br><span class="line">  #degrade current not support</span><br><span class="line">  enableDegrade &#x3D; false</span><br><span class="line">  #disable</span><br><span class="line">  disable &#x3D; false</span><br><span class="line">  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent</span><br><span class="line">  max.commit.retry.timeout &#x3D; &quot;-1&quot;</span><br><span class="line">  max.rollback.retry.timeout &#x3D; &quot;-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit &#x3D; 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal &#x3D; 10</span><br><span class="line">    retry.times &#x3D; 30</span><br><span class="line">  &#125;</span><br><span class="line">  report.retry.count &#x3D; 5</span><br><span class="line">  tm.commit.retry.count &#x3D; 1</span><br><span class="line">  tm.rollback.retry.count &#x3D; 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transaction &#123;</span><br><span class="line">  undo.data.validation &#x3D; true</span><br><span class="line">  undo.log.serialization &#x3D; &quot;jackson&quot;</span><br><span class="line">  undo.log.save.days &#x3D; 7</span><br><span class="line">  #schedule delete expired undo_log in milliseconds</span><br><span class="line">  undo.log.delete.period &#x3D; 86400000</span><br><span class="line">  undo.log.table &#x3D; &quot;undo_log&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">support &#123;</span><br><span class="line">  ## spring</span><br><span class="line">  spring &#123;</span><br><span class="line">    # auto proxy the DataSource bean</span><br><span class="line">    datasource.autoproxy &#x3D; false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>registry.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk</span><br><span class="line">  type &#x3D; &quot;file&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost&quot;</span><br><span class="line">    namespace &#x3D; &quot;public&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl &#x3D; &quot;http:&#x2F;&#x2F;localhost:1001&#x2F;eureka&quot;</span><br><span class="line">    application &#x3D; &quot;default&quot;</span><br><span class="line">    weight &#x3D; &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost:6379&quot;</span><br><span class="line">    db &#x3D; &quot;0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout &#x3D; 6000</span><br><span class="line">    connect.timeout &#x3D; 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk</span><br><span class="line">  type &#x3D; &quot;file&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost&quot;</span><br><span class="line">    namespace &#x3D; &quot;public&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id &#x3D; &quot;fescar-server&quot;</span><br><span class="line">    apollo.meta &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.204:8801&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout &#x3D; 6000</span><br><span class="line">    connect.timeout &#x3D; 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup sh seata-server.sh -h node-140 -p 8091 -m file &amp;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>spring-cloud架构图</title>
    <url>/2019/06/26/spring-cloud%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<img src="/2019/06/26/spring-cloud%E6%9E%B6%E6%9E%84%E5%9B%BE/spring-cloud.png" class="" title="spring-cloud架构图">
]]></content>
      <categories>
        <category>spring-cloud</category>
      </categories>
      <tags>
        <tag>spring-cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>rocketmq</title>
    <url>/2019/09/24/rocketmq/</url>
    <content><![CDATA[<h4 id="消息不丢失"><a href="#消息不丢失" class="headerlink" title="消息不丢失"></a>消息不丢失</h4><ul>
<li>分别从Producer发送机制、Broker的持久化机制，以及消费者的offSet机制来最大程度保证消息不易丢失<ul>
<li>从Producer的视角来看：如果消息未能正确的存储在MQ中，或者消费者未能正确的消费到这条消息，都是消息丢失。</li>
<li>从Broker的视角来看：如果消息已经存在Broker里面了，如何保证不会丢失呢（宕机、磁盘崩溃）</li>
<li>从Consumer的视角来看：如果消息已经完成持久化了，但是Consumer取了，但是未消费成功且没有反馈，就是消息丢失<a id="more"></a></li>
</ul>
</li>
<li>从Producer分析：如何确保消息正确的发送到了Broker?<ul>
<li>默认情况下，可以通过同步的方式阻塞式的发送，check SendStatus，状态是OK，表示消息一定成功的投递到了Broker，状态超时或者失败，则会触发默认的2次重试。此方法的发送结果，可能Broker存储成功了，也可能没成功</li>
<li>采取事务消息的投递方式，并不能保证消息100%投递成功到了Broker，但是如果消息发送Ack失败的话，此消息会存储在CommitLog当中，但是对ConsumerQueue是不可见的。可以在日志中查看到这条异常的消息，严格意义上来讲，也并没有完全丢失</li>
<li>RocketMQ支持 日志的索引，如果一条消息发送之后超时，也可以通过查询日志的API，来check是否在Broker存储成功</li>
</ul>
</li>
<li>从Broker分析：如果确保接收到的消息不会丢失?<ul>
<li>消息支持持久化到Commitlog里面，即使宕机后重启，未消费的消息也是可以加载出来的</li>
<li>Broker自身支持同步刷盘、异步刷盘的策略，可以保证接收到的消息一定存储在本地的内存中</li>
<li>Broker集群支持 1主N从的策略，支持同步复制和异步复制的方式，同步复制可以保证即使Master 磁盘崩溃，消息仍然不会丢失</li>
</ul>
</li>
<li>从Cunmser分析：如何确保拉取到的消息被成功消费？<ul>
<li>消费者可以根据自身的策略批量Pull消息</li>
<li>Consumer自身维护一个持久化的offset（对应MessageQueue里面的min offset），标记已经成功消费或者已经成功发回到broker的消息下标</li>
<li>如果Consumer消费失败，那么它会把这个消息发回给Broker，发回成功后，再更新自己的offset</li>
<li>如果Consumer消费失败，发回给broker时，broker挂掉了，那么Consumer会定时重试这个操作</li>
<li>如果Consumer和broker一起挂了，消息也不会丢失，因为consumer 里面的offset是定时持久化的，重启之后，继续拉取offset之前的消息到本地</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void rebalanceByTopic(final String topic, final boolean isOrder) &#123;</span><br><span class="line">        switch (messageModel) &#123;</span><br><span class="line">            &#x2F;**</span><br><span class="line">             *      * 检查RebalanceImpl.messageModel变量，若等于BROADCASTING，则执行RebalanceImpl. rebalanceByTopic (String topic)方法中的广播模式下的逻辑，该方法的主要目的是为topic下的所有MessageQueue集合中的每个MessageQueue对象创建ProcessQueue对象，并且对于PUSH模式将拉取消息的请求放入服务线程（PullMessageService）中。大致逻辑如下：</span><br><span class="line">             * &lt;p&gt;</span><br><span class="line">             * 1、以topic值为key值从RebalanceImpl.topicSubscribeInfoTable: ConcurrentHashMap&lt;String&#x2F;* topic , Set&lt;MessageQueue&gt;&gt;列表中获取MessageQueue集合；</span><br><span class="line">             * &lt;p&gt;</span><br><span class="line">             * 2、以topic和上一步获得的MessageQueue集合为参数调用RebalanceImpl.updateProcessQueueTableInRebalance(String topic, Set&lt;MessageQueue&gt; mqSet)方法并获取返回结果。</span><br><span class="line">             * &lt;p&gt;</span><br><span class="line">             * 3、若返回结果为true（即RebalanceImpl.processQueueTable列表有变化）则调用RebalanceImpl.messageQueueChanged(String topic, Set&lt;MessageQueue&gt; mqAll, Set&lt;MessageQueue&gt; mqDivided)方法；对于PUSH模式下面没有相应的处理逻辑，即messageQueueChanged方法为空；对于PULL模式下会调用RebalancePullImpl对象的messageQueueChanged方法，此方法的目的是对于采用了计划消息拉取服务的应用来说，当Consumer订阅的MessageQueue有变动或者或者ProcessQueue有更新时触发消息拉取动作，大致逻辑如下：</span><br><span class="line">             * &lt;p&gt;</span><br><span class="line">             * 3.1）获取DefaultMQPullConsumer.messageQueueListener变量的值，该变量只有在应用层使用MQPullConsumerScheduleService类来进行计划拉取消息服务时才会设置MessageQueueListener对象；该对象是MQPullConsumerScheduleService类的内部类MessageQueueListenerImpl类的实例；</span><br><span class="line">             * &lt;p&gt;</span><br><span class="line">             * 3.2）调用该内部类的实例MessageQueueListener对象的messageQueueChanged方法；</span><br><span class="line">             *&#x2F;</span><br><span class="line">            case BROADCASTING: &#123;</span><br><span class="line">                Set&lt;MessageQueue&gt; mqSet &#x3D; this.topicSubscribeInfoTable.get(topic);</span><br><span class="line">                if (mqSet !&#x3D; null) &#123;</span><br><span class="line">                    boolean changed &#x3D; this.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);</span><br><span class="line">                    if (changed) &#123;</span><br><span class="line">                        this.messageQueueChanged(topic, mqSet, mqSet);</span><br><span class="line">                        log.info(&quot;messageQueueChanged &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;,</span><br><span class="line">                                consumerGroup,</span><br><span class="line">                                topic,</span><br><span class="line">                                mqSet,</span><br><span class="line">                                mqSet);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    log.warn(&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;, consumerGroup, topic);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 检查RebalanceImpl.messageModel变量，若等于CLUSTERING，则执行RebalanceImpl. rebalanceByTopic (String topic)方法中的集群模式下的逻辑，该方法的主要目的是首先为topic分配MessageQueue集合，</span><br><span class="line">             然后为集合中的每个MessageQueue对象创建ProcessQueue对象，最后对于PUSH模式将拉取消息的请求放入服务线程（PullMessageService）中。</span><br><span class="line">             1、以入参topic值从RebalanceImpl.topicSubscribeInfoTable: ConcurrentHashMap&lt;String&#x2F;* topic , Set&lt;MessageQueue&gt;&gt;变量中获取对应的MessageQueue集合（命名为mqSet）；</span><br><span class="line">             </span><br><span class="line">             2、获取topic的Broker地址。以入参topic值从MQClientInstance.topicRouteTable:ConcurrentHashMap&lt;String&#x2F;* Topic,TopicRouteData&gt;变量中获取对应的TopicRouteData对象，</span><br><span class="line">             然后取该TopicRouteData对象的brokerDatas:List&lt;BrokerData&gt;集合；若该集合为空则直接返回null；否则若该集合不为空，则取第一个BrokerData对象，</span><br><span class="line">             该对象的brokerAddrs: HashMap&lt;Long&#x2F;* brokerId , String&#x2F;* broker address &gt;变量中获取brokerId&#x3D;0的Broker地址（即主用Broker），若没有主用Broker则获取备用Broker地址；</span><br><span class="line">             </span><br><span class="line">             3、若上一步获取的Broker地址为空，则调用MQClientInstance. updateTopicRouteInfoFromNameServer方法从NameServer获取之后再按第2步的方法查找topic对应的Broker地址；循环执行直到找到Broker地址为止；</span><br><span class="line">             </span><br><span class="line">             4、以consumerGroup为参数向该Broker发送GET_CONSUMER_LIST_BY_GROUP请求码，获取以该consumerGroup为名的ClientId集合；在Broker收到请求之后，从ConsumerManager.consumerTable中获取ConsumerGroupInfo对象，</span><br><span class="line">             然后遍历该对象的channelInfoTable集合，将集合的每个ClientChannelInfo对象的clientId变量值作为ClientId集合；</span><br><span class="line">             </span><br><span class="line">             5、若第1步的MessageQueue集合（名为mqSet）和上一步的ClientId集合都不为null则继续进行下面操作，否则直接退出该方法；</span><br><span class="line">             </span><br><span class="line">             6、则调用RebalanceImpl. allocateMessageQueueStrategy.allocate (String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll, List&lt;String&gt; cidAll)为</span><br><span class="line">             当前Consumer分配应该消费的MessageQueue集合队列（命名allocateResultSet）；有四种分配策略，包括平均分配（AVG）、AVG_BY_CIRCLE 、CONFIG 、MACHINE_ROOM，默认为AllocateMessageQueueAveragely分配策略；</span><br><span class="line">             </span><br><span class="line">             6、以topic和上一步分配的MessageQueue集合（名为allocateResultSet）为参数调用RebalanceImpl. updateProcessQueueTableInRebalance (String topic, Set&lt;MessageQueue&gt; mqSet)方法，</span><br><span class="line">             该方法是对每个MessageQueue创建一个ProcessQueue对象并存入RebalanceImpl.processQueueTable队列中，然后对于PUSH模式下向后台线程放入拉取消息的请求对象，最后一个标记位表示是否对RebalanceImpl.processQueueTable列表有修改，</span><br><span class="line">             若有则返回true；（详见5.3.3小节）</span><br><span class="line">             </span><br><span class="line">             7、若上一步的返回结果为true（即RebalanceImpl.processQueueTable列表有记录变化时），则调用RebalanceImpl.messageQueueChanged(String topic, Set&lt;MessageQueue&gt; mqAll,</span><br><span class="line">              Set&lt;MessageQueue&gt; mqDivided)方法，其中mqAll为第1步的MessageQueue集合（名为mqSet），mqDivided为第6步的MessageQueue集合（名为allocateResultSet）。对于PUSH模式下面没有相应的处理逻辑，即messageQueueChanged方法为空；对于PULL模式下会调用RebalancePullImpl对象的messageQueueChanged方法，此方法的目的是对于采用了计划消息拉取服务的应用来说，当Consumer订阅的MessageQueue有变动或者或者ProcessQueue有更新时触发消息拉取动作，大致逻辑如下：</span><br><span class="line">             7.1）获取DefaultMQPullConsumer.messageQueueListener变量的值，该变量只有在应用层使用MQPullConsumerScheduleService类来进行计划拉取消息服务时才会设置MessageQueueListener对象；该对象是MQPullConsumerScheduleService类的内部类MessageQueueListenerImpl类的实例；</span><br><span class="line">             7.2）调用该内部类的实例MessageQueueListener对象的messageQueueChanged方法；</span><br><span class="line">             *&#x2F;</span><br><span class="line">            case CLUSTERING: &#123;</span><br><span class="line">                Set&lt;MessageQueue&gt; mqSet &#x3D; this.topicSubscribeInfoTable.get(topic);</span><br><span class="line">                List&lt;String&gt; cidAll &#x3D; this.mQClientFactory.findConsumerIdList(topic, consumerGroup);</span><br><span class="line">                if (null &#x3D;&#x3D; mqSet) &#123;</span><br><span class="line">                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                        log.warn(&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;, consumerGroup, topic);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (null &#x3D;&#x3D; cidAll) &#123;</span><br><span class="line">                    log.warn(&quot;doRebalance, &#123;&#125; &#123;&#125;, get consumer id list failed&quot;, consumerGroup, topic);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (mqSet !&#x3D; null &amp;&amp; cidAll !&#x3D; null) &#123;</span><br><span class="line">                    List&lt;MessageQueue&gt; mqAll &#x3D; new ArrayList&lt;MessageQueue&gt;();</span><br><span class="line">                    mqAll.addAll(mqSet);</span><br><span class="line"></span><br><span class="line">                    Collections.sort(mqAll);</span><br><span class="line">                    Collections.sort(cidAll);</span><br><span class="line"></span><br><span class="line">                    AllocateMessageQueueStrategy strategy &#x3D; this.allocateMessageQueueStrategy;</span><br><span class="line"></span><br><span class="line">                    List&lt;MessageQueue&gt; allocateResult &#x3D; null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        allocateResult &#x3D; strategy.allocate(</span><br><span class="line">                                this.consumerGroup,</span><br><span class="line">                                this.mQClientFactory.getClientId(),</span><br><span class="line">                                mqAll,</span><br><span class="line">                                cidAll);</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        log.error(&quot;AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName&#x3D;&#123;&#125;&quot;, strategy.getName(),</span><br><span class="line">                                e);</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Set&lt;MessageQueue&gt; allocateResultSet &#x3D; new HashSet&lt;MessageQueue&gt;();</span><br><span class="line">                    if (allocateResult !&#x3D; null) &#123;</span><br><span class="line">                        allocateResultSet.addAll(allocateResult);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    boolean changed &#x3D; this.updateProcessQueueTableInRebalance(topic, allocateResultSet, isOrder);</span><br><span class="line">                    if (changed) &#123;</span><br><span class="line">                        log.info(</span><br><span class="line">                                &quot;rebalanced result changed. allocateMessageQueueStrategyName&#x3D;&#123;&#125;, group&#x3D;&#123;&#125;, topic&#x3D;&#123;&#125;, clientId&#x3D;&#123;&#125;, mqAllSize&#x3D;&#123;&#125;, cidAllSize&#x3D;&#123;&#125;, rebalanceResultSize&#x3D;&#123;&#125;, rebalanceResultSet&#x3D;&#123;&#125;&quot;,</span><br><span class="line">                                strategy.getName(), consumerGroup, topic, this.mQClientFactory.getClientId(), mqSet.size(), cidAll.size(),</span><br><span class="line">                                allocateResultSet.size(), allocateResultSet);</span><br><span class="line">                        this.messageQueueChanged(topic, mqSet, allocateResultSet);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springboot打包外部依赖</title>
    <url>/2019/08/14/springboot%E6%89%93%E5%8C%85%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;includeSystemScope&gt;true&lt;&#x2F;includeSystemScope&gt;</span><br><span class="line">      &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">  &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>skywalking集群</title>
    <url>/2019/10/24/skywalking%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="集群作用"><a href="#集群作用" class="headerlink" title="集群作用"></a>集群作用</h3><ul>
<li>zookeeper协调多个collector</li>
<li>es集群收集数据<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">  <span class="comment"># Please check your ZooKeeper is 3.5+, However, it is also compatible with ZooKeeper 3.4.x. Replace the ZooKeeper 3.5+</span></span><br><span class="line">  <span class="comment"># library the oap-libs folder with your ZooKeeper 3.4.x library.</span></span><br><span class="line"><span class="comment">#zookeeper集群 多个逗号隔开</span></span><br><span class="line"><span class="comment">#  zookeeper:</span></span><br><span class="line"><span class="comment">#    nameSpace: $&#123;SW_NAMESPACE:""&#125;</span></span><br><span class="line"><span class="comment">#    hostPort: $&#123;SW_CLUSTER_ZK_HOST_PORT:localhost:2181&#125;</span></span><br><span class="line"><span class="comment">#    #Retry Policy</span></span><br><span class="line"><span class="comment">#    baseSleepTimeMs: $&#123;SW_CLUSTER_ZK_SLEEP_TIME:1000&#125; # initial amount of time to wait between retries</span></span><br><span class="line"><span class="comment">#    maxRetries: $&#123;SW_CLUSTER_ZK_MAX_RETRIES:3&#125; # max number of times to retry</span></span><br><span class="line"><span class="comment">#    # Enable ACL</span></span><br><span class="line"><span class="comment">#    enableACL: $&#123;SW_ZK_ENABLE_ACL:false&#125; # disable ACL in default</span></span><br><span class="line"><span class="comment">#    schema: $&#123;SW_ZK_SCHEMA:digest&#125; # only support digest schema</span></span><br><span class="line"><span class="comment">#    expression: $&#123;SW_ZK_EXPRESSION:skywalking:skywalking&#125;</span></span><br><span class="line"><span class="comment">#  kubernetes:</span></span><br><span class="line"><span class="comment">#    watchTimeoutSeconds: $&#123;SW_CLUSTER_K8S_WATCH_TIMEOUT:60&#125;</span></span><br><span class="line"><span class="comment">#    namespace: $&#123;SW_CLUSTER_K8S_NAMESPACE:default&#125;</span></span><br><span class="line"><span class="comment">#    labelSelector: $&#123;SW_CLUSTER_K8S_LABEL:app=collector,release=skywalking&#125;</span></span><br><span class="line"><span class="comment">#    uidEnvName: $&#123;SW_CLUSTER_K8S_UID:SKYWALKING_COLLECTOR_UID&#125;</span></span><br><span class="line"><span class="comment">#  consul:</span></span><br><span class="line"><span class="comment">#    serviceName: $&#123;SW_SERVICE_NAME:"SkyWalking_OAP_Cluster"&#125;</span></span><br><span class="line"><span class="comment">#     Consul cluster nodes, example: 10.0.0.1:8500,10.0.0.2:8500,10.0.0.3:8500</span></span><br><span class="line"><span class="comment">#    hostPort: $&#123;SW_CLUSTER_CONSUL_HOST_PORT:localhost:8500&#125;</span></span><br><span class="line"><span class="comment">#  nacos:</span></span><br><span class="line"><span class="comment">#    serviceName: $&#123;SW_SERVICE_NAME:"SkyWalking_OAP_Cluster"&#125;</span></span><br><span class="line"><span class="comment">#    hostPort: $&#123;SW_CLUSTER_NACOS_HOST_PORT:localhost:8848&#125;</span></span><br><span class="line"><span class="comment">#  etcd:</span></span><br><span class="line"><span class="comment">#    serviceName: $&#123;SW_SERVICE_NAME:"SkyWalking_OAP_Cluster"&#125;</span></span><br><span class="line"><span class="comment">#     etcd cluster nodes, example: 10.0.0.1:2379,10.0.0.2:2379,10.0.0.3:2379</span></span><br><span class="line"><span class="comment">#    hostPort: $&#123;SW_CLUSTER_ETCD_HOST_PORT:localhost:2379&#125;</span></span><br><span class="line"><span class="attr">core:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class="line">    <span class="comment"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class="line">    <span class="comment"># Aggregator: Level 2 aggregate</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line">    <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">    <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line">    <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line">    <span class="attr">downsampling:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Hour</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Day</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Month</span></span><br><span class="line">    <span class="comment"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span></span><br><span class="line">    <span class="attr">enableDataKeeperExecutor:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true&#125;</span> <span class="comment"># Turn it off then automatically metrics data delete will be close.</span></span><br><span class="line">    <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_CORE_RECORD_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">minuteMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MINUTE_METRIC_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">hourMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_HOUR_METRIC_DATA_TTL:36&#125;</span> <span class="comment"># Unit is hour</span></span><br><span class="line">    <span class="attr">dayMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_DAY_METRIC_DATA_TTL:45&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">    <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MONTH_METRIC_DATA_TTL:18&#125;</span> <span class="comment"># Unit is month</span></span><br><span class="line">    <span class="comment"># Cache metric data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,</span></span><br><span class="line">    <span class="comment"># the metrics may not be accurate within that minute.</span></span><br><span class="line">    <span class="attr">enableDatabaseSession:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATABASE_SESSION:true&#125;</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="comment"># es集群</span></span><br><span class="line"><span class="comment">#  elasticsearch:</span></span><br><span class="line"><span class="comment">#    nameSpace: $&#123;SW_NAMESPACE:""&#125;</span></span><br><span class="line"><span class="comment">#    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class="line"><span class="comment">#    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:"http"&#125;</span></span><br><span class="line"><span class="comment">#    trustStorePath: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:"../es_keystore.jks"&#125;</span></span><br><span class="line"><span class="comment">#    trustStorePass: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:""&#125;</span></span><br><span class="line"><span class="comment">#    user: $&#123;SW_ES_USER:""&#125;</span></span><br><span class="line"><span class="comment">#    password: $&#123;SW_ES_PASSWORD:""&#125;</span></span><br><span class="line"><span class="comment">#    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span></span><br><span class="line"><span class="comment">#    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span></span><br><span class="line"><span class="comment">#    # Those data TTL settings will override the same settings in core module.</span></span><br><span class="line"><span class="comment">#    recordDataTTL: $&#123;SW_STORAGE_ES_RECORD_DATA_TTL:7&#125; # Unit is day</span></span><br><span class="line"><span class="comment">#    otherMetricsDataTTL: $&#123;SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:45&#125; # Unit is day</span></span><br><span class="line"><span class="comment">#    monthMetricsDataTTL: $&#123;SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:18&#125; # Unit is month</span></span><br><span class="line"><span class="comment">#    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span></span><br><span class="line"><span class="comment">#    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125; # Execute the bulk every 1000 requests</span></span><br><span class="line"><span class="comment">#    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line"><span class="comment">#    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span></span><br><span class="line"><span class="comment">#    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line"><span class="comment">#    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">$&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_STORAGE_H2_USER:sa&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line"><span class="comment">#  mysql:</span></span><br><span class="line"><span class="comment">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line"><span class="attr">receiver-sharing-server:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-register:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-trace:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_PATH:../trace-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line">    <span class="attr">sampleRate:</span> <span class="string">$&#123;SW_TRACE_SAMPLE_RATE:10000&#125;</span> <span class="comment"># The sample rate precision is 1/10000. 10000 means 100% sample in default.</span></span><br><span class="line">    <span class="attr">slowDBAccessThreshold:</span> <span class="string">$&#123;SW_SLOW_DB_THRESHOLD:default:200,mongodb:100&#125;</span> <span class="comment"># The slow database access thresholds. Unit ms.</span></span><br><span class="line"><span class="attr">receiver-jvm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-clr:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">service-mesh:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_PATH:../mesh-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line"><span class="attr">istio-telemetry:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">envoy-metric:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="comment">#    alsHTTPAnalysis: $&#123;SW_ENVOY_METRIC_ALS_HTTP_ANALYSIS:k8s-mesh&#125;</span></span><br><span class="line"><span class="comment">#receiver_zipkin:</span></span><br><span class="line"><span class="comment">#  default:</span></span><br><span class="line"><span class="comment">#    host: $&#123;SW_RECEIVER_ZIPKIN_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="comment">#    port: $&#123;SW_RECEIVER_ZIPKIN_PORT:9411&#125;</span></span><br><span class="line"><span class="comment">#    contextPath: $&#123;SW_RECEIVER_ZIPKIN_CONTEXT_PATH:/&#125;</span></span><br><span class="line"><span class="attr">query:</span></span><br><span class="line">  <span class="attr">graphql:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;SW_QUERY_GRAPHQL_PATH:/graphql&#125;</span></span><br><span class="line"><span class="attr">alarm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">telemetry:</span></span><br><span class="line">  <span class="attr">none:</span></span><br><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">none:</span></span><br><span class="line"><span class="comment">#  nacos:</span></span><br><span class="line"><span class="comment">#    # Nacos Server Host</span></span><br><span class="line"><span class="comment">#    serverAddr: 127.0.0.1</span></span><br><span class="line"><span class="comment">#    # Nacos Server Port</span></span><br><span class="line"><span class="comment">#    port: 8848</span></span><br><span class="line"><span class="comment">#    # Nacos Configuration Group</span></span><br><span class="line"><span class="comment">#    group: 'skywalking'</span></span><br><span class="line"><span class="comment">#    # Unit seconds, sync period. Default fetch every 60 seconds.</span></span><br><span class="line"><span class="comment">#    period : 60</span></span><br><span class="line"><span class="comment">#    # the name of current cluster, set the name if you want to upstream system known.</span></span><br><span class="line"><span class="comment">#    clusterName: "default"</span></span><br><span class="line"><span class="comment">#  zookeeper:</span></span><br><span class="line"><span class="comment">#    period : 60 # Unit seconds, sync period. Default fetch every 60 seconds.</span></span><br><span class="line"><span class="comment">#    nameSpace: /default</span></span><br><span class="line"><span class="comment">#    hostPort: localhost:2181</span></span><br><span class="line"><span class="comment">#    #Retry Policy</span></span><br><span class="line"><span class="comment">#    baseSleepTimeMs: 1000 # initial amount of time to wait between retries</span></span><br><span class="line"><span class="comment">#    maxRetries: 3 # max number of times to retry</span></span><br><span class="line"><span class="comment">#  etcd:</span></span><br><span class="line"><span class="comment">#    period : 60 # Unit seconds, sync period. Default fetch every 60 seconds.</span></span><br><span class="line"><span class="comment">#    group :  'skywalking'</span></span><br><span class="line"><span class="comment">#    serverAddr: localhost:2379</span></span><br><span class="line"><span class="comment">#    clusterName: "default"</span></span><br><span class="line"><span class="comment">#exporter:</span></span><br><span class="line"><span class="comment">#  grpc:</span></span><br><span class="line"><span class="comment">#    targetHost: $&#123;SW_EXPORTER_GRPC_HOST:127.0.0.1&#125;</span></span><br><span class="line"><span class="comment">#    targetPort: $&#123;SW_EXPORTER_GRPC_PORT:9870&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="webapp-yml"><a href="#webapp-yml" class="headerlink" title="webapp.yml"></a>webapp.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">collector:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/graphql</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># Point to all backend's restHost:restPort, split by ,</span></span><br><span class="line">    <span class="comment">#配置多个skywalking收集数据</span></span><br><span class="line">    <span class="attr">listOfServers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:12800</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>spring-security 拦截笔记</title>
    <url>/2019/05/26/spring-security%E6%8B%A6%E6%88%AA%E5%99%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/05/26/spring-security%E6%8B%A6%E6%88%AA%E5%99%A8%E7%AC%94%E8%AE%B0/spring-seucrity%E6%8B%A6%E6%88%AA%E5%99%A8.png" class="" title="spring-security拦截器">


<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;</span><br><span class="line">import org.springframework.web.filter.GenericFilterBean;</span><br><span class="line"></span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author huangyangcong</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)</span><br><span class="line">public class WebMvcConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public UserDetailsService userDetails() &#123;</span><br><span class="line">        return username -&gt; new User(&quot;user&quot;, &quot;&#123;noop&#125;password&quot;, Collections.singleton(new SimpleGrantedAuthority(&quot;ROLE_US&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean&lt;Test1&gt; test1() &#123;</span><br><span class="line">        FilterRegistrationBean&lt;Test1&gt; test1 &#x3D; new FilterRegistrationBean&lt;&gt;(new Test1());</span><br><span class="line">        test1.setOrder(305);</span><br><span class="line">        return test1;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(&quot;&#x2F;demo1&quot;, &quot;demo2&quot;).permitAll().anyRequest().authenticated();</span><br><span class="line">        http.addFilterBefore(new Test2(), AbstractPreAuthenticatedProcessingFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring().mvcMatchers(&quot;aaa&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Order(300)</span><br><span class="line">    class Test1 extends GenericFilterBean &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Order(301)</span><br><span class="line">    class Test2 extends GenericFilterBean &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>spring中filter保存在ApplicationFilterChain中，spring-security拦截器保存在org.springframework.web.filter.DelegatingFilterProxy中delegate(org.springframework.security.web.FilterChainProxy)</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring-security</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>seata源码解析</title>
    <url>/2019/07/05/seata%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>Fescar API 分为两大类：High-Level API 和 Low-Level API ：</p>
<ul>
<li><strong>High-Level API</strong> ：用于事务边界定义、控制及事务状态查询。</li>
<li><strong>Low-Level API</strong> ：用于控制事务上下文的传播。</li>
</ul>
<h1 id="2-High-Level-API"><a href="#2-High-Level-API" class="headerlink" title="2. High-Level API"></a>2. High-Level API</h1><h2 id="2-1-GlobalTransaction"><a href="#2-1-GlobalTransaction" class="headerlink" title="2.1 GlobalTransaction"></a>2.1 GlobalTransaction</h2><p>全局事务：包括开启事务、提交、回滚、获取当前状态等方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlobalTransaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启一个全局事务（使用默认的事务名和超时时间）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启一个全局事务，并指定超时时间（使用默认的事务名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启一个全局事务，并指定事务名和超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">int</span> timeout, String name)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取事务的当前状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">GlobalStatus <span class="title">getStatus</span><span class="params">()</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取事务的 XID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getXid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-GlobalTransactionContext"><a href="#2-2-GlobalTransactionContext" class="headerlink" title="2.2 GlobalTransactionContext"></a>2.2 GlobalTransactionContext</h2><p>GlobalTransaction 实例的获取需要通过 GlobalTransactionContext：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前的全局事务实例，如果没有则创建一个新的实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlobalTransaction <span class="title">getCurrentOrCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GlobalTransaction tx = getCurrent();</span><br><span class="line">    <span class="keyword">if</span> (tx == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> createNew();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重新载入给定 XID 的全局事务实例，这个实例不允许执行开启事务的操作。</span></span><br><span class="line"><span class="comment"> * 这个 API 通常用于失败的事务的后续集中处理。</span></span><br><span class="line"><span class="comment"> * 比如：全局提交超时，后续集中处理通过重新载入该实例，通过实例方法获取事务当前状态，并根据状态判断是否需要重试全局提交操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlobalTransaction <span class="title">reload</span><span class="params">(String xid)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">    GlobalTransaction tx = <span class="keyword">new</span> DefaultGlobalTransaction(xid, GlobalStatus.UnKnown, GlobalTransactionRole.Launcher) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">int</span> timeout, String name)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Never BEGIN on a RELOADED GlobalTransaction. "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> tx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-TransactionalTemplate"><a href="#2-3-TransactionalTemplate" class="headerlink" title="2.3 TransactionalTemplate"></a>2.3 TransactionalTemplate</h2><p>事务化模板：通过上述 GlobalTransaction 和 GlobalTransactionContext API 把一个业务服务的调用包装成带有分布式事务支持的服务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(TransactionalExecutor business)</span> <span class="keyword">throws</span> TransactionalExecutor.ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取当前全局事务实例或创建新的实例</span></span><br><span class="line">        GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 开启全局事务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tx.begin(business.timeout(), business.name());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (TransactionException txe) &#123;</span><br><span class="line">            <span class="comment">// 2.1 开启失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransactionalExecutor.ExecutionException(tx, txe,</span><br><span class="line">                TransactionalExecutor.Code.BeginFailure);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 调用业务服务</span></span><br><span class="line">            rs = business.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务调用本身的异常</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 全局回滚</span></span><br><span class="line">                tx.rollback();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3.1 全局回滚成功：抛出原始业务异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (TransactionException txe) &#123;</span><br><span class="line">                <span class="comment">// 3.2 全局回滚失败：</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransactionalExecutor.ExecutionException(tx, txe,</span><br><span class="line">                    TransactionalExecutor.Code.RollbackFailure, ex);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 全局提交</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tx.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (TransactionException txe) &#123;</span><br><span class="line">            <span class="comment">// 4.1 全局提交失败：</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransactionalExecutor.ExecutionException(tx, txe,</span><br><span class="line">                TransactionalExecutor.Code.CommitFailure);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模板方法执行的异常：ExecutionException</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ExecutionException extends Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 发生异常的事务实例</span><br><span class="line">    private GlobalTransaction transaction;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 异常编码：</span><br><span class="line">    &#x2F;&#x2F; BeginFailure（开启事务失败）</span><br><span class="line">    &#x2F;&#x2F; CommitFailure（全局提交失败）</span><br><span class="line">    &#x2F;&#x2F; RollbackFailure（全局回滚失败）</span><br><span class="line">    &#x2F;&#x2F; RollbackDone（全局回滚成功）</span><br><span class="line">    private Code code;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 触发回滚的业务原始异常</span><br><span class="line">    private Throwable originalException;</span><br></pre></td></tr></table></figure>

<p>外层调用逻辑 try-catch 这个异常，根据异常编码进行处理：</p>
<ul>
<li><strong>BeginFailure</strong> （开启事务失败）：getCause() 得到开启事务失败的框架异常，getOriginalException() 为空。</li>
<li><strong>CommitFailure</strong> （全局提交失败）：getCause() 得到开启事务失败的框架异常，getOriginalException() 为空。</li>
<li><strong>RollbackFailure</strong> （全局回滚失败）：getCause() 得到开启事务失败的框架异常，getOriginalException() 业务应用的原始异常。</li>
<li><strong>RollbackDone</strong> （全局回滚成功）：getCause() 为空，getOriginalException() 业务应用的原始异常。</li>
</ul>
<h1 id="3-Low-Level-API"><a href="#3-Low-Level-API" class="headerlink" title="3. Low-Level API"></a>3. Low-Level API</h1><h2 id="3-1-RootContext"><a href="#3-1-RootContext" class="headerlink" title="3.1 RootContext"></a>3.1 RootContext</h2><p>事务的根上下文：负责在应用的运行时，维护 XID 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到当前应用运行时的全局事务 XID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getXID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CONTEXT_HOLDER.get(KEY_XID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将全局事务 XID 绑定到当前应用的运行时中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(String xid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"bind "</span> + xid);</span><br><span class="line">    &#125;</span><br><span class="line">    CONTEXT_HOLDER.put(KEY_XID, xid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将全局事务 XID 从当前应用的运行时中解除绑定，同时将 XID 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">unbind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String xid = CONTEXT_HOLDER.remove(KEY_XID);</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"unbind "</span> + xid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前应用的运行时是否处于全局事务的上下文中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inGlobalTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CONTEXT_HOLDER.get(KEY_XID) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>High-Level API 的实现都是基于 RootContext 中维护的 XID 来做的。</p>
<p>应用的当前运行的操作是否在一个全局事务的上下文中，就是看 RootContext 中是否有 XID。</p>
<p>RootContext 的默认实现是基于 ThreadLocal 的，即 XID 保存在当前线程上下文中。</p>
<p>Low-Level API 的两个典型的应用场景：</p>
<h3 id="1-远程调用事务上下文的传播"><a href="#1-远程调用事务上下文的传播" class="headerlink" title="1. 远程调用事务上下文的传播"></a>1. 远程调用事务上下文的传播</h3><p>远程调用前获取当前 XID：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String xid = RootContext.getXID();</span><br></pre></td></tr></table></figure>

<p>远程调用过程把 XID 也传递到服务提供方，在执行服务提供方的业务逻辑前，把 XID 绑定到当前应用的运行时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RootContext.bind(rpcXid);</span><br></pre></td></tr></table></figure>

<h3 id="2-事务的暂停和恢复"><a href="#2-事务的暂停和恢复" class="headerlink" title="2. 事务的暂停和恢复"></a>2. 事务的暂停和恢复</h3><p>在一个全局事务中，如果需要某些业务逻辑不在全局事务的管辖范围内，则在调用前，把 XID 解绑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String unbindXid = RootContext.unbind();</span><br></pre></td></tr></table></figure>
<p>待相关业务逻辑执行完成，再把 XID 绑定回去，即可实现全局事务的恢复：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RootContext.bind(unbindXid);</span><br></pre></td></tr></table></figure>
<ul>
<li>beginTransaction 主要是在rm中注册xid绑定到当前线程当中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">(TransactionInfo txInfo, GlobalTransaction tx)</span> <span class="keyword">throws</span> TransactionalExecutor.ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        triggerBeforeBegin();</span><br><span class="line">        tx.begin(txInfo.getTimeOut(), txInfo.getName());</span><br><span class="line">        triggerAfterBegin();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransactionException txe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransactionalExecutor.ExecutionException(tx, txe,</span><br><span class="line">            TransactionalExecutor.Code.BeginFailure);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">int</span> timeout, String name)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (role != GlobalTransactionRole.Launcher) &#123;</span><br><span class="line">        check();</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">            LOGGER.debug(<span class="string">"Ignore Begin(): just involved in global transaction ["</span> + xid + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (RootContext.getXID() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    xid = transactionManager.begin(<span class="keyword">null</span>, <span class="keyword">null</span>, name, timeout);</span><br><span class="line">    status = GlobalStatus.Begin;</span><br><span class="line">    RootContext.bind(xid);</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Begin new global transaction ["</span> + xid + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>business.execute();执行业务代码子代码逻辑执行时通过DataSourceProxy动态代理数据源，<br>PreparedStatementProxy，StatementProxy，主要的代码都集中在ExecuteTemplate<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, S extends Statement&gt; <span class="function">T <span class="title">execute</span><span class="params">(SQLRecognizer sqlRecognizer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 StatementProxy&lt;S&gt; statementProxy,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 StatementCallback&lt;T, S&gt; statementCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 Object... args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//不是全局事务且不需要全局锁</span></span><br><span class="line">    <span class="keyword">if</span> (!RootContext.inGlobalTransaction() &amp;&amp; !RootContext.requireGlobalLock()) &#123;</span><br><span class="line">        <span class="comment">// Just work as original statement</span></span><br><span class="line">        <span class="keyword">return</span> statementCallback.execute(statementProxy.getTargetStatement(), args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建sql记录</span></span><br><span class="line">    <span class="keyword">if</span> (sqlRecognizer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sqlRecognizer = SQLVisitorFactory.get(</span><br><span class="line">                statementProxy.getTargetSQL(),</span><br><span class="line">                statementProxy.getConnectionProxy().getDbType());</span><br><span class="line">    &#125;</span><br><span class="line">    Executor&lt;T&gt; executor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (sqlRecognizer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> PlainExecutor&lt;T, S&gt;(statementProxy, statementCallback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sqlRecognizer.getSQLType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> INSERT:</span><br><span class="line">                executor = <span class="keyword">new</span> InsertExecutor&lt;T, S&gt;(statementProxy, statementCallback, sqlRecognizer);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UPDATE:</span><br><span class="line">                executor = <span class="keyword">new</span> UpdateExecutor&lt;T, S&gt;(statementProxy, statementCallback, sqlRecognizer);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DELETE:</span><br><span class="line">                executor = <span class="keyword">new</span> DeleteExecutor&lt;T, S&gt;(statementProxy, statementCallback, sqlRecognizer);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SELECT_FOR_UPDATE:</span><br><span class="line">                executor = <span class="keyword">new</span> SelectForUpdateExecutor&lt;T, S&gt;(statementProxy, statementCallback, sqlRecognizer);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                executor = <span class="keyword">new</span> PlainExecutor&lt;T, S&gt;(statementProxy, statementCallback);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rs = executor.execute(args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(ex <span class="keyword">instanceof</span> SQLException)) &#123;</span><br><span class="line">            <span class="comment">// Turn other exception into SQLException</span></span><br><span class="line">            ex = <span class="keyword">new</span> SQLException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> (SQLException)ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
生成sql日志记录<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLVisitorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get sql recognizer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql    the sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dbType the db type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the sql recognizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SQLRecognizer <span class="title">get</span><span class="params">(String sql, String dbType)</span> </span>&#123;</span><br><span class="line">    List&lt;SQLStatement&gt; asts = SQLUtils.parseStatements(sql, dbType);</span><br><span class="line">    <span class="keyword">if</span> (asts == <span class="keyword">null</span> || asts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unsupported SQL: "</span> + sql);</span><br><span class="line">    &#125;</span><br><span class="line">    SQLRecognizer recognizer = <span class="keyword">null</span>;</span><br><span class="line">    SQLStatement ast = asts.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (JdbcConstants.MYSQL.equalsIgnoreCase(dbType)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ast <span class="keyword">instanceof</span> SQLInsertStatement) &#123;</span><br><span class="line">            <span class="comment">//插入日志</span></span><br><span class="line">            recognizer = <span class="keyword">new</span> MySQLInsertRecognizer(sql, ast);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ast <span class="keyword">instanceof</span> SQLUpdateStatement) &#123;</span><br><span class="line">            <span class="comment">//更新日志</span></span><br><span class="line">            recognizer = <span class="keyword">new</span> MySQLUpdateRecognizer(sql, ast);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ast <span class="keyword">instanceof</span> SQLDeleteStatement) &#123;</span><br><span class="line">            <span class="comment">//删除日志</span></span><br><span class="line">            recognizer = <span class="keyword">new</span> MySQLDeleteRecognizer(sql, ast);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ast <span class="keyword">instanceof</span> SQLSelectStatement) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((SQLSelectStatement) ast).getSelect().getFirstQueryBlock().isForUpdate()) &#123;</span><br><span class="line">                recognizer = <span class="keyword">new</span> MySQLSelectForUpdateRecognizer(sql, ast);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Just support MySQL by now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> recognizer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>seata</category>
      </categories>
      <tags>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloudzuul性能调优</title>
    <url>/2019/08/16/springcloudzuul%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h3 id="zuul调优"><a href="#zuul调优" class="headerlink" title="zuul调优"></a>zuul调优</h3><h4 id="zull懒加载"><a href="#zull懒加载" class="headerlink" title="zull懒加载"></a>zull懒加载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ribbon:</span><br><span class="line">    eager-load:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure>
<p>Zuul默认是使用信号量隔离，并且信号量的大小是100，请求的并发线程超过100就会报错<br>可以调大该信号量的最大值来提高性能，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  semaphore:</span><br><span class="line">    max-semaphores: 5000</span><br></pre></td></tr></table></figure>
<p>也可以改为使用线程隔离，调大hystrix线程池线程大小，该线程池默认10个线程，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ribbonIsolationStrategy: THREAD</span><br><span class="line">hystrix:</span><br><span class="line">  threadpool:</span><br><span class="line">    default:</span><br><span class="line">      coreSize: 100</span><br><span class="line">      maximumSize: 400</span><br><span class="line">      allowMaximumSizeToDivergeFromCoreSize: true</span><br><span class="line">      maxQueueSize: -1</span><br></pre></td></tr></table></figure>
<p>spring-boot-tomcat 优化参数：<br>主要只有2个，最大和最小worker线程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tomcat:</span><br><span class="line">  min-spare-threads: 20 #线程池内线程数下限，默认值为25</span><br><span class="line">  max-connections: 10000</span><br><span class="line">  max-threads: 10000</span><br><span class="line">  # max-http-post-size: 2097152</span><br><span class="line">  max-http-post-size: 0 #取消post参数大小限制，默认为2M</span><br><span class="line">  max-http-header-size: 2097152</span><br><span class="line">  background-processor-delay: 10 #Engine及其部分子组件（Host、Context）调用backgroundProcessor方法的时间间隔。</span><br><span class="line">  #backgroundProcessorDelay为负，将不调用backgroundProcessor，backgroundProcessorDelay的默认值为10</span><br><span class="line">  accept-count: 1000 #Connector请求队列的上限, 默认为100。当该Connector的请求队列超过acceptCount时，将拒绝接收请求</span><br><span class="line">jetty: #Connector请求队列的上限, 默认为100。当该Connector的请求队列超过acceptCount时，将拒绝接收请求</span><br><span class="line">  acceptors:</span><br></pre></td></tr></table></figure>
<p>spring-boot-undertow 优化参数：<br>设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接,默认取CPU核心数量,最小值为2。</p>
<blockquote>
<p>ioThreads</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.max(Runtime.getRuntime().availableProcessors(), 2);</span><br><span class="line">spring-boot 参数：server.undertow.io-threads&#x3D;</span><br></pre></td></tr></table></figure>
<p>阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载，默认值为io-threads*8。</p>
<blockquote>
<p>worker-threads</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring-boot 参数：server.undertow.worker-threads&#x3D;</span><br></pre></td></tr></table></figure>

<h3 id="zuul-内置参数"><a href="#zuul-内置参数" class="headerlink" title="zuul 内置参数"></a>zuul 内置参数</h3><ul>
<li>zuul.host.maxTotalConnections<br>适用于ApacheHttpClient，如果是okhttp无效。每个服务的http客户端连接池最大连接，默认是200.</li>
<li>zuul.host.maxPerRouteConnections<br>适用于ApacheHttpClient，如果是okhttp无效。每个route可用的最大连接数，默认值是20。</li>
<li>zuul.semaphore.max-semaphores<br>Hystrix最大的并发请求execution.isolation.semaphore.maxConcurrentRequests，这个值并非TPS、QPS、RPS等都是相对值，指的是1秒时间窗口内的事务/查询/请求，semaphore.maxConcurrentRequests是一个绝对值，无时间窗口，相当于亚毫秒级的。当请求达到或超过该设置值后，其其余就会被拒绝。默认值是100<br>zuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量。</li>
</ul>
<p>zuul.host.maxTotalConnections=1000<br>zuul.host.maxPerRouteConnections=1000</p>
<h4 id="Hystrix隔离策略相关的参数"><a href="#Hystrix隔离策略相关的参数" class="headerlink" title="Hystrix隔离策略相关的参数"></a>Hystrix隔离策略相关的参数</h4><p>策略参数设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution.isolation.strategy&#x3D; THREAD|SEMAPHORE</span><br><span class="line">execution.isolation.thread.timeoutInMilliseconds</span><br><span class="line">建议设置这个参数，在Hystrix 1.4.0之前，semaphore-isolated隔离策略是不能超时的，从1.4.0开始semaphore-isolated也支持超时时间了。</span><br><span class="line">建议通过CommandKey设置不同微服务的超时时间,对于zuul而言，CommandKey就是service id：hystrix.command.[CommandKey].execution.isolation.thread.timeoutInMilliseconds</span><br><span class="line"></span><br><span class="line">execution.isolation.semaphore.maxConcurrentRequests</span><br><span class="line">这个值并非TPS、QPS、RPS等都是相对值，指的是1秒时间窗口内的事务&#x2F;查询&#x2F;请求，semaphore.maxConcurrentRequests是一个绝对值，无时间窗口，相当于亚毫秒级的，指任意时间点允许的并发数。当请求达到或超过该设置值后，其其余就会被拒绝。默认值是100。</span><br><span class="line"></span><br><span class="line">execution.timeout.enabled</span><br><span class="line">是否开启超时，默认是true，开启。</span><br><span class="line"></span><br><span class="line">execution.isolation.thread.interruptOnTimeout</span><br><span class="line">发生超时是是否中断线程，默认是true。</span><br><span class="line"></span><br><span class="line">execution.isolation.thread.interruptOnCancel</span><br><span class="line">取消时是否中断线程，默认是false。</span><br></pre></td></tr></table></figure>
<p>数据库连接错误<code>Got minus one from a read call</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show parameter processes</span><br><span class="line">show parameter sessions</span><br><span class="line">alter system set processes&#x3D;300 scope&#x3D;spfile;</span><br><span class="line">alter system set sessions&#x3D;335 scope&#x3D;spfile;</span><br><span class="line">关系</span><br><span class="line">sessions&#x3D;(1.1*process+5)</span><br><span class="line">重启Oracle</span><br><span class="line">1） 以oracle身份登录数据库，命令：su – oracle</span><br><span class="line">（2） 进入Sqlplus控制台，命令：sqlplus &#x2F;nolog</span><br><span class="line">（3） 以系统管理员登录，命令：connect &#x2F; as sysdba</span><br><span class="line">（4） 启动数据库，命令：startup</span><br><span class="line">（5） 如果是关闭数据库，命令：shutdown immediate</span><br><span class="line">（6） 退出sqlplus控制台，命令：exit</span><br><span class="line">（7） 进入监听器控制台，命令：lsnrctl</span><br><span class="line">（8） 启动监听器，命令：start</span><br><span class="line">（9） 退出监听器控制台，命令：exit</span><br><span class="line">（10） 重启数据库结束</span><br></pre></td></tr></table></figure>
<h4 id="配置调优"><a href="#配置调优" class="headerlink" title="配置调优"></a>配置调优</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.2、微服务应用</span><br><span class="line">　　当jmeter调整到每秒钟70个并发请求时，服务应用端的日志中出现了很多hystrix回滚，并且有很多HystrixRuntimeException。</span><br><span class="line"></span><br><span class="line">com.netflix.hystrix.exception.HystrixRuntimeException ... could not be queued for execution...</span><br><span class="line">　　原因：Hystrix请求线程池缺省为最大10个线程，在大量请求下，很容易超过这个数值，导致抛出异常。</span><br><span class="line"></span><br><span class="line">　　解决方法：在配置文件中修改线程池中的coreSize（properties方式的配置文件）</span><br><span class="line"></span><br><span class="line">hystrix.threadpool.default.coreSize&#x3D;500</span><br><span class="line">　　配置上测试后，客户端不再出现hystrix的异常了，但是并发请求数进一步提高到100以上后，依然会无法响应请求。</span><br><span class="line"></span><br><span class="line">1.3、zuul网关</span><br><span class="line">　　由于网关也配置使用了Hystrix，在并发请求过大时，也会抛出异常：</span><br><span class="line"></span><br><span class="line">com.netflix.hystrix.exception.HystrixRuntimeException: ggx-test short-circuited and no fallback available</span><br><span class="line">　　显示的异常时，具体的ggx-test服务系统短路并且没有熔断可用，但ggx-test系统还正在运行，所以问题出现在zuul网关上。</span><br><span class="line"></span><br><span class="line">　　① zuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量。</span><br><span class="line"></span><br><span class="line">zuul.host.maxTotalConnections&#x3D;1000</span><br><span class="line">zuul.host.maxPerRouteConnections&#x3D;1000</span><br><span class="line">　　② zuul使用Hystrix，而Hystrix有隔离策略： THREAD 以及 SEMAPHORE ，默认是 SEMAPHORE ，默认大小是100。请求的并发线程超过100就会报错。</span><br><span class="line"></span><br><span class="line">zuul.semaphore.max-semaphores&#x3D;5000</span><br><span class="line">　　配置完上述配置后，重新进行测试，在日志中不会出现错误了，但是并发请求超过100&#x2F;S时，系统挂起，不再响应请求。于是，排查各种可能后，想到了可能是数据库连接池的问题</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springmvc中HandlerMapping</title>
    <url>/2019/07/10/springmvc%E4%B8%ADHandlerMapping/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>springboot部署命令</title>
    <url>/2019/08/09/springboot%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">## java env</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># a(app)e(env)v(version)z(zip)p(pkg)</span><br><span class="line"># o(port)c(act)i(inc_tot)u(url)</span><br><span class="line"></span><br><span class="line">while getopts &quot;a:d:e:v:p:c:i:u:z&quot; opt</span><br><span class="line">do</span><br><span class="line">	case $opt in</span><br><span class="line">	a ) APP&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	d ) DAT&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	e ) ENV&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	v ) VER&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	p ) PKG&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	c ) ACT&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	i ) INC_TOT&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	u ) URL&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	z ) ZIP&#x3D;&quot;$OPTARG&quot;;;</span><br><span class="line">	? ) echo &quot;error&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	;;</span><br><span class="line">	esac</span><br><span class="line">done</span><br><span class="line">echo $APP $ENV $VER $ZIP $PKG $ACT $INC_TOT $URL</span><br><span class="line"></span><br><span class="line">#文件上传位置&quot;&#x2F;usr&#x2F;local&#x2F;mspp&#x2F;store&quot;&#x2F;$VER&#x2F;tmp</span><br><span class="line">#---&#x2F;usr&#x2F;local&#x2F;app&#x2F;store</span><br><span class="line">#	--mspp-jar</span><br><span class="line">#		--VERSION</span><br><span class="line">#			--now</span><br><span class="line">#			--old</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># app部署根目录</span><br><span class="line">APP_ROOT_HOME&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;app&quot;</span><br><span class="line">#nacos地址</span><br><span class="line">NACOS_ADDR&#x3D;&quot;node-140:8848&quot;</span><br><span class="line">#nacos命名空间</span><br><span class="line">NACOS_NAMESPACE&#x3D;&quot;d47fda1b-3578-4a1e-adc6-cc3c450f42f7&quot;</span><br><span class="line">#skywalking链路跟踪</span><br><span class="line">SKYWALKING_ADDR&#x3D;&quot;node-140:10800&quot;</span><br><span class="line">#分布式事务地址</span><br><span class="line">SEATA_ADDR&#x3D;&quot;node-140:8089&quot;</span><br><span class="line">#skywalking jar地址</span><br><span class="line">SKYWALKING_JAR&#x3D;$APP_ROOT_HOME&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar</span><br><span class="line">#工作环境</span><br><span class="line">PROFILE&#x3D;prod</span><br><span class="line"></span><br><span class="line">#当前时间</span><br><span class="line">CUR_DATE&#x3D;&#96;date +&quot;%Y-%m-%d-%H:%M:%S&quot;&#96;</span><br><span class="line"></span><br><span class="line"># app启动路径</span><br><span class="line">APP_HOME&#x3D;$APP_ROOT_HOME&#x2F;$APP</span><br><span class="line"># app版本存储文件夹</span><br><span class="line">LOCAL_ROOT_STORE&#x3D;$APP_ROOT_HOME&#x2F;store&#x2F;$APP</span><br><span class="line"># 当前版本存储路径</span><br><span class="line">LOCAL_VERSION_STORE&#x3D;$LOCAL_ROOT_STORE&#x2F;$VER</span><br><span class="line"># 当前版本存储文件</span><br><span class="line">NOW_VERSION_STORE&#x3D;$LOCAL_VERSION_STORE&#x2F;now</span><br><span class="line"># 旧版本存储文件</span><br><span class="line">OLD_VERSION_STORE&#x3D;$LOCAL_VERSION_STORE&#x2F;old</span><br><span class="line"># 获取应用的进程号，没有就返回0号。</span><br><span class="line">psid&#x3D;&quot;0&quot;</span><br><span class="line">pid_of_app() &#123;</span><br><span class="line">	psid&#x3D;$(pgrep -f &quot;java.*$PKG&quot;)</span><br><span class="line">	#    psid&#x3D;$&#123;psid&#x2F;$$&#125;</span><br><span class="line">	#    psid&#x3D;$psid|tr -d &quot; &quot;</span><br><span class="line">	if test -z &quot;$psid&quot; ;then</span><br><span class="line">		psid&#x3D;&quot;0&quot;</span><br><span class="line">	fi</span><br><span class="line">	echo $psid &quot;@@@@@@@@@@@@@&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 回滚全部，即将本地保存的软件包cp到应用目录</span><br><span class="line">rollback() &#123;</span><br><span class="line">	cp -arp $OLD_VERSION_STORE $APP_HOME&#x2F;</span><br><span class="line">	echo &quot;$APP $PKG rollback success.&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 保存当前版本软件包，以便用于本地回滚操作</span><br><span class="line">backup() &#123;</span><br><span class="line">	mkdir -p $OLD_VERSION_STORE</span><br><span class="line">	#不删除备份</span><br><span class="line">	#rm -rf $OLD_VERSION_STORE</span><br><span class="line">	if test &quot;$(ls -A $APP_HOME&#x2F;$PKG)&quot; ;then</span><br><span class="line">		cp -arp $APP_HOME&#x2F;$PKG $OLD_VERSION_STORE</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;$APP $PKG backup success.&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 删除备份</span><br><span class="line">rmbackup()&#123;</span><br><span class="line">  cd $LOCAL_ROOT_STORE</span><br><span class="line">  num&#x3D;&#96;ls $LOCAL_ROOT_STORE -l | grep $APP | wc -l&#96;;</span><br><span class="line">  if [ $num -gt 2 ]; then</span><br><span class="line">   num&#x3D;&#96;expr $num - 2&#96;</span><br><span class="line">   ls $LOCAL_ROOT_STORE -tr |grep $APP | head -$num  | xargs rm -rf &#123;&#125;;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"># 部署所有</span><br><span class="line">deploy() &#123;</span><br><span class="line">	if test IS_INC_TOT &#x3D;&#x3D; &quot;TOT&quot; ; then</span><br><span class="line">		rm -rf $APP_HOME&#x2F;$PKG</span><br><span class="line">		cp -rf $NOW_VERSION_STORE&#x2F;$PKG $APP_HOME</span><br><span class="line">		echo &quot;$APP $PKG deploy tot success.&quot;</span><br><span class="line">	else</span><br><span class="line">		cp -rf $NOW_VERSION_STORE&#x2F;$PKG $APP_HOME</span><br><span class="line">		echo &quot;$APP $PKG deploy inc success.&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 部署配置（分环境提取文件）</span><br><span class="line">deploycfg() &#123;</span><br><span class="line">	if test IS_INC_TOT &#x3D;&#x3D; &quot;TOT&quot; ; then</span><br><span class="line">		rm -rf $APP_HOME&#x2F;configs&#x2F;*</span><br><span class="line">		cp -rf $NOW_VERSION_STORE&#x2F;configs&#x2F;$ENV&#x2F;* $APP_HOME&#x2F;configs&#x2F;</span><br><span class="line">		echo &quot;$APP deploycfg tot success.&quot;</span><br><span class="line">	else</span><br><span class="line">		cp -rf $NOW_VERSION_STORE&#x2F;config&#x2F;$ENV&#x2F;* $APP_HOME&#x2F;configs&#x2F;</span><br><span class="line">		echo &quot;$APP deploycfg inc success.&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"># 先建立相关目录，再从nginx上获取指定软件包，保存到指定目录</span><br><span class="line">prepare() &#123;</span><br><span class="line">	if test ! -d $APP_HOME  ;then</span><br><span class="line">		mkdir -p $APP_HOME</span><br><span class="line">	fi</span><br><span class="line">	if test ! -d $NOW_VERSION_STORE  ;then</span><br><span class="line">		mkdir -p $NOW_VERSION_STORE</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if test -f &quot;$NOW_VERSION_STORE&#x2F;$ZIP&quot; ;then</span><br><span class="line">		echo &quot;$NOW_VERSION_STORE&#x2F;$ZIP found.&quot;</span><br><span class="line">	else</span><br><span class="line">		wget -P $NOW_VERSION_STORE $URL&#x2F;$APP&#x2F;$VER&#x2F;$ZIP</span><br><span class="line">		mkdir -p  $NOW_VERSION_STORE&#x2F;</span><br><span class="line">		tar -xzvf $NOW_VERSION_STORE&#x2F;$ZIP -C $NOW_VERSION_STORE&#x2F;</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;$APP prepare success.&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startpkg()&#123;</span><br><span class="line">	pid_of_app</span><br><span class="line">	if test &quot;$psid&quot; !&#x3D; &quot;0&quot; ; then</span><br><span class="line">		echo &quot;$APP already started, error.&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	else</span><br><span class="line">		PKG_NAME&#x3D;$&#123;PKG%.*&#125;</span><br><span class="line">	  if test $PKG &#x3D; &quot;mspp-gateway.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 8080</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-queueprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31100 21100</span><br><span class="line">			#jarstart $PKG 31101 21101</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	if test $PKG &#x3D; &quot;mspp-oauthprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31200 21200</span><br><span class="line">			#jarstart $PKG 31201 21201</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-mzconsumer.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31300 21300</span><br><span class="line">			#jarstart $PKG 31301 21301</span><br><span class="line">		fi</span><br><span class="line">		 if test $PKG &#x3D; &quot;mspp-mzprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31400 21400</span><br><span class="line">			#jarstart $PKG 31401 21401</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-onlineconsumer.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31500 21500</span><br><span class="line">			#jarstart $PKG 31501 21501</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-onlineprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31600 21600</span><br><span class="line">			#jarstart $PKG 31601 21601</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-otherconsumer.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31700 21700</span><br><span class="line">			#jarstart $PKG 31701 21701</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-otherprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31800 21800</span><br><span class="line">			#jarstart $PKG 31801 21801</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-ydconsumer.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 31900 21900</span><br><span class="line">			#jarstart $PKG 31901 21901</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-ydprovider.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 32000 22000</span><br><span class="line">			#jarstart $PKG 32001 22001</span><br><span class="line">		fi</span><br><span class="line">			if test $PKG &#x3D; &quot;mspp-zyconsumer.jar&quot; ; then</span><br><span class="line">			jarstart $PKG 32100 22100</span><br><span class="line">			#jarstart $PKG 32101 22101</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;mspp-zyprovider.jar&quot; ; then</span><br><span class="line">		   jarstart $PKG 32200 22200</span><br><span class="line">			 #jarstart $PKG 32201 22201</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;ehic-ecardconsumer.jar&quot; ; then</span><br><span class="line">			 jarstart $PKG 32300 22300</span><br><span class="line">			 #jarstart $PKG 32301 22301</span><br><span class="line">		fi</span><br><span class="line">		if test $PKG &#x3D; &quot;ehic-ecardprovider.jar&quot; ; then</span><br><span class="line">		   jarstart $PKG 32400 22400</span><br><span class="line">			 #jarstart $PKG 32401 22401</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		sleep 1</span><br><span class="line">		echo &quot;$APP $PKG start success.&quot;</span><br><span class="line">		#pid_of_app</span><br><span class="line">        #if test &quot;$psid&quot; !&#x3D; &quot;0&quot; ; then</span><br><span class="line">        #    echo &quot;$APP $PKG start success.&quot;</span><br><span class="line">        #else</span><br><span class="line">        #    echo &quot;$APP $PKG start error.&quot;</span><br><span class="line">        #    exit 1</span><br><span class="line">        #fi</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line">#启动 jarstart tomcat端口 dubbo端口</span><br><span class="line">function jarstart()</span><br><span class="line">&#123;</span><br><span class="line">	PKG_NAME&#x3D;$&#123;1%.*&#125;</span><br><span class="line">	#tomcat端口</span><br><span class="line">	SERVER_PORT&#x3D;$2</span><br><span class="line">	#dubbo端口</span><br><span class="line">	DUBBO_PORT&#x3D;$3</span><br><span class="line">	#dubbo协议端口</span><br><span class="line">	DUBBO_PROCOTOL&#x3D;</span><br><span class="line">	if [ -n &quot;$DUBBO_PORT&quot; ]; then</span><br><span class="line">		DUBBO_PROCOTOL&#x3D;&quot;--dubbo.protocol.port&#x3D;$DUBBO_PORT&quot;</span><br><span class="line">	fi</span><br><span class="line">	#echo &quot;nohup java -javaagent:$SKYWALKING_JAR -Dskywalking.collector.servers&#x3D;$SKYWALKING_ADDR -Dskywalking.agent.application_code&#x3D;es-cloud -Dskywalking.agent.service_name&#x3D;$PKG_NAME -Xms800m -Xmx800m -jar &quot;$APP_HOME&#x2F;$PKG&quot; $DUBBO_PROCOTOL --spring.cloud.nacos.config.server-addr&#x3D;$NACOS_ADDR --spring.cloud.nacos.discovery.server-addr&#x3D;$NACOS_ADDR --spring.profiles.active&#x3D;$PROFILE --spring.cloud.nacos.config.namespace&#x3D;$NACOS_NAMESPACE --spring.cloud.nacos.discovery.namespace&#x3D;$NACOS_NAMESPACE --server.port&#x3D;$SERVER_PORT --logging.file&#x3D;logs&#x2F;$PKG_NAME-$SERVER_PORT.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">	nohup java -javaagent:$SKYWALKING_JAR \</span><br><span class="line">	-Dskywalking.collector.servers&#x3D;$SKYWALKING_ADDR \</span><br><span class="line">	-Dskywalking.agent.application_code&#x3D;es-cloud \</span><br><span class="line">	-Dskywalking.agent.service_name&#x3D;$PKG_NAME \</span><br><span class="line">	-Xms256m -Xmx256m \</span><br><span class="line">	-jar &quot;$APP_HOME&#x2F;$PKG&quot; \</span><br><span class="line">	$DUBBO_PROCOTOL \</span><br><span class="line">	--spring.cloud.nacos.config.server-addr&#x3D;$NACOS_ADDR \</span><br><span class="line">	--spring.cloud.nacos.discovery.server-addr&#x3D;$NACOS_ADDR \</span><br><span class="line">	--spring.profiles.active&#x3D;$PROFILE \</span><br><span class="line">	--spring.cloud.nacos.config.namespace&#x3D;$NACOS_NAMESPACE \</span><br><span class="line">	--spring.cloud.nacos.discovery.namespace&#x3D;$NACOS_NAMESPACE \</span><br><span class="line">	--server.port&#x3D;$SERVER_PORT \</span><br><span class="line">	--seata.service.grouplist&#x3D;$SEATA_ADDR \</span><br><span class="line">	--logging.file&#x3D;logs&#x2F;$PKG_NAME-$SERVER_PORT.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line">&#125;</span><br><span class="line">#停止应用，注意先判断。</span><br><span class="line">stoppkg() &#123;</span><br><span class="line">	pid_of_app</span><br><span class="line">	if test &quot;$psid&quot; !&#x3D; &quot;0&quot; ; then</span><br><span class="line">		kill $psid</span><br><span class="line">		sleep 1</span><br><span class="line">		if test $? !&#x3D; 0 ; then</span><br><span class="line">			echo &quot;$APP $PKG stop success.&quot;</span><br><span class="line">		else</span><br><span class="line">			pid_of_app</span><br><span class="line">            if test &quot;$psid&quot; !&#x3D; &quot;0&quot; ; then</span><br><span class="line">                stoppkg</span><br><span class="line">            else</span><br><span class="line">                echo &quot;$APP $PKG has stoped.&quot;</span><br><span class="line">            fi</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		echo &quot;$APP $PKG has stoped.&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动应用，传递了env参数，注意先判断。</span><br><span class="line">startall()&#123;</span><br><span class="line">  if test -d $NOW_VERSION_STORE&#x2F; ;then</span><br><span class="line">    for file2 in &#96;ls -a $NOW_VERSION_STORE&#x2F;| egrep &#39;.jar$&#39;&#96;</span><br><span class="line">    do</span><br><span class="line">      PKG&#x3D;$file2</span><br><span class="line">      startinone</span><br><span class="line">    done</span><br><span class="line">	fi</span><br><span class="line">	rmbackup</span><br><span class="line">&#125;</span><br><span class="line">#关闭全部</span><br><span class="line">stopall() &#123;</span><br><span class="line">	for file2 in &#96;ls -a $APP_HOME&#x2F;| egrep &#39;.jar$&#39;&#96;</span><br><span class="line">	do</span><br><span class="line">		PKG&#x3D;$file2</span><br><span class="line">		stoppkg</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line">#版本回滚</span><br><span class="line">rollbackall() &#123;</span><br><span class="line">	for file2 in &#96;ls -a $OLD_VERSION_STORE | egrep &#39;.jar$&#39;&#96;</span><br><span class="line">	do</span><br><span class="line">		PKG&#x3D;$file2</span><br><span class="line">		rollback</span><br><span class="line">		restartpkg</span><br><span class="line">	done</span><br><span class="line">	rmbackup</span><br><span class="line">&#125;</span><br><span class="line">#重启服务</span><br><span class="line">restartpkg()&#123;</span><br><span class="line">	stoppkg</span><br><span class="line">	startpkg</span><br><span class="line">&#125;</span><br><span class="line">#重启全部</span><br><span class="line">restartall()&#123;</span><br><span class="line">	for file2 in &#96;ls -a $APP_HOME&#x2F;| egrep &#39;.jar$&#39;&#96;</span><br><span class="line">	do</span><br><span class="line">		PKG&#x3D;$file2</span><br><span class="line">		stoppkg</span><br><span class="line">    startpkg</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 1：backup 当前版本&#x2F;日期</span><br><span class="line"># 2：stoppkg   停止所有服务</span><br><span class="line"># 3：deploy 部署jar</span><br><span class="line"># 4：startpkg  启动多个实例</span><br><span class="line">startinone()&#123;</span><br><span class="line">	backup</span><br><span class="line">	stoppkg</span><br><span class="line">	deploy</span><br><span class="line">	startpkg</span><br><span class="line">&#125;</span><br><span class="line">help()&#123;</span><br><span class="line"> echo &quot;a(app)e(env)v(version)z(zip)p(pkg)&quot;</span><br><span class="line"> echo &quot;o(port)c(act)i(inc_tot)u(url)&quot;</span><br><span class="line"> echo &quot;重启单个jar         .&#x2F;startall.sh -a mspp-jar -c restartpkg  -p mspp-mzprovider.jar&quot;</span><br><span class="line"> echo &quot;关闭全部            .&#x2F;startall.sh -a mspp-jar -c stopall&quot;</span><br><span class="line"> echo &quot;重启全部            .&#x2F;startall.sh -a mspp-jar -c restartall&quot;</span><br><span class="line"> echo &quot;重新部署全部         .&#x2F;startall.sh -a mspp-jar -c startall    -v 2019081413  &quot;</span><br><span class="line"> echo &quot;重新部署单个jar      .&#x2F;startall.sh -a mspp-jar -c startinone  -v 2019081413  -p mspp-mzprovider.jar&quot;</span><br><span class="line"> echo &quot;回滚                .&#x2F;startall.sh -a mspp-jar -c rollbackall -v 2019081413 &quot;</span><br><span class="line"> echo &quot;启动                .&#x2F;startall.sh -a mspp-jar -c startpkg  -p mspp-mzprovider.jar&quot;</span><br><span class="line"> echo &quot;停止                .&#x2F;startall.sh -a mspp-jar -c stoppkg  -p mspp-mzprovider.jar&quot;</span><br><span class="line"> echo &quot;删除备份                .&#x2F;startall.sh -a mspp-jar -c rmbackup  &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span><br><span class="line">case &quot;$ACT&quot; in</span><br><span class="line">#    prepare) prepare;;</span><br><span class="line">#    backup) backup;;</span><br><span class="line">#    deploy) deploy;;</span><br><span class="line">#    deploycfg) deploycfg;;</span><br><span class="line">#    stoppkg) stoppkg;;</span><br><span class="line">     rmbackup) rmbackup;;</span><br><span class="line">     help) help;;</span><br><span class="line">     startpkg) startpkg;;</span><br><span class="line">     stoppkg) stoppkg;;</span><br><span class="line">     stopall) stopall;;</span><br><span class="line">     restartpkg) restartpkg;;</span><br><span class="line">     restartall) restartall;;</span><br><span class="line">     startinone) startinone;;</span><br><span class="line">     startall) startall;;</span><br><span class="line">     rollbackall) rollbackall;;</span><br><span class="line">*)</span><br><span class="line">	echo $&quot;Usage: $0 &#123;8 args&#125;&quot;</span><br><span class="line">	exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>端口配置要点</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>dubbo端口</th>
<th>tomcat端口</th>
<th>依赖模块</th>
</tr>
</thead>
<tbody><tr>
<td>app-mzprovider</td>
<td>21100</td>
<td>23100</td>
<td></td>
</tr>
<tr>
<td>app-otherprovider</td>
<td>21200</td>
<td>23200</td>
<td></td>
</tr>
<tr>
<td>app-zyprovider</td>
<td>21300</td>
<td>23300</td>
<td></td>
</tr>
<tr>
<td>app-oauthprovider</td>
<td>21400</td>
<td>23400</td>
<td></td>
</tr>
<tr>
<td>app-mzconsumer</td>
<td>21500</td>
<td>23500</td>
<td>app-otherprovider,app-oauthprovider,app-mzprovider</td>
</tr>
<tr>
<td>app-otherconsumer</td>
<td>21600</td>
<td>23600</td>
<td>app-otherprovider,app-oauthprovider</td>
</tr>
<tr>
<td>app-zyconsumer</td>
<td>21700</td>
<td>23700</td>
<td>app-otherprovider,app-oauthprovider,app-zyprovider</td>
</tr>
<tr>
<td>app-gateway</td>
<td></td>
<td>9090</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud上下文</title>
    <url>/2019/08/17/springcloud%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<h4 id="BootstrapApplicationListener"><a href="#BootstrapApplicationListener" class="headerlink" title="BootstrapApplicationListener"></a>BootstrapApplicationListener</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootstrapApplicationListener</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEnvironmentPreparedEvent</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Property source name for bootstrap.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOTSTRAP_PROPERTY_SOURCE_NAME = <span class="string">"bootstrap"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The default order for this listener.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The name of the default properties.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PROPERTIES = <span class="string">"springCloudDefaultProperties"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> order = DEFAULT_ORDER;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class="line">		ConfigurableEnvironment environment = event.getEnvironment();</span><br><span class="line">		<span class="comment">//获取是否允许生成springcloud上下文</span></span><br><span class="line">		<span class="keyword">if</span> (!environment.getProperty(<span class="string">"spring.cloud.bootstrap.enabled"</span>, Boolean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">				<span class="title">true</span>)) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// don't listen to events in a bootstrap context</span></span><br><span class="line">		<span class="keyword">if</span> (environment.getPropertySources().contains(BOOTSTRAP_PROPERTY_SOURCE_NAME)) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//获取启动配置文件名称</span></span><br><span class="line">		String configName = environment</span><br><span class="line">				.resolvePlaceholders(<span class="string">"$&#123;spring.cloud.bootstrap.name:bootstrap&#125;"</span>);</span><br><span class="line">		<span class="keyword">for</span> (ApplicationContextInitializer&lt;?&gt; initializer : event.getSpringApplication()</span><br><span class="line">				.getInitializers()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> ParentContextApplicationContextInitializer) &#123;</span><br><span class="line">				context = findBootstrapContext(</span><br><span class="line">						(ParentContextApplicationContextInitializer) initializer,</span><br><span class="line">						configName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">			context = bootstrapServiceContext(environment, event.getSpringApplication(),</span><br><span class="line">					configName);</span><br><span class="line">			event.getSpringApplication()</span><br><span class="line">					.addListeners(<span class="keyword">new</span> CloseContextOnFailureApplicationListener(context));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		apply(context, event.getSpringApplication(), environment);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//通过反射获取父上下文即springboot上下文</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ConfigurableApplicationContext <span class="title">findBootstrapContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ParentContextApplicationContextInitializer initializer, String configName)</span> </span>&#123;</span><br><span class="line">		Field field = ReflectionUtils</span><br><span class="line">				.findField(ParentContextApplicationContextInitializer.class, "parent");</span><br><span class="line">		ReflectionUtils.makeAccessible(field);</span><br><span class="line">		ConfigurableApplicationContext parent = safeCast(</span><br><span class="line">				ConfigurableApplicationContext<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">				<span class="title">ReflectionUtils</span>.<span class="title">getField</span>(<span class="title">field</span>, <span class="title">initializer</span>))</span>;</span><br><span class="line">		<span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; !configName.equals(parent.getId())) &#123;</span><br><span class="line">			parent = safeCast(ConfigurableApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">parent</span>.<span class="title">getParent</span>())</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">safeCast</span><span class="params">(Class&lt;T&gt; type, Object object)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> type.cast(object);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ConfigurableApplicationContext <span class="title">bootstrapServiceContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ConfigurableEnvironment environment, <span class="keyword">final</span> SpringApplication application,</span></span></span><br><span class="line"><span class="function"><span class="params">			String configName)</span> </span>&#123;</span><br><span class="line">		StandardEnvironment bootstrapEnvironment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">		MutablePropertySources bootstrapProperties = bootstrapEnvironment</span><br><span class="line">				.getPropertySources();</span><br><span class="line">		<span class="keyword">for</span> (PropertySource&lt;?&gt; source : bootstrapProperties) &#123;</span><br><span class="line">			bootstrapProperties.remove(source.getName());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获取启动配置文件路径</span></span><br><span class="line">		String configLocation = environment</span><br><span class="line">				.resolvePlaceholders(<span class="string">"$&#123;spring.cloud.bootstrap.location:&#125;"</span>);</span><br><span class="line">		Map&lt;String, Object&gt; bootstrapMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		bootstrapMap.put(<span class="string">"spring.config.name"</span>, configName);</span><br><span class="line">		<span class="comment">// if an app (or test) uses spring.main.web-application-type=reactive, bootstrap</span></span><br><span class="line">		<span class="comment">// will fail</span></span><br><span class="line">		<span class="comment">// force the environment to use none, because if though it is set below in the</span></span><br><span class="line">		<span class="comment">// builder</span></span><br><span class="line">		<span class="comment">// the environment overrides it</span></span><br><span class="line">		bootstrapMap.put(<span class="string">"spring.main.web-application-type"</span>, <span class="string">"none"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(configLocation)) &#123;</span><br><span class="line">			bootstrapMap.put(<span class="string">"spring.config.location"</span>, configLocation);</span><br><span class="line">		&#125;</span><br><span class="line">		bootstrapProperties.addFirst(</span><br><span class="line">				<span class="keyword">new</span> MapPropertySource(BOOTSTRAP_PROPERTY_SOURCE_NAME, bootstrapMap));</span><br><span class="line">		<span class="keyword">for</span> (PropertySource&lt;?&gt; source : environment.getPropertySources()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (source <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			bootstrapProperties.addLast(source);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> is it possible or sensible to share a ResourceLoader?</span></span><br><span class="line">		SpringApplicationBuilder builder = <span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">				.profiles(environment.getActiveProfiles()).bannerMode(Mode.OFF)</span><br><span class="line">				.environment(bootstrapEnvironment)</span><br><span class="line">				<span class="comment">// Don't use the default properties in this builder</span></span><br><span class="line">				.registerShutdownHook(<span class="keyword">false</span>).logStartupInfo(<span class="keyword">false</span>)</span><br><span class="line">				.web(WebApplicationType.NONE);</span><br><span class="line">		<span class="keyword">final</span> SpringApplication builderApplication = builder.application();</span><br><span class="line">		<span class="comment">//添加启动类</span></span><br><span class="line">		<span class="keyword">if</span> (builderApplication.getMainApplicationClass() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// gh_425:</span></span><br><span class="line">			<span class="comment">// SpringApplication cannot deduce the MainApplicationClass here</span></span><br><span class="line">			<span class="comment">// if it is booted from SpringBootServletInitializer due to the</span></span><br><span class="line">			<span class="comment">// absense of the "main" method in stackTraces.</span></span><br><span class="line">			<span class="comment">// But luckily this method's second parameter "application" here</span></span><br><span class="line">			<span class="comment">// carries the real MainApplicationClass which has been explicitly</span></span><br><span class="line">			<span class="comment">// set by SpringBootServletInitializer itself already.</span></span><br><span class="line">			builder.main(application.getMainApplicationClass());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//添加监听器</span></span><br><span class="line">		<span class="keyword">if</span> (environment.getPropertySources().contains(<span class="string">"refreshArgs"</span>)) &#123;</span><br><span class="line">			<span class="comment">// If we are doing a context refresh, really we only want to refresh the</span></span><br><span class="line">			<span class="comment">// Environment, and there are some toxic listeners (like the</span></span><br><span class="line">			<span class="comment">// LoggingApplicationListener) that affect global static state, so we need a</span></span><br><span class="line">			<span class="comment">// way to switch those off.</span></span><br><span class="line">			builderApplication</span><br><span class="line">					.setListeners(filterListeners(builderApplication.getListeners()));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//加载被注解BootstrapConfiguration的类</span></span><br><span class="line">		builder.sources(BootstrapImportSelectorConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//启动上下文</span></span><br><span class="line">		<span class="keyword">final</span> ConfigurableApplicationContext context = builder.run();</span><br><span class="line">		<span class="comment">// gh-214 using spring.application.name=bootstrap to set the context id via</span></span><br><span class="line">		<span class="comment">// `ContextIdApplicationContextInitializer` prevents apps from getting the actual</span></span><br><span class="line">		<span class="comment">// spring.application.name</span></span><br><span class="line">		<span class="comment">// during the bootstrap phase.</span></span><br><span class="line">		context.setId(<span class="string">"bootstrap"</span>);</span><br><span class="line">		<span class="comment">// Make the bootstrap context a parent of the app context</span></span><br><span class="line">		addAncestorInitializer(application, context);</span><br><span class="line">		<span class="comment">// It only has properties in it now that we don't want in the parent so remove</span></span><br><span class="line">		<span class="comment">// it (and it will be added back later)</span></span><br><span class="line">		bootstrapProperties.remove(BOOTSTRAP_PROPERTY_SOURCE_NAME);</span><br><span class="line">		mergeDefaultProperties(environment.getPropertySources(), bootstrapProperties);</span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Collection&lt;? extends ApplicationListener&lt;?&gt;&gt; filterListeners(</span><br><span class="line">			Set&lt;ApplicationListener&lt;?&gt;&gt; listeners) &#123;</span><br><span class="line">		Set&lt;ApplicationListener&lt;?&gt;&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : listeners) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!(listener <span class="keyword">instanceof</span> LoggingApplicationListener)</span><br><span class="line">					&amp;&amp; !(listener <span class="keyword">instanceof</span> LoggingSystemShutdownListener)) &#123;</span><br><span class="line">				result.add(listener);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeDefaultProperties</span><span class="params">(MutablePropertySources environment,</span></span></span><br><span class="line"><span class="function"><span class="params">			MutablePropertySources bootstrap)</span> </span>&#123;</span><br><span class="line">		String name = DEFAULT_PROPERTIES;</span><br><span class="line">		<span class="keyword">if</span> (bootstrap.contains(name)) &#123;</span><br><span class="line">			PropertySource&lt;?&gt; source = bootstrap.get(name);</span><br><span class="line">			<span class="comment">//不包含default属性，则添加，包含则合并</span></span><br><span class="line">			<span class="keyword">if</span> (!environment.contains(name)) &#123;</span><br><span class="line">				environment.addLast(source);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				PropertySource&lt;?&gt; target = environment.get(name);</span><br><span class="line">				<span class="keyword">if</span> (target <span class="keyword">instanceof</span> MapPropertySource &amp;&amp; target != source</span><br><span class="line">						&amp;&amp; source <span class="keyword">instanceof</span> MapPropertySource) &#123;</span><br><span class="line">					Map&lt;String, Object&gt; targetMap = ((MapPropertySource) target)</span><br><span class="line">							.getSource();</span><br><span class="line">					Map&lt;String, Object&gt; map = ((MapPropertySource) source).getSource();</span><br><span class="line">					<span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">						<span class="keyword">if</span> (!target.containsProperty(key)) &#123;</span><br><span class="line">							targetMap.put(key, map.get(key));</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		mergeAdditionalPropertySources(environment, bootstrap);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeAdditionalPropertySources</span><span class="params">(MutablePropertySources environment,</span></span></span><br><span class="line"><span class="function"><span class="params">			MutablePropertySources bootstrap)</span> </span>&#123;</span><br><span class="line">		PropertySource&lt;?&gt; defaultProperties = environment.get(DEFAULT_PROPERTIES);</span><br><span class="line">		ExtendedDefaultPropertySource result = defaultProperties <span class="keyword">instanceof</span> ExtendedDefaultPropertySource</span><br><span class="line">				? (ExtendedDefaultPropertySource) defaultProperties</span><br><span class="line">				: <span class="keyword">new</span> ExtendedDefaultPropertySource(DEFAULT_PROPERTIES,</span><br><span class="line">						defaultProperties);</span><br><span class="line">		<span class="keyword">for</span> (PropertySource&lt;?&gt; source : bootstrap) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!environment.contains(source.getName())) &#123;</span><br><span class="line">				result.add(source);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (String name : result.getPropertySourceNames()) &#123;</span><br><span class="line">			bootstrap.remove(name);</span><br><span class="line">		&#125;</span><br><span class="line">		addOrReplace(environment, result);</span><br><span class="line">		addOrReplace(bootstrap, result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addOrReplace</span><span class="params">(MutablePropertySources environment,</span></span></span><br><span class="line"><span class="function"><span class="params">			PropertySource&lt;?&gt; result)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (environment.contains(result.getName())) &#123;</span><br><span class="line">			environment.replace(result.getName(), result);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			environment.addLast(result);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAncestorInitializer</span><span class="params">(SpringApplication application,</span></span></span><br><span class="line"><span class="function"><span class="params">			ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> installed = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (ApplicationContextInitializer&lt;?&gt; initializer : application</span><br><span class="line">				.getInitializers()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> AncestorInitializer) &#123;</span><br><span class="line">				installed = <span class="keyword">true</span>;</span><br><span class="line">				<span class="comment">// New parent</span></span><br><span class="line">				((AncestorInitializer) initializer).setParent(context);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!installed) &#123;</span><br><span class="line">			application.addInitializers(<span class="keyword">new</span> AncestorInitializer(context));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">			SpringApplication application, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">		List&lt;ApplicationContextInitializer&gt; initializers = getOrderedBeansOfType(context,</span><br><span class="line">				ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		application.addInitializers(initializers</span><br><span class="line">				.toArray(<span class="keyword">new</span> ApplicationContextInitializer[initializers.size()]));</span><br><span class="line">		addBootstrapDecryptInitializer(application);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBootstrapDecryptInitializer</span><span class="params">(SpringApplication application)</span> </span>&#123;</span><br><span class="line">		DelegatingEnvironmentDecryptApplicationInitializer decrypter = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (ApplicationContextInitializer&lt;?&gt; ini : application.getInitializers()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ini <span class="keyword">instanceof</span> EnvironmentDecryptApplicationInitializer) &#123;</span><br><span class="line">				<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">				ApplicationContextInitializer del = (ApplicationContextInitializer) ini;</span><br><span class="line">				decrypter = <span class="keyword">new</span> DelegatingEnvironmentDecryptApplicationInitializer(del);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (decrypter != <span class="keyword">null</span>) &#123;</span><br><span class="line">			application.addInitializers(decrypter);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getOrderedBeansOfType</span><span class="params">(ListableBeanFactory context,</span></span></span><br><span class="line"><span class="function"><span class="params">			Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">		List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">		<span class="keyword">for</span> (String name : context.getBeanNamesForType(type)) &#123;</span><br><span class="line">			result.add(context.getBean(name, type));</span><br><span class="line">		&#125;</span><br><span class="line">		AnnotationAwareOrderComparator.sort(result);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.order = order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AncestorInitializer</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">			<span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> ConfigurableApplicationContext parent;</span><br><span class="line"></span><br><span class="line">		AncestorInitializer(ConfigurableApplicationContext parent) &#123;</span><br><span class="line">			<span class="keyword">this</span>.parent = parent;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(ConfigurableApplicationContext parent)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.parent = parent;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">// Need to run not too late (so not unordered), so that, for instance, the</span></span><br><span class="line">			<span class="comment">// ContextIdApplicationContextInitializer runs later and picks up the merged</span></span><br><span class="line">			<span class="comment">// Environment. Also needs to be quite early so that other initializers can</span></span><br><span class="line">			<span class="comment">// pick up the parent (especially the Environment).</span></span><br><span class="line">			<span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE + <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">while</span> (context.getParent() != <span class="keyword">null</span> &amp;&amp; context.getParent() != context) &#123;</span><br><span class="line">				context = (ConfigurableApplicationContext) context.getParent();</span><br><span class="line">			&#125;</span><br><span class="line">			reorderSources(context.getEnvironment());</span><br><span class="line">			<span class="keyword">new</span> ParentContextApplicationContextInitializer(<span class="keyword">this</span>.parent)</span><br><span class="line">					.initialize(context);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reorderSources</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">			PropertySource&lt;?&gt; removed = environment.getPropertySources()</span><br><span class="line">					.remove(DEFAULT_PROPERTIES);</span><br><span class="line">			<span class="keyword">if</span> (removed <span class="keyword">instanceof</span> ExtendedDefaultPropertySource) &#123;</span><br><span class="line">				ExtendedDefaultPropertySource defaultProperties = (ExtendedDefaultPropertySource) removed;</span><br><span class="line">				environment.getPropertySources().addLast(<span class="keyword">new</span> MapPropertySource(</span><br><span class="line">						DEFAULT_PROPERTIES, defaultProperties.getSource()));</span><br><span class="line">				<span class="keyword">for</span> (PropertySource&lt;?&gt; source : defaultProperties.getPropertySources()</span><br><span class="line">						.getPropertySources()) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!environment.getPropertySources().contains(source.getName())) &#123;</span><br><span class="line">						environment.getPropertySources().addBefore(DEFAULT_PROPERTIES,</span><br><span class="line">								source);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A special initializer designed to run before the property source bootstrap and</span></span><br><span class="line"><span class="comment">	 * decrypt any properties needed there (e.g. URL of config server).</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">9</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingEnvironmentDecryptApplicationInitializer</span></span></span><br><span class="line"><span class="class">			<span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; delegate;</span><br><span class="line"></span><br><span class="line">		DelegatingEnvironmentDecryptApplicationInitializer(</span><br><span class="line">				ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; delegate) &#123;</span><br><span class="line">			<span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.delegate.initialize(applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedDefaultPropertySource</span></span></span><br><span class="line"><span class="class">			<span class="keyword">extends</span> <span class="title">SystemEnvironmentPropertySource</span> <span class="keyword">implements</span> <span class="title">OriginLookup</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> OriginTrackedCompositePropertySource sources;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		ExtendedDefaultPropertySource(String name, PropertySource&lt;?&gt; propertySource) &#123;</span><br><span class="line">			<span class="keyword">super</span>(name, findMap(propertySource));</span><br><span class="line">			<span class="keyword">this</span>.sources = <span class="keyword">new</span> OriginTrackedCompositePropertySource(name);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">findMap</span><span class="params">(PropertySource&lt;?&gt; propertySource)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (propertySource <span class="keyword">instanceof</span> MapPropertySource) &#123;</span><br><span class="line">				<span class="keyword">return</span> (Map&lt;String, Object&gt;) propertySource.getSource();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> CompositePropertySource <span class="title">getPropertySources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.sources;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPropertySourceNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.names;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(PropertySource&lt;?&gt; source)</span> </span>&#123;</span><br><span class="line">			<span class="comment">// Only add map property sources added by boot, see gh-476</span></span><br><span class="line">			<span class="keyword">if</span> (source <span class="keyword">instanceof</span> OriginTrackedMapPropertySource</span><br><span class="line">					&amp;&amp; !<span class="keyword">this</span>.names.contains(source.getName())) &#123;</span><br><span class="line">				<span class="keyword">this</span>.sources.addPropertySource(source);</span><br><span class="line">				<span class="keyword">this</span>.names.add(source.getName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.sources.containsProperty(name)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.sources.getProperty(name);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.getProperty(name);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.sources.containsProperty(name)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.containsProperty(name);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> String[] getPropertyNames() &#123;</span><br><span class="line">			List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			names.addAll(Arrays.asList(<span class="keyword">this</span>.sources.getPropertyNames()));</span><br><span class="line">			names.addAll(Arrays.asList(<span class="keyword">super</span>.getPropertyNames()));</span><br><span class="line">			<span class="keyword">return</span> names.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Origin <span class="title">getOrigin</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.sources.getOrigin(name);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseContextOnFailureApplicationListener</span></span></span><br><span class="line"><span class="class">			<span class="keyword">implements</span> <span class="title">SmartApplicationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext context;</span><br><span class="line"></span><br><span class="line">		CloseContextOnFailureApplicationListener(ConfigurableApplicationContext context) &#123;</span><br><span class="line">			<span class="keyword">this</span>.context = context;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsEventType</span><span class="params">(Class&lt;? extends ApplicationEvent&gt; eventType)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> ApplicationFailedEvent<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">eventType</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationFailedEvent) &#123;</span><br><span class="line">				<span class="keyword">this</span>.context.close();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springsecurityOauth</title>
    <url>/2019/08/17/springsecurityOauth/</url>
    <content><![CDATA[<p>浏览器—-&gt;客户端–&gt;请求第三方接口—&gt;授权服务器需要登陆–&gt;确认授权–&gt;重定向–&gt;客户端的redirectUrl（包含code）-&gt; 再次请求通过AuthorizationCodeAccessTokenProvider#obtainAccessToken判断是否存在code，不存在调用认证，存在则进行获取token–&gt; 再次用token获取资源 –&gt;通过拦截器OAuth2AuthenticationProcessingFilter校验token是否有效</p>
<h2 id="拦截入口"><a href="#拦截入口" class="headerlink" title="拦截入口"></a>拦截入口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 拦截过程</span><br></pre></td></tr></table></figure>
<p>public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,<br>        ServletException {</p>
<pre><code>final boolean debug = logger.isDebugEnabled();
final HttpServletRequest request = (HttpServletRequest) req;
final HttpServletResponse response = (HttpServletResponse) res;

try {

    Authentication authentication = tokenExtractor.extract(request);
    //获取不到授权
    if (authentication == null) {
        //判断是否已经登录
        if (stateless &amp;&amp; isAuthenticated()) {
            if (debug) {
                logger.debug(&quot;Clearing security context.&quot;);
            }
            SecurityContextHolder.clearContext();
        }
        if (debug) {
            logger.debug(&quot;No token in request, will continue chain.&quot;);
        }
    }
    else {
        request.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, authentication.getPrincipal());
        if (authentication instanceof AbstractAuthenticationToken) {
            AbstractAuthenticationToken needsDetails = (AbstractAuthenticationToken) authentication;
            needsDetails.setDetails(authenticationDetailsSource.buildDetails(request));
        }
        Authentication authResult = authenticationManager.authenticate(authentication);

        if (debug) {
            logger.debug(&quot;Authentication success: &quot; + authResult);
        }

        eventPublisher.publishAuthenticationSuccess(authResult);
        SecurityContextHolder.getContext().setAuthentication(authResult);

    }
}
catch (OAuth2Exception failed) {
    SecurityContextHolder.clearContext();

    if (debug) {
        logger.debug(&quot;Authentication request failed: &quot; + failed);
    }
    eventPublisher.publishAuthenticationFailure(new BadCredentialsException(failed.getMessage(), failed),
            new PreAuthenticatedAuthenticationToken(&quot;access-token&quot;, &quot;N/A&quot;));

    authenticationEntryPoint.commence(request, response,
            new InsufficientAuthenticationException(failed.getMessage(), failed));

    return;
}

chain.doFilter(request, response);</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### EnableGlobalMethodSecurity</span><br><span class="line">拦截入口</span><br></pre></td></tr></table></figure>
<p>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration<br>中enableMethodSecurity()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例如prePostEnabled</span><br></pre></td></tr></table></figure>
<p>protected AfterInvocationManager afterInvocationManager() {<br>        if (prePostEnabled()) {<br>            AfterInvocationProviderManager invocationProviderManager = new AfterInvocationProviderManager();<br>            ExpressionBasedPostInvocationAdvice postAdvice = new ExpressionBasedPostInvocationAdvice(<br>                    getExpressionHandler());<br>            PostInvocationAdviceProvider postInvocationAdviceProvider = new PostInvocationAdviceProvider(<br>                    postAdvice);<br>            List<AfterInvocationProvider> afterInvocationProviders = new ArrayList&lt;&gt;();<br>            afterInvocationProviders.add(postInvocationAdviceProvider);<br>            invocationProviderManager.setProviders(afterInvocationProviders);<br>            return invocationProviderManager;<br>        }<br>        return null;<br>    }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">都是通过aop动态代理进行 添加对应的advice</span><br><span class="line"></span><br><span class="line">### session校验入口</span><br><span class="line">1. servlet校验入口</span><br></pre></td></tr></table></figure>
<p>org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter</p>
<p>public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)<br>        throws IOException, ServletException {</p>
<pre><code>HttpServletRequest request = (HttpServletRequest) req;
HttpServletResponse response = (HttpServletResponse) res;

if (!requiresAuthentication(request, response)) {
    chain.doFilter(request, response);

    return;
}

if (logger.isDebugEnabled()) {
    logger.debug(&quot;Request is to process authentication&quot;);
}

Authentication authResult;

try {
    authResult = attemptAuthentication(request, response);
    if (authResult == null) {
        // return immediately as subclass has indicated that it hasn&apos;t completed
        // authentication
        return;
    }
    sessionStrategy.onAuthentication(authResult, request, response);
}
catch (InternalAuthenticationServiceException failed) {
    logger.error(
            &quot;An internal error occurred while trying to authenticate the user.&quot;,
            failed);
    unsuccessfulAuthentication(request, response, failed);

    return;
}
catch (AuthenticationException failed) {
    // Authentication failed
    unsuccessfulAuthentication(request, response, failed);

    return;
}

// Authentication success
if (continueChainBeforeSuccessfulAuthentication) {
    chain.doFilter(request, response);
}

successfulAuthentication(request, response, chain, authResult);</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>sessionStrategy.onAuthentication(authResult, request, response);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>public void onAuthentication(Authentication authentication,<br>            HttpServletRequest request, HttpServletResponse response) {<br>        sessionRegistry.registerNewSession(request.getSession().getId(),<br>                authentication.getPrincipal());<br>    }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. webflux校验入口</span><br></pre></td></tr></table></figure>
<p>org.springframework.web.server.adapter.HttpWebHandlerAdapter<br>protected ServerWebExchange createExchange(ServerHttpRequest request, ServerHttpResponse response) {<br>        return new DefaultServerWebExchange(request, response, this.sessionManager,<br>                getCodecConfigurer(), getLocaleContextResolver(), this.applicationContext);<br>    }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DefaultServerWebExchange(ServerHttpRequest request, ServerHttpResponse response,<br>            WebSessionManager sessionManager, ServerCodecConfigurer codecConfigurer,<br>            LocaleContextResolver localeContextResolver, @Nullable ApplicationContext applicationContext) {</p>
<pre><code>    Assert.notNull(request, &quot;&apos;request&apos; is required&quot;);
    Assert.notNull(response, &quot;&apos;response&apos; is required&quot;);
    Assert.notNull(sessionManager, &quot;&apos;sessionManager&apos; is required&quot;);
    Assert.notNull(codecConfigurer, &quot;&apos;codecConfigurer&apos; is required&quot;);
    Assert.notNull(localeContextResolver, &quot;&apos;localeContextResolver&apos; is required&quot;);

    // Initialize before first call to getLogPrefix()
    this.attributes.put(ServerWebExchange.LOG_ID_ATTRIBUTE, request.getId());

    this.request = request;
    this.response = response;
    this.sessionMono = sessionManager.getSession(this).cache();
    this.localeContextResolver = localeContextResolver;
    this.formDataMono = initFormData(request, codecConfigurer, getLogPrefix());
    this.multipartDataMono = initMultipartData(request, codecConfigurer, getLogPrefix());
    this.applicationContext = applicationContext;
}</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>this.sessionMono = sessionManager.getSession(this).cache();</p>
<pre><code></code></pre>]]></content>
  </entry>
  <entry>
    <title>springcloud订阅</title>
    <url>/2019/08/14/springcloud%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<ol>
<li>通过NacosWatch定时推送心跳</li>
<li>通过PushReceiver接收到nacos推送</li>
<li>DubboServiceDiscoveryAutoConfiguration<blockquote>
<p>接收心跳及时订阅服务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span>(HeartbeatEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">onHeartbeatEvent</span>(<span class="title">HeartbeatEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Try to re-initialize the subscribed services, in order to sense the change of</span></span><br><span class="line"><span class="comment">     * services if &#123;<span class="doctag">@link</span> DubboCloudProperties#getSubscribedServices()&#125; is wildcard</span></span><br><span class="line"><span class="comment">     * that indicates all services should be subscribed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Stream&lt;String&gt; subscribedServices = dubboServiceMetadataRepository</span><br><span class="line">            .initSubscribedServices();</span><br><span class="line"></span><br><span class="line">    heartbeatEventChangedPredicate.ifAvailable(predicate -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(event)) &#123;</span><br><span class="line">            <span class="comment">// Dispatch ServiceInstancesChangedEvent for each service</span></span><br><span class="line">            subscribedServices.forEach(serviceName -&gt; &#123;</span><br><span class="line">                List&lt;ServiceInstance&gt; serviceInstances = getInstances(serviceName);</span><br><span class="line">                dispatchServiceInstancesChangedEvent(serviceName, serviceInstances);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>DubboServiceMetadataRepository<blockquote>
<p>发布SubscribedServicesChangedEvent事件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;String&gt; <span class="title">initSubscribedServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; newSubscribedServices = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If subscribes all services</span></span><br><span class="line">    <span class="keyword">if</span> (ALL_DUBBO_SERVICES.equals(dubboCloudProperties.getSubscribedServices())) &#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        newSubscribedServices.addAll(services);</span><br><span class="line">        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                    <span class="string">"Current application will subscribe all services(size:&#123;&#125;) in registry, "</span></span><br><span class="line">                            + <span class="string">"a lot of memory and CPU cycles may be used, "</span></span><br><span class="line">                            + <span class="string">"thus it's strongly recommend you using the externalized property '&#123;&#125;' "</span></span><br><span class="line">                            + <span class="string">"to specify the services"</span>,</span><br><span class="line">                    newSubscribedServices.size(), <span class="string">"dubbo.cloud.subscribed-services"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newSubscribedServices.addAll(dubboCloudProperties.subscribedServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// exclude current application name</span></span><br><span class="line">    excludeSelf(newSubscribedServices);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy from subscribedServices</span></span><br><span class="line">    Set&lt;String&gt; oldSubscribedServices = <span class="keyword">this</span>.subscribedServices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// volatile update subscribedServices to be new one</span></span><br><span class="line">    <span class="keyword">this</span>.subscribedServices = newSubscribedServices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dispatch SubscribedServicesChangedEvent</span></span><br><span class="line">    dispatchEvent(<span class="keyword">new</span> SubscribedServicesChangedEvent(<span class="keyword">this</span>, oldSubscribedServices,</span><br><span class="line">            newSubscribedServices));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear old one, help GC</span></span><br><span class="line">    oldSubscribedServices.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newSubscribedServices.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>DubboServiceDiscoveryAutoConfiguration<blockquote>
<p>订阅namingService接收NamingEvent事件<br>发布ServiceInstancesChangedEvent事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EventListener(SubscribedServicesChangedEvent.class)</span><br><span class="line">public void onSubscribedServicesChangedEvent(SubscribedServicesChangedEvent event)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    &#x2F;&#x2F; subscribe EventListener for each service</span><br><span class="line">    event.getNewSubscribedServices().forEach(this::subscribeEventListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void subscribeEventListener(String serviceName) &#123;</span><br><span class="line">    if (listeningServices.add(serviceName)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            namingService.subscribe(serviceName, event -&gt; &#123;</span><br><span class="line">                if (event instanceof NamingEvent) &#123;</span><br><span class="line">                    NamingEvent namingEvent &#x3D; (NamingEvent) event;</span><br><span class="line">                    List&lt;ServiceInstance&gt; serviceInstances &#x3D; hostToServiceInstanceList(</span><br><span class="line">                            namingEvent.getInstances(), serviceName);</span><br><span class="line">                    dispatchServiceInstancesChangedEvent(serviceName,</span><br><span class="line">                            serviceInstances);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NacosException e) &#123;</span><br><span class="line">            ReflectionUtils.rethrowRuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private void dispatchServiceInstancesChangedEvent(String serviceName,</span><br><span class="line">        Collection&lt;ServiceInstance&gt; serviceInstances) &#123;</span><br><span class="line">    if (!hasText(serviceName) || serviceInstances &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ServiceInstancesChangedEvent event &#x3D; new ServiceInstancesChangedEvent(serviceName,</span><br><span class="line">            serviceInstances);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(</span><br><span class="line">                &quot;The event of the service instances[name : &#123;&#125; , size : &#123;&#125;] change is about to be dispatched&quot;,</span><br><span class="line">                serviceName, serviceInstances.size());</span><br><span class="line">    &#125;</span><br><span class="line">    applicationEventPublisher.publishEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>AbstractSpringCloudRegistry<blockquote>
<p>接收ServiceInstancesChangedEvent事件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceInstancesChangedEventListener</span><span class="params">(URL url,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                          NotifyListener listener)</span> </span>&#123;</span><br><span class="line">    String listenerId = generateId(url);</span><br><span class="line">    <span class="keyword">if</span> (registerListeners.add(listenerId)) &#123;</span><br><span class="line">        applicationContext.addApplicationListener(</span><br><span class="line">                <span class="keyword">new</span> ApplicationListener&lt;ServiceInstancesChangedEvent&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                            ServiceInstancesChangedEvent event)</span> </span>&#123;</span><br><span class="line">                        String serviceName = event.getServiceName();</span><br><span class="line">                        Collection&lt;ServiceInstance&gt; serviceInstances = event</span><br><span class="line">                                .getServiceInstances();</span><br><span class="line">                        subscribeDubboServiceURL(url, listener, serviceName,</span><br><span class="line">                                s -&gt; serviceInstances);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeDubboServiceURL</span><span class="params">(URL url, NotifyListener listener,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String serviceName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Function&lt;String, Collection&lt;ServiceInstance&gt;&gt; serviceInstancesFunction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(</span><br><span class="line">                <span class="string">"The Dubbo Service URL[ID : &#123;&#125;] is being subscribed for service[name : &#123;&#125;]"</span>,</span><br><span class="line">                generateId(url), serviceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;URL&gt; allSubscribedURLs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Collection&lt;ServiceInstance&gt; serviceInstances = serviceInstancesFunction</span><br><span class="line">            .apply(serviceName);</span><br><span class="line">    <span class="comment">//不存在实例取消订阅</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(serviceInstances)) &#123;</span><br><span class="line">        dubboMetadataConfigServiceProxy.removeProxy(serviceName);</span><br><span class="line">        repository.removeInitializedService(serviceName);</span><br><span class="line">        repository.removeServiceMetadata(serviceName);</span><br><span class="line">        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                    <span class="string">"There is no instance from service[name : &#123;&#125;], and then Dubbo Service[key : &#123;&#125;] will not be "</span></span><br><span class="line">                            + <span class="string">"available , please make sure the further impact"</span>,</span><br><span class="line">                    serviceName, url.getServiceKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * URLs with &#123;<span class="doctag">@link</span> RegistryConstants#EMPTY_PROTOCOL&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        allSubscribedURLs.addAll(emptyURLs(url));</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"The subscribed URL[&#123;&#125;] will notify all URLs : &#123;&#125;"</span>, url,</span><br><span class="line">                    allSubscribedURLs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由于循环配置所以添加缓存匹配</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(subscribedCache.get(url))) &#123;</span><br><span class="line">            listener.notify(allSubscribedURLs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取代理对象的DubboMetadataService</span></span><br><span class="line">    DubboMetadataService dubboMetadataService = dubboMetadataConfigServiceProxy</span><br><span class="line">            .getProxy(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dubboMetadataService == <span class="keyword">null</span>) &#123; <span class="comment">// If not found, try to initialize</span></span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(</span><br><span class="line">                    <span class="string">"The metadata of Dubbo service[key : &#123;&#125;] can't be found when the subscribed service[name : &#123;&#125;], "</span></span><br><span class="line">                            + <span class="string">"and then try to initialize it"</span>,</span><br><span class="line">                    url.getServiceKey(), serviceName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重新初始化代理对象</span></span><br><span class="line">        repository.initializeMetadata(serviceName);</span><br><span class="line">        dubboMetadataService = dubboMetadataConfigServiceProxy.getProxy(serviceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dubboMetadataService == <span class="keyword">null</span>) &#123; <span class="comment">// It makes sure not-found, return immediately</span></span><br><span class="line">        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                    <span class="string">"The metadata of Dubbo service[key : &#123;&#125;] still can't be found, it could effect the further "</span></span><br><span class="line">                            + <span class="string">"Dubbo service invocation"</span>,</span><br><span class="line">                    url.getServiceKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取提供者暴露的url</span></span><br><span class="line">    List&lt;URL&gt; exportedURLs = getExportedURLs(dubboMetadataService, url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (URL exportedURL : exportedURLs) &#123;</span><br><span class="line">        <span class="comment">//获取暴露的协议</span></span><br><span class="line">        String protocol = exportedURL.getProtocol();</span><br><span class="line">        List&lt;URL&gt; subscribedURLs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取实例获取host、port</span></span><br><span class="line">        serviceInstances.forEach(serviceInstance -&gt; &#123;</span><br><span class="line">            Integer port = repository.getDubboProtocolPort(serviceInstance, protocol);</span><br><span class="line">            String host = serviceInstance.getHost();</span><br><span class="line">            <span class="keyword">if</span> (port == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(</span><br><span class="line">                            <span class="string">"The protocol[&#123;&#125;] port of Dubbo  service instance[host : &#123;&#125;] "</span></span><br><span class="line">                                    + <span class="string">"can't be resolved"</span>,</span><br><span class="line">                            protocol, host);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                URL subscribedURL = <span class="keyword">new</span> URL(protocol, host, port,</span><br><span class="line">                        exportedURL.getParameters());</span><br><span class="line">                subscribedURLs.add(subscribedURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        allSubscribedURLs.addAll(subscribedURLs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    subscribedCache.put(url, allSubscribedURLs);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"The subscribed URL[&#123;&#125;] will notify all URLs : &#123;&#125;"</span>, url,</span><br><span class="line">                allSubscribedURLs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listener.notify(allSubscribedURLs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><blockquote>
<p>订阅元数据变动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void registerDubboMetadataServiceInstancesChangedEventListener(URL url, NotifyListener listener) &#123;</span><br><span class="line">    String listenerId &#x3D; generateId(url);</span><br><span class="line">    if (dubboMetadataServiceListeners.add(listenerId)) &#123;</span><br><span class="line">        applicationContext.addApplicationListener(</span><br><span class="line">                (ApplicationListener&lt;DubboMetadataServiceInstancesChangedEvent&gt;) event -&gt; &#123;</span><br><span class="line">                    String group &#x3D; url.getParameter(GROUP_KEY);</span><br><span class="line">                    if (event.getServiceName().equals(group)) &#123;</span><br><span class="line">                        doSubscribeDubboMetadataServiceURLs(url, listener);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><blockquote>
<p>重新初始化元数据和代理对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initSubscribedDubboMetadataService</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//clear subscribed</span></span><br><span class="line">    findServiceKey(serviceName).ifPresent(s -&gt; s.forEach(subscribedDubboMetadataServiceURLs::remove));</span><br><span class="line">    discoveryClient.getInstances(serviceName).stream().findAny()</span><br><span class="line">            .map(<span class="keyword">this</span>::getDubboMetadataServiceURLs)</span><br><span class="line">            .ifPresent(dubboMetadataServiceURLs -&gt; &#123;</span><br><span class="line">                dubboMetadataServiceURLs.forEach(dubboMetadataServiceURL -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initServiceKey(serviceName, dubboMetadataServiceURL);</span><br><span class="line">                        initSubscribedDubboMetadataServiceURL(dubboMetadataServiceURL);</span><br><span class="line">                        initDubboMetadataServiceProxy(dubboMetadataServiceURL);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">                            logger.error(e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//notice</span></span><br><span class="line">                DubboMetadataServiceInstancesChangedEvent event = <span class="keyword">new</span> DubboMetadataServiceInstancesChangedEvent(serviceName);</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(</span><br><span class="line">                            <span class="string">"The event of the service instances[name : &#123;&#125; , size : &#123;&#125;] change is about to be dispatched"</span>,</span><br><span class="line">                            serviceName, dubboMetadataServiceURLs.size());</span><br><span class="line">                &#125;</span><br><span class="line">                applicationEventPublisher.publishEvent(event);</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring扩展</title>
    <url>/2019/07/10/spring%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="bean扩展过程"><a href="#bean扩展过程" class="headerlink" title="bean扩展过程"></a>bean扩展过程</h3><ul>
<li>bean实例化之前<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InstantiationAwareBeanPostProcessor postProcessBeforeInstantiation</span><br><span class="line">BeanPostProcessor postProcessAfterInitialization</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>如果上方两个生成bean对象则直接返回</strong></p>
<ul>
<li>开始实例化</li>
<li>实例化之后设置属性之前<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MergedBeanDefinitionPostProcessor postProcessMergedBeanDefinition</span><br></pre></td></tr></table></figure></li>
<li>设置属性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InstantiationAwareBeanPostProcessor postProcessAfterInstantiation</span><br><span class="line">设置autowrie</span><br><span class="line">InstantiationAwareBeanPostProcessor postProcessProperties</span><br><span class="line">InstantiationAwareBeanPostProcessor postProcessPropertyValues</span><br><span class="line">校验needsDepCheck</span><br></pre></td></tr></table></figure></li>
<li>织入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanNameAware</span><br><span class="line">BeanClassLoaderAware</span><br><span class="line">BeanFactoryAware</span><br><span class="line">BeanPostProcessor postProcessBeforeInitialization</span><br><span class="line">InitializingBean 或者设置init-method</span><br><span class="line">BeanPostProcessor postProcessAfterInitialization</span><br><span class="line">registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br></pre></td></tr></table></figure>
<h3 id="单例和原型两个位置"><a href="#单例和原型两个位置" class="headerlink" title="单例和原型两个位置"></a>单例和原型两个位置</h3></li>
<li>AbstractFactoryBean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isSingleton()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.initialized ? <span class="keyword">this</span>.singletonInstance : getEarlySingletonInstance());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>springcloud配置自动刷新源码解析</title>
    <url>/2019/07/05/springcloud%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="扫描scope定义的入口"><a href="#扫描scope定义的入口" class="headerlink" title="扫描scope定义的入口"></a>扫描scope定义的入口</h2><p>ScopeMetadata默认值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private String scopeName &#x3D; BeanDefinition.SCOPE_SINGLETON;</span><br><span class="line"></span><br><span class="line">private ScopedProxyMode scopedProxyMode &#x3D; ScopedProxyMode.NO;</span><br></pre></td></tr></table></figure>
<p>@scope注解生成类过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; void doRegisterBean(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name,</span><br><span class="line">			@Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers) &#123;</span><br><span class="line"></span><br><span class="line">    AnnotatedGenericBeanDefinition abd &#x3D; new AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">    if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line">    ScopeMetadata scopeMetadata &#x3D; this.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">    abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    String beanName &#x3D; (name !&#x3D; null ? name : this.beanNameGenerator.generateBeanName(abd, this.registry));</span><br><span class="line">    &#x2F;&#x2F;设置值 @Lazy @Primary @DependsOn @Role @Description</span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">    if (qualifiers !&#x3D; null) &#123;</span><br><span class="line">        for (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line">            if (Primary.class &#x3D;&#x3D; qualifier) &#123;</span><br><span class="line">                abd.setPrimary(true);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Lazy.class &#x3D;&#x3D; qualifier) &#123;</span><br><span class="line">                abd.setLazyInit(true);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                abd.addQualifier(new AutowireCandidateQualifier(qualifier));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">        customizer.customize(abd);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    BeanDefinitionHolder definitionHolder &#x3D; new BeanDefinitionHolder(abd, beanName);</span><br><span class="line">    &#x2F;&#x2F;如果ScopedProxyMode不为ScopedProxyMode.NO就直接生成代理类</span><br><span class="line">    definitionHolder &#x3D; AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);</span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static BeanDefinitionHolder applyScopedProxyMode(</span><br><span class="line">        ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) &#123;</span><br><span class="line"></span><br><span class="line">    ScopedProxyMode scopedProxyMode &#x3D; metadata.getScopedProxyMode();</span><br><span class="line">    if (scopedProxyMode.equals(ScopedProxyMode.NO)) &#123;</span><br><span class="line">        return definition;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean proxyTargetClass &#x3D; scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS);</span><br><span class="line">    return ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成代理类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,</span><br><span class="line">			BeanDefinitionRegistry registry, boolean proxyTargetClass) &#123;</span><br><span class="line"></span><br><span class="line">    String originalBeanName &#x3D; definition.getBeanName();</span><br><span class="line">    BeanDefinition targetDefinition &#x3D; definition.getBeanDefinition();</span><br><span class="line">    String targetBeanName &#x3D; getTargetBeanName(originalBeanName);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Create a scoped proxy definition for the original bean name,</span><br><span class="line">    &#x2F;&#x2F; &quot;hiding&quot; the target bean in an internal target definition.</span><br><span class="line">    RootBeanDefinition proxyDefinition &#x3D; new RootBeanDefinition(ScopedProxyFactoryBean.class);</span><br><span class="line">    proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));</span><br><span class="line">    proxyDefinition.setOriginatingBeanDefinition(targetDefinition);</span><br><span class="line">    proxyDefinition.setSource(definition.getSource());</span><br><span class="line">    proxyDefinition.setRole(targetDefinition.getRole());</span><br><span class="line"></span><br><span class="line">    proxyDefinition.getPropertyValues().add(&quot;targetBeanName&quot;, targetBeanName);</span><br><span class="line">    if (proxyTargetClass) &#123;</span><br><span class="line">        targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">        &#x2F;&#x2F; ScopedProxyFactoryBean&#39;s &quot;proxyTargetClass&quot; default is TRUE, so we don&#39;t need to set it explicitly here.</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        proxyDefinition.getPropertyValues().add(&quot;proxyTargetClass&quot;, Boolean.FALSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Copy autowire settings from original bean definition.</span><br><span class="line">    proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate());</span><br><span class="line">    proxyDefinition.setPrimary(targetDefinition.isPrimary());</span><br><span class="line">    if (targetDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The target bean should be ignored in favor of the scoped proxy.</span><br><span class="line">    targetDefinition.setAutowireCandidate(false);</span><br><span class="line">    targetDefinition.setPrimary(false);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Register the target bean as separate bean in the factory.</span><br><span class="line">    registry.registerBeanDefinition(targetBeanName, targetDefinition);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return the scoped proxy definition as primary bean definition</span><br><span class="line">    &#x2F;&#x2F; (potentially an inner bean).</span><br><span class="line">    return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring被注解@Scope获取对象从BeanLifecycleWrapper中方法doGetBean（GenericScope）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String scopeName &#x3D; mbd.getScope();</span><br><span class="line">final Scope scope &#x3D; this.scopes.get(scopeName);</span><br><span class="line">if (scope &#x3D;&#x3D; null) &#123;</span><br><span class="line">    throw new IllegalStateException(&quot;No Scope registered for scope name &#39;&quot; + scopeName + &quot;&#39;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">    &#x2F;&#x2F;获取对象如@RefreshScope</span><br><span class="line">    Object scopedInstance &#x3D; scope.get(beanName, () -&gt; &#123;</span><br><span class="line">        beforePrototypeCreation(beanName);</span><br><span class="line">        try &#123;</span><br><span class="line">            return createBean(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            afterPrototypeCreation(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    bean &#x3D; getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">catch (IllegalStateException ex) &#123;</span><br><span class="line">    throw new BeanCreationException(beanName,</span><br><span class="line">            &quot;Scope &#39;&quot; + scopeName + &quot;&#39; is not active for the current thread; consider &quot; +</span><br><span class="line">            &quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;,</span><br><span class="line">            ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此方法中使用BeanFactory注册了一个refresh的范围，使得scope为refresh的bean生效。@RefreshScope标注的类还有一个特点：会使用代理对象并进行延迟加载。我们来看一下postProcessBeanDefinitionRegistry方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    this.beanFactory &#x3D; beanFactory;</span><br><span class="line">    beanFactory.registerScope(this.name, this);</span><br><span class="line">    setSerializationId(beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>该方法遍历所有的bean定义 如果当前的bean的scope为refresh,那么就把当前的bean设置为 LockedScopedProxyFactoryBean的代理对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    for (String name : registry.getBeanDefinitionNames()) &#123;</span><br><span class="line">        BeanDefinition definition &#x3D; registry.getBeanDefinition(name);</span><br><span class="line">        if (definition instanceof RootBeanDefinition) &#123;</span><br><span class="line">            RootBeanDefinition root &#x3D; (RootBeanDefinition) definition;</span><br><span class="line">            if (root.getDecoratedDefinition() !&#x3D; null &amp;&amp; root.hasBeanClass()</span><br><span class="line">                    &amp;&amp; root.getBeanClass() &#x3D;&#x3D; ScopedProxyFactoryBean.class) &#123;</span><br><span class="line">                if (getName().equals(root.getDecoratedDefinition().getBeanDefinition()</span><br><span class="line">                        .getScope())) &#123;</span><br><span class="line">                    root.setBeanClass(LockedScopedProxyFactoryBean.class);</span><br><span class="line">                    root.getConstructorArgumentValues().addGenericArgumentValue(this);</span><br><span class="line">                    &#x2F;&#x2F; surprising that a scoped proxy bean definition is not already</span><br><span class="line">                    &#x2F;&#x2F; marked as synthetic?</span><br><span class="line">                    root.setSynthetic(true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>springcloud配置刷新入口</p>
<h2 id="第一个入口"><a href="#第一个入口" class="headerlink" title="第一个入口"></a>第一个入口</h2><p>ConfigurationPropertiesRebinderAutoConfiguration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Endpoint(id &#x3D; &quot;refresh&quot;)</span><br><span class="line">public class RefreshEndpoint &#123;</span><br><span class="line"></span><br><span class="line">	private ContextRefresher contextRefresher;</span><br><span class="line"></span><br><span class="line">	public RefreshEndpoint(ContextRefresher contextRefresher) &#123;</span><br><span class="line">		this.contextRefresher &#x3D; contextRefresher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@WriteOperation</span><br><span class="line">	public Collection&lt;String&gt; refresh() &#123;</span><br><span class="line">		Set&lt;String&gt; keys &#x3D; this.contextRefresher.refresh();</span><br><span class="line">		return keys;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着往下看 <code>this.contextRefresher.refresh()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized Set&lt;String&gt; refresh() &#123;</span><br><span class="line">    &#x2F;&#x2F;刷新环境变量</span><br><span class="line">    Set&lt;String&gt; keys &#x3D; refreshEnvironment();</span><br><span class="line">    </span><br><span class="line">    this.scope.refreshAll();</span><br><span class="line">    return keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized Set&lt;String&gt; refreshEnvironment() &#123;</span><br><span class="line">    Map&lt;String, Object&gt; before &#x3D; extract(</span><br><span class="line">            this.context.getEnvironment().getPropertySources());</span><br><span class="line">    addConfigFilesToEnvironment();</span><br><span class="line">    &#x2F;&#x2F;获取变更的key</span><br><span class="line">    Set&lt;String&gt; keys &#x3D; changes(before,</span><br><span class="line">            extract(this.context.getEnvironment().getPropertySources())).keySet();</span><br><span class="line">    &#x2F;&#x2F;发布变更事件</span><br><span class="line">    this.context.publishEvent(new EnvironmentChangeEvent(this.context, keys));</span><br><span class="line">    return keys;</span><br><span class="line">&#125;</span><br><span class="line">private Map&lt;String, Object&gt; extract(MutablePropertySources propertySources) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; result &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">    List&lt;PropertySource&lt;?&gt;&gt; sources &#x3D; new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span><br><span class="line">    for (PropertySource&lt;?&gt; source : propertySources) &#123;</span><br><span class="line">        sources.add(0, source);</span><br><span class="line">    &#125;</span><br><span class="line">    for (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果不是标准的数据源</span><br><span class="line">        if (!this.standardSources.contains(source.getName())) &#123;</span><br><span class="line">            &#x2F;&#x2F;进行层级解析如：CompositePropertySource</span><br><span class="line">            extract(source, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void extract(PropertySource&lt;?&gt; parent, Map&lt;String, Object&gt; result) &#123;</span><br><span class="line">    if (parent instanceof CompositePropertySource) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;PropertySource&lt;?&gt;&gt; sources &#x3D; new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span><br><span class="line">            for (PropertySource&lt;?&gt; source : ((CompositePropertySource) parent)</span><br><span class="line">                    .getPropertySources()) &#123;</span><br><span class="line">                sources.add(0, source);</span><br><span class="line">            &#125;</span><br><span class="line">            for (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class="line">                extract(source, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (parent instanceof EnumerablePropertySource) &#123;</span><br><span class="line">        for (String key : ((EnumerablePropertySource&lt;?&gt;) parent).getPropertyNames()) &#123;</span><br><span class="line">            result.put(key, parent.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ConfigurationPropertiesRebinder（重新绑定）</span><br><span class="line">@Override</span><br><span class="line">public void onApplicationEvent(EnvironmentChangeEvent event) &#123;</span><br><span class="line">    if (this.applicationContext.equals(event.getSource())</span><br><span class="line">            &#x2F;&#x2F; Backwards compatible</span><br><span class="line">            || event.getKeys().equals(event.getSource())) &#123;</span><br><span class="line">        rebind();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@ManagedOperation</span><br><span class="line">public boolean rebind(String name) &#123;</span><br><span class="line">    if (!this.beans.getBeanNames().contains(name)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.applicationContext !&#x3D; null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Object bean &#x3D; this.applicationContext.getBean(name);</span><br><span class="line">            if (AopUtils.isAopProxy(bean)) &#123;</span><br><span class="line">                bean &#x3D; ProxyUtils.getTargetObject(bean);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;重新生成对象，先destroyBean后initializeBean</span><br><span class="line">            if (bean !&#x3D; null) &#123;</span><br><span class="line">                this.applicationContext.getAutowireCapableBeanFactory()</span><br><span class="line">                        .destroyBean(bean);</span><br><span class="line">                this.applicationContext.getAutowireCapableBeanFactory()</span><br><span class="line">                        .initializeBean(bean, name);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException e) &#123;</span><br><span class="line">            this.errors.put(name, e);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            this.errors.put(name, e);</span><br><span class="line">            throw new IllegalStateException(&quot;Cannot rebind to &quot; + name, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续进入<code>scope.refreshAll()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void refreshAll() &#123;</span><br><span class="line">    super.destroy();</span><br><span class="line">    this.context.publishEvent(new RefreshScopeRefreshedEvent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续进入 <code>super.destroy()</code>,这里其实是清除生成被@RefreshScope注解的bean实例，重新获取时属性被注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">    List&lt;Throwable&gt; errors &#x3D; new ArrayList&lt;Throwable&gt;();</span><br><span class="line">    Collection&lt;BeanLifecycleWrapper&gt; wrappers &#x3D; this.cache.clear();</span><br><span class="line">    for (BeanLifecycleWrapper wrapper : wrappers) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Lock lock &#x3D; this.locks.get(wrapper.getName()).writeLock();</span><br><span class="line">            lock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                wrapper.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException e) &#123;</span><br><span class="line">            errors.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!errors.isEmpty()) &#123;</span><br><span class="line">        throw wrapIfNecessary(errors.get(0));</span><br><span class="line">    &#125;</span><br><span class="line">    this.errors.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二个入口"><a href="#第二个入口" class="headerlink" title="第二个入口"></a>第二个入口</h2><p>生成事件RefreshEvent</p>
<p><strong>@RefreshScope最好配合@Bean使用，当且仅当变更配置后，需要重新获取最新的bean时使用。加上该注解的Bean会被代理并且延迟加载，所有的scope属性为Refresh的bean会被包装成BeanLifecycleWrapper存入缓存(ConcurrentHashMap)中,所有的读取，修改，删除都是基于该缓存的</strong></p>
]]></content>
      <categories>
        <category>spring</category>
        <category>spring-cloud</category>
      </categories>
      <tags>
        <tag>spring-cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>spring属性注入源码分析</title>
    <url>/2019/07/08/spring%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>tidb</title>
    <url>/2019/11/07/tidb/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>ansible方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环境依赖(centos)</span><br><span class="line">yum -y install epel-release git curl sshpass &amp;&amp; \</span><br><span class="line">yum -y install python2-pip</span><br><span class="line"></span><br><span class="line">环境依赖(ubuntu)</span><br><span class="line">apt-get -y install git curl sshpass python-pip</span><br><span class="line"></span><br><span class="line">下载</span><br><span class="line">git clone -b $tag https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;tidb-ansible.git</span><br><span class="line">安装</span><br><span class="line">cd &#x2F;home&#x2F;tidb&#x2F;tidb-ansible &amp;&amp; \</span><br><span class="line">sudo pip install -r .&#x2F;requirements.txt &amp;&amp; \</span><br><span class="line">ansible --version</span><br></pre></td></tr></table></figure></li>
<li>ansible离线方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载</span><br><span class="line">https:&#x2F;&#x2F;download.pingcap.org&#x2F;ansible-system-rpms.el7.tar.gz</span><br><span class="line">安装</span><br><span class="line">tar -xzvf ansible-system-rpms.el7.tar.gz &amp;&amp;</span><br><span class="line">cd ansible-system-rpms.el7 &amp;&amp;</span><br><span class="line">chmod u+x install_ansible_system_rpms.sh &amp;&amp;</span><br><span class="line">.&#x2F;install_ansible_system_rpms.sh</span><br><span class="line">查看状态</span><br><span class="line">pip -V</span><br><span class="line"></span><br><span class="line">下载</span><br><span class="line">https:&#x2F;&#x2F;download.pingcap.org&#x2F;ansible-2.5.0-pip.tar.gz</span><br><span class="line">安装</span><br><span class="line">tar -xzvf ansible-2.5.0-pip.tar.gz &amp;&amp;</span><br><span class="line">cd ansible-2.5.0-pip&#x2F; &amp;&amp;</span><br><span class="line">chmod u+x install_ansible.sh &amp;&amp;</span><br><span class="line">.&#x2F;install_ansible.sh</span><br><span class="line">查看状态</span><br><span class="line">ansible --version</span><br></pre></td></tr></table></figure></li>
<li>直接下载编译好的文件</li>
</ul>
]]></content>
      <tags>
        <tag>tidb</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc源码分析</title>
    <url>/2019/07/07/springmvc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="spring扫描入口-WebMvcAutoConfiguration"><a href="#spring扫描入口-WebMvcAutoConfiguration" class="headerlink" title="spring扫描入口 WebMvcAutoConfiguration"></a>spring扫描入口 WebMvcAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RequestMappingHandlerMapping <span class="title">createRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcRegistrations != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mvcRegistrations.getRequestMappingHandlerMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mvcRegistrations.getRequestMappingHandlerMapping();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.createRequestMappingHandlerMapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RequestMappingHandlerMapping继承InitializingBean，初始化后调用afterPropertiesSet中 AbstractHandlerMethodMapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initHandlerMethods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String beanName : getCandidateBeanNames()) &#123;</span><br><span class="line">        <span class="comment">//忽略延迟加载类</span></span><br><span class="line">        <span class="keyword">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</span><br><span class="line">            processCandidateBean(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handlerMethodsInitialized(getHandlerMethods());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> String[] getCandidateBeanNames() &#123;</span><br><span class="line">    <span class="comment">//是否从父容器获取</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.detectHandlerMethodsInAncestorContexts ?</span><br><span class="line">            BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :</span><br><span class="line">            obtainApplicationContext().getBeanNamesForType(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processCandidateBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; beanType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        beanType = obtainApplicationContext().getType(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">//忽略懒加载类</span></span><br><span class="line">        <span class="comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Could not resolve type for bean '"</span> + beanName + <span class="string">"'"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果注解@controller或者@RequestMapping</span></span><br><span class="line">    <span class="keyword">if</span> (beanType != <span class="keyword">null</span> &amp;&amp; isHandler(beanType)) &#123;</span><br><span class="line">        detectHandlerMethods(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller<span class="class">.<span class="keyword">class</span>) ||</span></span><br><span class="line"><span class="class">            <span class="title">AnnotatedElementUtils</span>.<span class="title">hasAnnotation</span>(<span class="title">beanType</span>, <span class="title">RequestMapping</span>.<span class="title">class</span>))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlerMethods</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; handlerType = (handler <span class="keyword">instanceof</span> String ?</span><br><span class="line">            obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handlerType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果cglib代理，获取父类即被代理类</span></span><br><span class="line">        Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line">        Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class="line">                (MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> getMappingForMethod(method, userType);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid mapping on handler class ["</span> +</span><br><span class="line">                                userType.getName() + <span class="string">"]: "</span> + method, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(formatMappings(userType, methods));</span><br><span class="line">        &#125;</span><br><span class="line">        methods.forEach((method, mapping) -&gt; &#123;</span><br><span class="line">            Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);</span><br><span class="line">            registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取RequestMappingInfo</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建方法的RequestMappingInfo</span></span><br><span class="line">		RequestMappingInfo info = createRequestMappingInfo(method);</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//创建处理类的RequestMappingInfo</span></span><br><span class="line">        RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);</span><br><span class="line">        <span class="keyword">if</span> (typeInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//合并RequestMappingInfo</span></span><br><span class="line">            info = typeInfo.combine(info);</span><br><span class="line">        &#125;</span><br><span class="line">        String prefix = getPathPrefix(handlerType);</span><br><span class="line">        <span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">            info = RequestMappingInfo.paths(prefix).build().combine(info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(AnnotatedElement element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否包含@RequestMapping注解</span></span><br><span class="line">    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    RequestCondition&lt;?&gt; condition = (element <span class="keyword">instanceof</span> Class ?</span><br><span class="line">            getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class="line">    <span class="comment">//如果有注解返回RequestMappingInfo</span></span><br><span class="line">    <span class="keyword">return</span> (requestMapping != <span class="keyword">null</span> ? createRequestMappingInfo(requestMapping, condition) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建RequestMappingInfo</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        RequestMapping requestMapping, @Nullable RequestCondition&lt;?&gt; customCondition)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RequestMappingInfo.Builder builder = RequestMappingInfo</span><br><span class="line">            .paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))</span><br><span class="line">            .methods(requestMapping.method())</span><br><span class="line">            .params(requestMapping.params())</span><br><span class="line">            .headers(requestMapping.headers())</span><br><span class="line">            .consumes(requestMapping.consumes())</span><br><span class="line">            .produces(requestMapping.produces())</span><br><span class="line">            .mappingName(requestMapping.name());</span><br><span class="line">    <span class="keyword">if</span> (customCondition != <span class="keyword">null</span>) &#123;</span><br><span class="line">        builder.customCondition(customCondition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.options(<span class="keyword">this</span>.config).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注入</p>
<ul>
<li>mappingLookup       RequestMappingInfo –&gt; HandlerMethod</li>
<li>urlLookup           url –&gt; RequestMappingInfo</li>
<li>addMappingName      name –&gt; handlerMethod</li>
<li>corsLookup          handlerMethod –&gt; corsConfig</li>
<li>registry            RequestMappingInfo –&gt; MappingRegistration<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void register(T mapping, Object handler, Method method) &#123;</span><br><span class="line">    this.readWriteLock.writeLock().lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        HandlerMethod handlerMethod &#x3D; createHandlerMethod(handler, method);</span><br><span class="line">        assertUniqueMethodMapping(handlerMethod, mapping);</span><br><span class="line">        this.mappingLookup.put(mapping, handlerMethod);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; directUrls &#x3D; getDirectUrls(mapping);</span><br><span class="line">        for (String url : directUrls) &#123;</span><br><span class="line">            this.urlLookup.add(url, mapping);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name &#x3D; null;</span><br><span class="line">        if (getNamingStrategy() !&#x3D; null) &#123;</span><br><span class="line">            name &#x3D; getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class="line">            addMappingName(name, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CorsConfiguration corsConfig &#x3D; initCorsConfiguration(handler, method, mapping);</span><br><span class="line">        if (corsConfig !&#x3D; null) &#123;</span><br><span class="line">            this.corsLookup.put(handlerMethod, corsConfig);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.registry.put(mapping, new MappingRegistration&lt;&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.readWriteLock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用户请求入口"><a href="#用户请求入口" class="headerlink" title="用户请求入口"></a>用户请求入口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;Match&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//根据url获取上一步的urlLookup得到RequestMappingInfo</span></span><br><span class="line">    List&lt;T&gt; directPathMatches = <span class="keyword">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class="line">    <span class="keyword">if</span> (directPathMatches != <span class="keyword">null</span>) &#123;</span><br><span class="line">        addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有则获取mappingLookup根据info.getMatchingCondition(request)添加匹配项</span></span><br><span class="line">    <span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// No choice but to go through all mappings...</span></span><br><span class="line">        addMatchingMappings(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line">        Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> MatchComparator(getMappingComparator(request));</span><br><span class="line">        matches.sort(comparator);</span><br><span class="line">        Match bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//最合适的匹配项不能大于2</span></span><br><span class="line">        <span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(matches.size() + <span class="string">" matching mappings: "</span> + matches);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">                <span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">            &#125;</span><br><span class="line">            Match secondBestMatch = matches.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">                Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">                Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">                String uri = request.getRequestURI();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">"Ambiguous handler methods mapped for '"</span> + uri + <span class="string">"': &#123;"</span> + m1 + <span class="string">", "</span> + m2 + <span class="string">"&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.handlerMethod);</span><br><span class="line">        handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">        <span class="keyword">return</span> bestMatch.handlerMethod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> handleNoMatch(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
进入handleMatch<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleMatch</span><span class="params">(RequestMappingInfo info, String lookupPath, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.handleMatch(info, lookupPath, request);</span><br><span class="line"></span><br><span class="line">    String bestPattern;</span><br><span class="line">    Map&lt;String, String&gt; uriVariables;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; patterns = info.getPatternsCondition().getPatterns();</span><br><span class="line">    <span class="keyword">if</span> (patterns.isEmpty()) &#123;</span><br><span class="line">        bestPattern = lookupPath;</span><br><span class="line">        uriVariables = Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bestPattern = patterns.iterator().next();</span><br><span class="line">        uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMatrixVariableContentAvailable()) &#123;</span><br><span class="line">        Map&lt;String, MultiValueMap&lt;String, String&gt;&gt; matrixVars = extractMatrixVariables(request, uriVariables);</span><br><span class="line">        request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables);</span><br><span class="line">    request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) &#123;</span><br><span class="line">        Set&lt;MediaType&gt; mediaTypes = info.getProducesCondition().getProducibleMediaTypes();</span><br><span class="line">        request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
执行controller方法invokeHandlerMethod<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">        invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">        modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">        AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">        asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">        asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">        asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">        asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">        asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            Object result = asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
        <category>spring-mvc</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring-mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>spring中@Autowire</title>
    <url>/2019/08/18/spring%E4%B8%AD-Autowire/</url>
    <content><![CDATA[<h3 id="DefaultListableBeanFactory-findAutowireCandidates"><a href="#DefaultListableBeanFactory-findAutowireCandidates" class="headerlink" title="DefaultListableBeanFactory findAutowireCandidates"></a>DefaultListableBeanFactory findAutowireCandidates</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Map&lt;String, Object&gt; findAutowireCandidates(</span><br><span class="line">        @Nullable String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor) &#123;</span><br><span class="line"></span><br><span class="line">    String[] candidateNames &#x3D; BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">            this, requiredType, true, descriptor.isEager());</span><br><span class="line">    Map&lt;String, Object&gt; result &#x3D; new LinkedHashMap&lt;&gt;(candidateNames.length);</span><br><span class="line">    for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; classObjectEntry : this.resolvableDependencies.entrySet()) &#123;</span><br><span class="line">        Class&lt;?&gt; autowiringType &#x3D; classObjectEntry.getKey();</span><br><span class="line">        if (autowiringType.isAssignableFrom(requiredType)) &#123;</span><br><span class="line">            Object autowiringValue &#x3D; classObjectEntry.getValue();</span><br><span class="line">            autowiringValue &#x3D; AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType);</span><br><span class="line">            if (requiredType.isInstance(autowiringValue)) &#123;</span><br><span class="line">                result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (String candidate : candidateNames) &#123;</span><br><span class="line">    	&#x2F;&#x2F;没有自身依赖且是候选的</span><br><span class="line">        if (!isSelfReference(beanName, candidate) &amp;&amp; isAutowireCandidate(candidate, descriptor)) &#123;</span><br><span class="line">            &#x2F;&#x2F;添加候选（缓存）</span><br><span class="line">            addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result.isEmpty()) &#123;</span><br><span class="line">        &#x2F;&#x2F;数据或集合对象</span><br><span class="line">        boolean multiple &#x3D; indicatesMultipleBeans(requiredType);</span><br><span class="line">        &#x2F;&#x2F; Consider fallback matches if the first pass failed to find anything...</span><br><span class="line">        &#x2F;&#x2F;判断泛型</span><br><span class="line">        DependencyDescriptor fallbackDescriptor &#x3D; descriptor.forFallbackMatch();</span><br><span class="line">        for (String candidate : candidateNames) &#123;</span><br><span class="line">            if (!isSelfReference(beanName, candidate) &amp;&amp; isAutowireCandidate(candidate, fallbackDescriptor) &amp;&amp;</span><br><span class="line">                    (!multiple || getAutowireCandidateResolver().hasQualifier(descriptor))) &#123;</span><br><span class="line">                addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (result.isEmpty() &amp;&amp; !multiple) &#123;</span><br><span class="line">            &#x2F;&#x2F; Consider self references as a final pass...</span><br><span class="line">            &#x2F;&#x2F; but in the case of a dependency collection, not the very same bean itself.</span><br><span class="line">            for (String candidate : candidateNames) &#123;</span><br><span class="line">                &#x2F;&#x2F;自身依赖工厂类（SPR-15125）</span><br><span class="line">                if (isSelfReference(beanName, candidate) &amp;&amp;</span><br><span class="line">                        (!(descriptor instanceof MultiElementDescriptor) || !beanName.equals(candidate)) &amp;&amp;</span><br><span class="line">                        isAutowireCandidate(candidate, fallbackDescriptor)) &#123;</span><br><span class="line">                    addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### DefaultListableBeanFactory isSelfReference</span><br></pre></td></tr></table></figure>
<p>private boolean isSelfReference(@Nullable String beanName, @Nullable String candidateName) {<br>    return (beanName != null &amp;&amp; candidateName != null &amp;&amp;<br>    //自我依赖或者跟class类名一致<br>    //@Autowired<br>    //private Test test;<br>    //@Bean<br>    //public Test test() {<br>    //    return new Test();<br>    //}<br>    //<br>    (beanName.equals(candidateName) || (containsBeanDefinition(candidateName) &amp;&amp;<br>            beanName.equals(getMergedLocalBeanDefinition(candidateName).getFactoryBeanName()))));<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### DefaultListableBeanFactory isAutowireCandidate</span><br></pre></td></tr></table></figure>
<p>@Override<br>public boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)<br>        throws NoSuchBeanDefinitionException {</p>
<pre><code>return isAutowireCandidate(beanName, descriptor, getAutowireCandidateResolver());</code></pre><p>}</p>
<p>protected boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor, AutowireCandidateResolver resolver)<br>        throws NoSuchBeanDefinitionException {</p>
<pre><code>String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);
if (containsBeanDefinition(beanDefinitionName)) {
    return isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor, resolver);
}
else if (containsSingleton(beanName)) {
    return isAutowireCandidate(beanName, new RootBeanDefinition(getType(beanName)), descriptor, resolver);
}

BeanFactory parent = getParentBeanFactory();
if (parent instanceof DefaultListableBeanFactory) {
    // No bean definition found in this factory -&gt; delegate to parent.
    return ((DefaultListableBeanFactory) parent).isAutowireCandidate(beanName, descriptor, resolver);
}
else if (parent instanceof ConfigurableListableBeanFactory) {
    // If no DefaultListableBeanFactory, can&apos;t pass the resolver along.
    return ((ConfigurableListableBeanFactory) parent).isAutowireCandidate(beanName, descriptor);
}
else {
    return true;
}</code></pre><p>}<br>protected boolean isAutowireCandidate(String beanName, RootBeanDefinition mbd,<br>            DependencyDescriptor descriptor, AutowireCandidateResolver resolver) {</p>
<pre><code>String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);
resolveBeanClass(mbd, beanDefinitionName);
//是工厂方法，还没构建工厂类
if (mbd.isFactoryMethodUnique &amp;&amp; mbd.factoryMethodToIntrospect == null) {
    //进行创建工厂方法对象factoryMethodToIntrospect
    new ConstructorResolver(this).resolveFactoryMethodIfPossible(mbd);
}
return resolver.isAutowireCandidate(
        new BeanDefinitionHolder(mbd, beanName, getAliases(beanDefinitionName)), descriptor);</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###</span><br></pre></td></tr></table></figure>
<p>public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {<br>        Class&lt;?&gt; factoryClass;<br>    boolean isStatic;<br>    //是否工厂方法构建<br>    if (mbd.getFactoryBeanName() != null) {<br>        factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName());<br>        isStatic = false;<br>    }<br>    else {<br>        factoryClass = mbd.getBeanClass();<br>        isStatic = true;<br>    }<br>    Assert.state(factoryClass != null, “Unresolvable factory class”);<br>    factoryClass = ClassUtils.getUserClass(factoryClass);</p>
<pre><code>Method[] candidates = getCandidateMethods(factoryClass, mbd);
Method uniqueCandidate = null;
//循环获取候选对象的工厂方法
for (Method candidate : candidates) {
    if (Modifier.isStatic(candidate.getModifiers()) == isStatic &amp;&amp; mbd.isFactoryMethod(candidate)) {
        if (uniqueCandidate == null) {
            uniqueCandidate = candidate;
        }
        else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {
            uniqueCandidate = null;
            break;
        }
    }
}
mbd.factoryMethodToIntrospect = uniqueCandidate;</code></pre><p>}</p>
<h3 id="QualifierAnnotationAutowireCandidateResolver"><a href="#QualifierAnnotationAutowireCandidateResolver" class="headerlink" title="QualifierAnnotationAutowireCandidateResolver"></a>QualifierAnnotationAutowireCandidateResolver</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> match = <span class="keyword">super</span>.isAutowireCandidate(bdHolder, descriptor);</span><br><span class="line">    <span class="comment">// 这里发现，及时父类都匹配上了，我本来还得再次校验一把~~~</span></span><br><span class="line">    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        <span class="comment">// @Qualifier注解在此处生效  最终可能匹配出一个或者0个出来</span></span><br><span class="line">        match = checkQualifiers(bdHolder, descriptor.getAnnotations());</span><br><span class="line">        <span class="comment">// 若字段上匹配上了还不行，还得看方法上的这个注解</span></span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="comment">// 这里处理的是方法入参们~~~~  只有方法有入参才需要继续解析</span></span><br><span class="line">            MethodParameter methodParam = descriptor.getMethodParameter();</span><br><span class="line">            <span class="keyword">if</span> (methodParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Method method = methodParam.getMethod();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 这个处理非常有意思：methodParam.getMethod()表示这个入参它所属于的方法(即构造方法)</span></span><br><span class="line">                <span class="comment">// 如果它不属于任何方法或者属于方法的返回值是void  才去看它头上标注的@Qualifier注解</span></span><br><span class="line">                <span class="keyword">if</span> (method == <span class="keyword">null</span> || <span class="keyword">void</span><span class="class">.<span class="keyword">class</span> </span>== method.getReturnType()) &#123;</span><br><span class="line">                    match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> match;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Match the given qualifier annotations against the candidate bean definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkQualifiers</span><span class="params">(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(annotationsToSearch)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SimpleTypeConverter typeConverter = <span class="keyword">new</span> SimpleTypeConverter();</span><br><span class="line">    <span class="keyword">for</span> (Annotation annotation : annotationsToSearch) &#123;</span><br><span class="line">        Class&lt;? extends Annotation&gt; type = annotation.annotationType();</span><br><span class="line">        <span class="keyword">boolean</span> checkMeta = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> fallbackToMeta = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//存在 @Qualifier</span></span><br><span class="line">        <span class="keyword">if</span> (isQualifier(type)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkQualifier(bdHolder, annotation, typeConverter)) &#123;</span><br><span class="line">                fallbackToMeta = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                checkMeta = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两种情况下执行，一是存在 @Qualifier 校验失败；二是不存在 @Qualifier</span></span><br><span class="line">        <span class="keyword">if</span> (checkMeta) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> foundMeta = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Annotation metaAnn : type.getAnnotations()) &#123;</span><br><span class="line">                Class&lt;? extends Annotation&gt; metaType = metaAnn.annotationType();</span><br><span class="line">                <span class="keyword">if</span> (isQualifier(metaType)) &#123;</span><br><span class="line">                    foundMeta = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// Only accept fallback match if @Qualifier annotation has a value...</span></span><br><span class="line">                    <span class="comment">// Otherwise it is just a marker for a custom qualifier annotation.</span></span><br><span class="line">                    <span class="keyword">if</span> ((fallbackToMeta &amp;&amp; StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||</span><br><span class="line">                            !checkQualifier(bdHolder, metaAnn, typeConverter)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fallbackToMeta &amp;&amp; !foundMeta) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks whether the given annotation type is a recognized qualifier type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isQualifier</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; qualifierType : <span class="keyword">this</span>.qualifierTypes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Match the given qualifier annotation against the candidate bean definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkQualifier</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; type = annotation.annotationType();</span><br><span class="line">    RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">    AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName());</span><br><span class="line">    <span class="keyword">if</span> (qualifier == <span class="keyword">null</span>) &#123;</span><br><span class="line">        qualifier = bd.getQualifier(ClassUtils.getShortName(type));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qualifier == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//在元素上</span></span><br><span class="line">        <span class="comment">// First, check annotation on qualified element, if any</span></span><br><span class="line">        Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type);</span><br><span class="line">        <span class="comment">//在工厂方法上</span></span><br><span class="line">        <span class="comment">// Then, check annotation on factory method, if applicable</span></span><br><span class="line">        <span class="keyword">if</span> (targetAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetAnnotation = getFactoryMethodAnnotation(bd, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd);</span><br><span class="line">            <span class="keyword">if</span> (dbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                targetAnnotation = getFactoryMethodAnnotation(dbd, type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//查找匹配的类</span></span><br><span class="line">            <span class="comment">// Look for matching annotation on the target class</span></span><br><span class="line">            <span class="keyword">if</span> (getBeanFactory() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Class&lt;?&gt; beanType = getBeanFactory().getType(bdHolder.getBeanName());</span><br><span class="line">                    <span class="keyword">if</span> (beanType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                    <span class="comment">// Not the usual case - simply forget about the type check...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (targetAnnotation == <span class="keyword">null</span> &amp;&amp; bd.hasBeanClass()) &#123;</span><br><span class="line">                targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetAnnotation != <span class="keyword">null</span> &amp;&amp; targetAnnotation.equals(annotation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. bd.qualifier 中的属性和 @Qualifier 中配置的进行对比</span></span><br><span class="line">    <span class="comment">//    attributes 为 @Qualifier 注解信息，value 有一个默认值 ""</span></span><br><span class="line">    <span class="comment">//    qualifier 为 bd 中的配置，默认为 null</span></span><br><span class="line">    Map&lt;String, Object&gt; attributes = AnnotationUtils.getAnnotationAttributes(annotation);</span><br><span class="line">    <span class="keyword">if</span> (attributes.isEmpty() &amp;&amp; qualifier == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// If no attributes, the qualifier must be present</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : attributes.entrySet()) &#123;</span><br><span class="line">        String attributeName = entry.getKey();</span><br><span class="line">        Object expectedValue = entry.getValue();</span><br><span class="line">        Object actualValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// Check qualifier first</span></span><br><span class="line">        <span class="comment">//获取qualifier属性值</span></span><br><span class="line">        <span class="keyword">if</span> (qualifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            actualValue = qualifier.getAttribute(attributeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取definition attribute属性值</span></span><br><span class="line">        <span class="keyword">if</span> (actualValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Fall back on bean definition attribute</span></span><br><span class="line">            actualValue = bd.getAttribute(attributeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//匹配bean name (or alias)</span></span><br><span class="line">        <span class="keyword">if</span> (actualValue == <span class="keyword">null</span> &amp;&amp; attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &amp;&amp;</span><br><span class="line">                expectedValue <span class="keyword">instanceof</span> String &amp;&amp; bdHolder.matchesName((String) expectedValue)) &#123;</span><br><span class="line">            <span class="comment">// Fall back on bean name (or alias) match</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取默认值</span></span><br><span class="line">        <span class="keyword">if</span> (actualValue == <span class="keyword">null</span> &amp;&amp; qualifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Fall back on default, but only if the qualifier is present</span></span><br><span class="line">            actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类型转换</span></span><br><span class="line">        <span class="keyword">if</span> (actualValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!expectedValue.equals(actualValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>virtualBox</title>
    <url>/2019/10/31/virtualBox/</url>
    <content><![CDATA[<h4 id="增强提示错误"><a href="#增强提示错误" class="headerlink" title="增强提示错误"></a>增强提示错误</h4><ul>
<li>选择设备-分配光驱-选择虚拟盘-VBoxGuestAdditions.iso</li>
<li>挂载<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;cdrom &#x2F;tmp&#x2F;</span><br><span class="line">cp -r &#x2F;tmp&#x2F; &#x2F;mnt&#x2F;</span><br><span class="line">chmod -R +rw &#x2F;mnt&#x2F;tmp</span><br></pre></td></tr></table></figure></li>
<li>安装yum install elfutils-devel</li>
<li>重启reboot</li>
<li>运行VBoxLinuxAdditions.run<h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4></li>
<li>设置-常规-高级-双向</li>
<li>设置-存储-控制器SATA-勾选”使用主机输入输出(I/O)缓存”</li>
<li>再同样在存储-控制器SATA-点击***.vdi-勾选”固态驱动器”</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>spring注入属性</title>
    <url>/2019/08/18/spring%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对实例做的一个判空校验</span><br><span class="line">    if (bw &#x3D;&#x3D; null) &#123;</span><br><span class="line">        if (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Cannot apply property values to null instance&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; Skip property population phase for null instance.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="line">    &#x2F;&#x2F; state of the bean before properties are set. This can be used, for example,</span><br><span class="line">    &#x2F;&#x2F; to support styles of field injection.</span><br><span class="line">    boolean continueWithPropertyPopulation &#x3D; true;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;给InstantiationAwareBeanPostProcessors最后一次机会在属性注入前修改Bean的属性值</span><br><span class="line">    &#x2F;&#x2F;具体通过调用postProcessAfterInstantiation方法，如果调用返回false,表示不必继续进行依赖注入，直接返回</span><br><span class="line">    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp &#x3D; (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            </span><br><span class="line">                &#x2F;&#x2F;postProcessAfterInstantiation 这个方法返回true，后面的处理器才会继续执行，单反返回false，后面的就不会再执行了</span><br><span class="line">                &#x2F;&#x2F;并且continueWithPropertyPopulation 打上标记表示false，也就是说后面的属性复制就不会再执行了</span><br><span class="line">                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation &#x3D; false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 处理器若告知说不用继续赋值了，那就以处理器的结果为准即可</span><br><span class="line">    if (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;pvs是一个MutablePropertyValues实例，里面实现了PropertyValues接口，提供属性的读写操作实现，同时可以通过调用构造函数实现深拷贝</span><br><span class="line">    &#x2F;&#x2F;本例中，我们的helloServiceImpl的Bean定义里，pvs为null</span><br><span class="line">    PropertyValues pvs &#x3D; (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据Bean配置的依赖注入方式完成注入，默认是0，即不走以下逻辑，所有的依赖注入都需要在xml（或者@Bean中）文件中有显式的配置</span><br><span class="line">    &#x2F;&#x2F;如果设置了相关的依赖装配方式，会遍历Bean中的属性，根据类型或名称来完成相应注入，无需额外配置</span><br><span class="line">    if (mbd.getResolvedAutowireMode() &#x3D;&#x3D; RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">            mbd.getResolvedAutowireMode() &#x3D;&#x3D; RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        &#x2F;&#x2F; 深拷贝当前已有的配置</span><br><span class="line">        MutablePropertyValues newPvs &#x3D; new MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Add property values based on autowire by name if applicable.</span><br><span class="line">        &#x2F;&#x2F; 根据名称进行注入（见下）</span><br><span class="line">        if (mbd.getResolvedAutowireMode() &#x3D;&#x3D; RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Add property values based on autowire by type if applicable.</span><br><span class="line">        &#x2F;&#x2F; 根据类型进行注入（见下）</span><br><span class="line">        if (mbd.getResolvedAutowireMode() &#x3D;&#x3D; RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;结合注入后的配置，覆盖当前配置</span><br><span class="line">        pvs &#x3D; newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 显然hasInstAwareBpps&#x3D;true，</span><br><span class="line">    boolean hasInstAwareBpps &#x3D; hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    &#x2F;&#x2F;是否进行依赖检查  默认值就是None  所以此处返回false，表示不需要依赖检查(关于依赖检查的4种模式,建议使用@Required来显示控制)</span><br><span class="line">    &#x2F;&#x2F;@Required注解作用于Beansetter方法上，用于检查一个Bean的属性的值在配置期间是否被赋予或设置(populated)</span><br><span class="line">    boolean needsDepCheck &#x3D; (mbd.getDependencyCheck() !&#x3D; RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    if (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        if (pvs &#x3D;&#x3D; null) &#123;</span><br><span class="line">            pvs &#x3D; mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 过滤出所有需要进行依赖检查的属性编辑器</span><br><span class="line">        PropertyDescriptor[] filteredPds &#x3D; filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 在这个节点上：调用了InstantiationAwareBeanPostProcessor#postProcessPropertyValues方法，</span><br><span class="line">        &#x2F;&#x2F; 若返回null，整个populateBean方法就结束了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        if (hasInstAwareBpps) &#123;</span><br><span class="line">            for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp &#x3D; (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    &#x2F;&#x2F; 关于postProcessPropertyValues的实现，有几个处理器是非常关键的：</span><br><span class="line">                    &#x2F;&#x2F; 比如AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等等,且看下面的分解</span><br><span class="line">                    pvs &#x3D; ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    &#x2F;&#x2F; 若返回null，Spring表示你已经属性值都设置好了，那他也不再管了</span><br><span class="line">                    if (pvs &#x3D;&#x3D; null) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 显然，现在大多数情况下，都不会在check这个了</span><br><span class="line">        if (needsDepCheck) &#123;</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将pvs上所有的属性填充到BeanWrapper对应的Bean实例中</span><br><span class="line">    &#x2F;&#x2F; 注意：这一步完成结束后为止。我们的HelloServiceImpl这个Bean依赖的parent，还只是RuntimeBeanReference类型，还并不是真实的Parent这个Bean</span><br><span class="line">    &#x2F;&#x2F;在Spring的解析段，其它容器中是没有依赖的Bean的实例的，因此这个被依赖的Bean需要表示成RuntimeBeanReferenc对象，并将它放到BeanDefinition的MutablePropertyValues中。</span><br><span class="line">    if (pvs !&#x3D; null) &#123;</span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>tomcat集群</title>
    <url>/2019/10/24/tomcat%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><h4 id="nginx同一个session访问同一个tomcat"><a href="#nginx同一个session访问同一个tomcat" class="headerlink" title="nginx同一个session访问同一个tomcat"></a>nginx同一个session访问同一个tomcat</h4><h4 id="tomcat自带session共享"><a href="#tomcat自带session共享" class="headerlink" title="tomcat自带session共享"></a>tomcat自带session共享</h4><ul>
<li>在conf/server.xml文件中找到这行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Engine name&#x3D;&quot;Catalina&quot; defaultHost&#x3D;&quot;localhost&quot;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第1步：修改server.xml，在Host节点下添加如下Cluster节点 --&gt;</span><br><span class="line">&lt;!-- 用于Session复制 --&gt;</span><br><span class="line">&lt;Cluster className&#x3D;&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot; channelSendOptions&#x3D;&quot;8&quot;&gt;</span><br><span class="line">    &lt;Manager className&#x3D;&quot;org.apache.catalina.ha.session.DeltaManager&quot; expireSessionsOnShutdown&#x3D;&quot;false&quot; notifyListenersOnReplication&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">    &lt;Channel className&#x3D;&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class="line">        &lt;Membership className&#x3D;&quot;org.apache.catalina.tribes.membership.McastService&quot; address&#x3D;&quot;228.0.0.4&quot; </span><br><span class="line">                    port&#x3D;&quot;45564&quot; frequency&#x3D;&quot;500&quot; dropTime&#x3D;&quot;3000&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- 这里如果启动出现异常，则可以尝试把address中的&quot;auto&quot;改为&quot;localhost&quot; --&gt;</span><br><span class="line">        &lt;Receiver className&#x3D;&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot; address&#x3D;&quot;auto&quot; port&#x3D;&quot;4000&quot; </span><br><span class="line">                  autoBind&#x3D;&quot;100&quot; selectorTimeout&#x3D;&quot;5000&quot; maxThreads&#x3D;&quot;6&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Sender className&#x3D;&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class="line">            &lt;Transport className&#x3D;&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Sender&gt;</span><br><span class="line">        &lt;Interceptor className&#x3D;&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Interceptor className&#x3D;&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Channel&gt;</span><br><span class="line">    &lt;Valve className&#x3D;&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot; filter&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;Valve className&#x3D;&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; &#x2F;&gt;</span><br><span class="line">    &lt;Deployer className&#x3D;&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot; tempDir&#x3D;&quot;&#x2F;tmp&#x2F;war-temp&#x2F;&quot; </span><br><span class="line">              deployDir&#x3D;&quot;&#x2F;tmp&#x2F;war-deploy&#x2F;&quot; watchDir&#x3D;&quot;&#x2F;tmp&#x2F;war-listen&#x2F;&quot; watchEnabled&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">    &lt;ClusterListener className&#x3D;&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Cluster&gt;</span><br><span class="line"></span><br><span class="line">使用这样方法配置的集群会将session同步到所在网段上的所有配置了集群属性的实例上(此处讲所在网段可能不准确，是使用Membership 的address和port来区分的。</span><br><span class="line">tomcat集群的实例如果在Membership配置中有相同的address和port值的tomcat被分到同一个集群里边。他们的session是相互共享的，同一个session的集群被称为一个cluster。</span><br><span class="line">可以配置多个cluster，但是cluster和cluster之间的session是不共享的)。</span><br><span class="line">也就是说如果该广播地址下的所有Tomcat实例都会共享Session，那么假如有几个互不相关的集群，就可能造成Session复制浪费。</span><br><span class="line"> </span><br><span class="line">&lt;!-- 第2步：在web.xml中添加如下节点 --&gt;</span><br><span class="line">&lt;!-- 用于Session复制 --&gt;</span><br><span class="line">&lt;distributable&#x2F;&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="redis-session-conf-context-xml"><a href="#redis-session-conf-context-xml" class="headerlink" title="redis-session (conf/context.xml)"></a>redis-session (conf/context.xml)</h4><ul>
<li>reids单机<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;Context&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span><br><span class="line">    &lt;!-- web application will be reloaded.                                   --&gt;</span><br><span class="line">    &lt;WatchedResource&gt;WEB-INF&#x2F;web.xml&lt;&#x2F;WatchedResource&gt;</span><br><span class="line">    &lt;WatchedResource&gt;$&#123;catalina.base&#125;&#x2F;conf&#x2F;web.xml&lt;&#x2F;WatchedResource&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Manager pathname&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Uncomment this to enable Comet connection tacking (provides events</span><br><span class="line">         on session expiration as well as webapp lifecycle) --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Valve className&#x3D;&quot;org.apache.catalina.valves.CometConnectionManagerValve&quot; &#x2F;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;!-- tomcat-redis-session共享配置 --&gt;  </span><br><span class="line">&lt;Valve className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; &#x2F;&gt;  </span><br><span class="line">&lt;Manager className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;  </span><br><span class="line">    host&#x3D;&quot;193.112.76.19&quot;  </span><br><span class="line">    port&#x3D;&quot;6379&quot;  </span><br><span class="line">    database&#x3D;&quot;0&quot;</span><br><span class="line">    password&#x3D;&quot;123456&quot;  </span><br><span class="line">    maxInactiveInterval&#x3D;&quot;60&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure></li>
<li>redis集群<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">sentinels</span>=<span class="string">"192.168.9.223:30001,192.168.9.223:30002"</span> /&gt;</span>          #这里是redis哨兵的地址,多个sentinels集群就写多个ip地址</span><br><span class="line">         maxInactiveInterval="60"</span><br><span class="line">         sentinelMaster="mymaster"                                       #这里是sentinel的master名称，一定不要写错</span><br><span class="line">         password="123456"&gt;                                              #还有认证密码</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="spring-session"><a href="#spring-session" class="headerlink" title="spring-session"></a>spring-session</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.zaomianbao.appdemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableRedisHttpSession</span><br><span class="line">public class RedisSessionConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>uid生成算法</title>
    <url>/2019/09/04/uid%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="四种算法"><a href="#四种算法" class="headerlink" title="四种算法"></a>四种算法</h3><p>– 居于美团leaf、百度UidGenerator、原生snowflake 进行整合的 唯一ID生成器<br>[ <a href="https://github.com/linhuaichuan/ecp-uid" target="_blank" rel="noopener">https://github.com/linhuaichuan/ecp-uid</a> ]<br>[ <a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/04/21/mt-leaf.html</a> ]<br>[ <a href="https://javascript.ctolib.com/linhuaichuan-ecp-uid.html" target="_blank" rel="noopener">https://javascript.ctolib.com/linhuaichuan-ecp-uid.html</a> ]<br>原理<br>[ <a href="https://segmentfault.com/a/1190000011282426" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011282426</a> ]<br>异常<br>[ <a href="https://www.javazhiyin.com/14779.html" target="_blank" rel="noopener">https://www.javazhiyin.com/14779.html</a> ]</p>
]]></content>
  </entry>
  <entry>
    <title>volatile无法保证 i++ 操作的线程可见性呢</title>
    <url>/2019/05/26/volatile%E6%97%A0%E6%B3%95%E4%BF%9D%E8%AF%81%20i++%20%E6%93%8D%E4%BD%9C%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%8F%AF%E8%A7%81%E6%80%A7%E5%91%A2/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>如果你对volatile不陌生的话，应该会知道volatile能够保证共享变量对线程的可见性。<br>那为什么volatile无法保证 i++ 操作的线程可见性呢？</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>假设i的初始值为0，现有两个线程，分别为线程1和线程2进行 i++ 操作，我们来分析一下为什么会出现错误。</p>
<p>首先，i++并不是原子操作，我们可以将这个操作拆分为3个步骤。</p>
<ol>
<li>线程从主内存把遍历加载到缓存。</li>
<li>线程执行i++操作。</li>
<li>线程将i的新值刷新到主内存。</li>
</ol>
<p>那么进行如下过程，则会发生线程安全问题。</p>
<ol>
<li>线程1将变量加载到缓存。但是还没有执行 i++ 操作。</li>
<li>线程2将变量加载到缓存，然后执行i++操作。</li>
<li>由于线程2缓存变量已经发生了变化，使得线程1的缓存行无效。</li>
<li>按我们以前的理解，由于线程1缓存行无效，那线程1应该主动去主内存load最新的值。而实际上并不是这样的，volatile的作用并不是在变量改变的时候，让其他线程重新加载主内存的变量值，而是置其他线程缓存内的变量值无效。也就是说，假如线程1的i值已经被加载到了寄存器，参与i++运算，那么此时即便线程1的i值被置为无效，那线程1的计算结果也会把线程1从主内存刷新到的缓存值覆盖，导致数据错误。</li>
</ol>
<hr>
<p><a href="https://blog.csdn.net/liuzhixiong_521/article/details/85246543" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <categories>
        <category>thread</category>
      </categories>
      <tags>
        <tag>thread</tag>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>sql</title>
    <url>/2019/08/17/sql/</url>
    <content><![CDATA[<h3 id="行列互转"><a href="#行列互转" class="headerlink" title="行列互转"></a>行列互转</h3><h1 id="拼接sql"><a href="#拼接sql" class="headerlink" title="拼接sql"></a>拼接sql</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE</span><br><span class="line">IF EXISTS sp_score;</span><br><span class="line">DELIMITER &amp;&amp;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE sp_score ()</span><br><span class="line">BEGIN</span><br><span class="line">	#课程名称</span><br><span class="line">	DECLARE</span><br><span class="line">		cname_n VARCHAR (20) ; #所有课程数量</span><br><span class="line">		DECLARE</span><br><span class="line">			count INT ; #计数器</span><br><span class="line">			DECLARE</span><br><span class="line">				i INT DEFAULT 0 ; #拼接SQL字符串</span><br><span class="line">			SET @s &#x3D; &#39;SELECT sname&#39; ;</span><br><span class="line">			SET count &#x3D; (</span><br><span class="line">				SELECT</span><br><span class="line">					COUNT(DISTINCT cname)</span><br><span class="line">				FROM</span><br><span class="line">					stdscore</span><br><span class="line">			) ;</span><br><span class="line">			WHILE i &lt; count DO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			SET cname_n &#x3D; (</span><br><span class="line">				SELECT</span><br><span class="line">					cname</span><br><span class="line">				FROM</span><br><span class="line">					stdscore</span><br><span class="line">				GROUP BY CNAME </span><br><span class="line">				LIMIT i,</span><br><span class="line">				1</span><br><span class="line">			) ;</span><br><span class="line">			SET @s &#x3D; CONCAT(</span><br><span class="line">				@s,</span><br><span class="line">				&#39;, SUM(CASE cname WHEN &#39;,</span><br><span class="line">				&#39;\&#39;&#39;,</span><br><span class="line">				cname_n,</span><br><span class="line">				&#39;\&#39;&#39;,</span><br><span class="line">				&#39; THEN score ELSE 0 END)&#39;,</span><br><span class="line">				&#39; AS &#39;,</span><br><span class="line">				&#39;\&#39;&#39;,</span><br><span class="line">				cname_n,</span><br><span class="line">				&#39;\&#39;&#39;</span><br><span class="line">			) ;</span><br><span class="line">			SET i &#x3D; i + 1 ;</span><br><span class="line">			END</span><br><span class="line">			WHILE ;</span><br><span class="line">			SET @s &#x3D; CONCAT(</span><br><span class="line">				@s,</span><br><span class="line">				&#39; FROM stdscore GROUP BY sname&#39;</span><br><span class="line">			) ; #用于调试</span><br><span class="line">			#SELECT @s;</span><br><span class="line">			PREPARE stmt</span><br><span class="line">			FROM</span><br><span class="line">				@s ; EXECUTE stmt ;</span><br><span class="line">			END&amp;&amp;</span><br><span class="line"></span><br><span class="line">CALL sp_score () ;</span><br></pre></td></tr></table></figure>

<h1 id="动态行转列"><a href="#动态行转列" class="headerlink" title="动态行转列"></a>动态行转列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @EE&#x3D;&#39;&#39;;</span><br><span class="line">SELECT @EE:&#x3D;GROUP_CONCAT(@EE,&#39;sum(if(val&#x3D;\&#39;&#39;,val,&#39;\&#39;&#39;,&#39;,id,0)) as &#39;,&#39;&#39;&#39;&#39;,val,&#39;&#39;&#39;&#39;) from (select DISTINCT val from hl_test)a;</span><br><span class="line">SET @str&#x3D;CONCAT(&#39;select &#39;,@EE,&#39; from hl_test group by id&#39;);</span><br><span class="line">PREPARE stmt from @str;</span><br><span class="line">EXECUTE stmt;</span><br></pre></td></tr></table></figure>

<h1 id="动态列转行"><a href="#动态列转行" class="headerlink" title="动态列转行"></a>动态列转行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @EE&#x3D;&#39;&#39;;</span><br><span class="line">set @str_tmp&#x3D;&#39;&#39;;</span><br><span class="line">SELECT @EE:&#x3D;CONCAT(@EE,&#39;GROUP_CONCAT(IF(type&#x3D;\&#39;&#39;,type,&#39;\&#39;&#39;,&#39;,value,null)) AS &#39;,type,&#39;,&#39;) as aa into @str_tmp FROM (SELECT DISTINCT type FROM product_category) A order by length(aa) desc limit 1; </span><br><span class="line">SET @QQ&#x3D;CONCAT(&#39;SELECT product_category.product_id,&#39;,LEFT(@str_tmp,char_length(@str_tmp)-1),&#39;   FROM product_category GROUP BY product_id&#39;);</span><br><span class="line">PREPARE stmt FROM @QQ; </span><br><span class="line">EXECUTE stmt;</span><br><span class="line">deallocate prepare stmt;</span><br></pre></td></tr></table></figure>



<h1 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT user_name ,</span><br><span class="line">    MAX(CASE course WHEN &#39;数学&#39; THEN score ELSE 0 END ) 数学,</span><br><span class="line">    MAX(CASE course WHEN &#39;语文&#39; THEN score ELSE 0 END ) 语文,</span><br><span class="line">    MAX(CASE course WHEN &#39;英语&#39; THEN score ELSE 0 END ) 英语</span><br><span class="line">FROM test_tb_grade</span><br><span class="line">GROUP BY USER_NAME;</span><br></pre></td></tr></table></figure>

<h1 id="列转行SQL："><a href="#列转行SQL：" class="headerlink" title="列转行SQL："></a>列转行SQL：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user_name, &#39;语文&#39; COURSE , CN_SCORE as SCORE from test_tb_grade2</span><br><span class="line">union select user_name, &#39;数学&#39; COURSE, MATH_SCORE as SCORE from test_tb_grade2</span><br><span class="line">union select user_name, &#39;英语&#39; COURSE, EN_SCORE as SCORE from test_tb_grade2</span><br><span class="line">order by user_name,COURSE;</span><br></pre></td></tr></table></figure>






<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学生表</span><br><span class="line">就简单一点，学生学号、学生姓名两个字段</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;stuid&#96; VARCHAR(16) NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">  &#96;stunm&#96; VARCHAR(20) NOT NULL COMMENT &#39;学生姓名&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;stuid&#96;)</span><br><span class="line">)</span><br><span class="line">COLLATE&#x3D;&#39;utf8_general_ci&#39;</span><br><span class="line">ENGINE&#x3D;InnoDB;</span><br><span class="line">课程表</span><br><span class="line">课程编号、课程名</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;courses&#96; (</span><br><span class="line">  &#96;courseno&#96; VARCHAR(20) NOT NULL,</span><br><span class="line">  &#96;coursenm&#96; VARCHAR(100) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;courseno&#96;)</span><br><span class="line">)</span><br><span class="line">COMMENT&#x3D;&#39;课程表&#39;</span><br><span class="line">COLLATE&#x3D;&#39;utf8_general_ci&#39;</span><br><span class="line">ENGINE&#x3D;InnoDB;</span><br><span class="line">成绩表</span><br><span class="line">学生学号、课程号、成绩</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;score&#96; (</span><br><span class="line">  &#96;stuid&#96; VARCHAR(16) NOT NULL,</span><br><span class="line">  &#96;courseno&#96; VARCHAR(20) NOT NULL,</span><br><span class="line">  &#96;scores&#96; FLOAT NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;stuid&#96;, &#96;courseno&#96;)</span><br><span class="line">)</span><br><span class="line">COLLATE&#x3D;&#39;utf8_general_ci&#39;</span><br><span class="line">ENGINE&#x3D;InnoDB;</span><br><span class="line">以上就是数据库表的结构了，这里没有建立外键，但是根据表的结构，可以清楚的看到成绩表中的学号和课程号是与学生表、课程表分别关联起来的。</span><br><span class="line"></span><br><span class="line">数据准备</span><br><span class="line"></span><br><span class="line">&#x2F;*学生表数据*&#x2F;</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1001&#39;, &#39;张三&#39;);</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1002&#39;, &#39;李四&#39;);</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1003&#39;, &#39;赵二&#39;);</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1004&#39;, &#39;王五&#39;);</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1005&#39;, &#39;刘青&#39;);</span><br><span class="line">Insert Into student (stuid, stunm) Values(&#39;1006&#39;, &#39;周明&#39;);</span><br><span class="line">&#x2F;*课程表数据*&#x2F;</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C001&#39;, &#39;大学语文&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C002&#39;, &#39;新视野英语&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C003&#39;, &#39;离散数学&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C004&#39;, &#39;概率论与数理统计&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C005&#39;, &#39;线性代数&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C006&#39;, &#39;高等数学(一)&#39;);</span><br><span class="line">Insert Into courses (courseno, coursenm) Values(&#39;C007&#39;, &#39;高等数学(二)&#39;);</span><br><span class="line">&#x2F;*成绩表数据*&#x2F;</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C001&#39;, 67);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C001&#39;, 68);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C001&#39;, 69);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C001&#39;, 70);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C001&#39;, 71);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C001&#39;, 72);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C002&#39;, 87);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C002&#39;, 88);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C002&#39;, 89);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C002&#39;, 90);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C002&#39;, 91);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C002&#39;, 92);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C003&#39;, 83);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C003&#39;, 84);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C003&#39;, 85);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C003&#39;, 86);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C003&#39;, 87);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C003&#39;, 88);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C004&#39;, 88);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C004&#39;, 89);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C004&#39;, 90);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C004&#39;, 91);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C004&#39;, 92);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C004&#39;, 93);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C005&#39;, 77);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C005&#39;, 78);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C005&#39;, 79);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C005&#39;, 80);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C005&#39;, 81);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C005&#39;, 82);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1001&#39;, &#39;C006&#39;, 77);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1002&#39;, &#39;C006&#39;, 78);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1003&#39;, &#39;C006&#39;, 79);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1004&#39;, &#39;C006&#39;, 80);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1005&#39;, &#39;C006&#39;, 81);</span><br><span class="line">Insert Into score(stuid, courseno, scores) Values(&#39;1006&#39;, &#39;C006&#39;, 82);</span><br></pre></td></tr></table></figure>

<h1 id="动态拼接行转列"><a href="#动态拼接行转列" class="headerlink" title="动态拼接行转列"></a>动态拼接行转列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @sql &#x3D; NULL;</span><br><span class="line">SELECT</span><br><span class="line"> GROUP_CONCAT(DISTINCT</span><br><span class="line">  CONCAT(</span><br><span class="line">   &#39;MAX(IF(c.coursenm &#x3D; &#39;&#39;&#39;,</span><br><span class="line">   c.coursenm,</span><br><span class="line">   &#39;&#39;&#39;, s.scores, 0)) AS &#39;&#39;&#39;,</span><br><span class="line">   c.coursenm, &#39;&#39;&#39;&#39;</span><br><span class="line">  )</span><br><span class="line"> ) INTO @sql</span><br><span class="line">FROM courses c;</span><br><span class="line"></span><br><span class="line">SET @sql &#x3D; CONCAT(&#39;Select st.stuid, st.stunm, &#39;, @sql, </span><br><span class="line">            &#39; From Student st </span><br><span class="line">            Left Join score s On st.stuid &#x3D; s.stuid</span><br><span class="line">            Left Join courses c On c.courseno &#x3D; s.courseno</span><br><span class="line">            Group by st.stuid&#39;);</span><br><span class="line">PREPARE stmt FROM @sql;</span><br><span class="line">EXECUTE stmt;</span><br><span class="line">DEALLOCATE PREPARE stmt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare @sqlc1 nvarchar(1000)</span><br><span class="line">declare @sqlc2 nvarchar(1000)</span><br><span class="line">declare @sqlc3 nvarchar(1000)</span><br><span class="line">declare @sqls1 nvarchar(2000)</span><br><span class="line">declare @sqls2 nvarchar(2000)</span><br><span class="line">declare @sql nvarchar(4000)</span><br><span class="line">SET @sqlc1&#x3D;STUFF((SELECT N&#39;,&#39;+QUOTENAME(b.[Subject]) </span><br><span class="line"> FROM (select  distinct [Subject] from tb) as b</span><br><span class="line">   FOR XML PATH(&#39;&#39;)),1,1,N&#39;&#39;);</span><br><span class="line">SET @sqlc2&#x3D;STUFF((SELECT N&#39;, t1.&#39; + QUOTENAME(b.[Subject]) </span><br><span class="line">    + &#39;, t2.&#39; + QUOTENAME(b.[Subject]) + &#39; as &#39; + QUOTENAME(b.[Subject] + &#39;参考&#39;)</span><br><span class="line">+ &#39;, (t1.&#39; + QUOTENAME(b.[Subject]) + &#39; - t2.&#39;+QUOTENAME(b.[Subject]) </span><br><span class="line">+ &#39;) as &#39; +  QUOTENAME(b.[Subject] + &#39;差异&#39;)  </span><br><span class="line"> FROM (select  distinct [Subject] from tb) as b</span><br><span class="line">   FOR XML PATH(&#39;&#39;)),1,1,N&#39;&#39;);</span><br><span class="line">SET @sqlc3&#x3D;STUFF((SELECT N&#39;, sum(t1.&#39; + QUOTENAME(b.[Subject]) </span><br><span class="line">    + &#39;), sum(t2.&#39; + QUOTENAME(b.[Subject])</span><br><span class="line">+ &#39;), sum(t1.&#39; + QUOTENAME(b.[Subject]) + &#39; - t2.&#39;+QUOTENAME(b.[Subject]) + &#39;)&#39;  </span><br><span class="line"> FROM (select  distinct [Subject] from tb) as b</span><br><span class="line">   FOR XML PATH(&#39;&#39;)),1,1,N&#39;&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET @sqls1 &#x3D; &#39;</span><br><span class="line">select </span><br><span class="line">  ROW_NUMBER() OVER(order by t1.[name]) as [NO], t1.[name], &#39; + @sqlc2 +</span><br><span class="line">&#39; from</span><br><span class="line">(</span><br><span class="line">select [name],&#39; + @sqlc1 +</span><br><span class="line">&#39; from (select [name], [result], [subject] from tb ) tb</span><br><span class="line">PIVOT </span><br><span class="line">(   </span><br><span class="line">    avg(result)  </span><br><span class="line">    FOR [subject] IN</span><br><span class="line">    (&#39; + @sqlc1 + &#39;)  </span><br><span class="line">) AS T1 </span><br><span class="line">) as t1</span><br><span class="line">left join </span><br><span class="line">(</span><br><span class="line">select [name], &#39;+ @sqlc1 +</span><br><span class="line">&#39; from (select [name], [RefResult], [subject] from tb ) tb</span><br><span class="line">PIVOT </span><br><span class="line">(   </span><br><span class="line">    avg(RefResult)  </span><br><span class="line">    FOR [subject] IN</span><br><span class="line">    ( &#39;+ @sqlc1 + &#39;)  </span><br><span class="line">) AS T2 </span><br><span class="line">) as T2 </span><br><span class="line">on T1.name &#x3D; T2.name&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET @sqls2 &#x3D; &#39;</span><br><span class="line">select </span><br><span class="line">  &#39;&#39;&#39;&#39;, &#39;&#39;合计&#39;&#39;, &#39; + @sqlc3 + </span><br><span class="line">&#39; from</span><br><span class="line">(</span><br><span class="line">select [name],&#39; + @sqlc1 +</span><br><span class="line">&#39; from (select [name], [result], [subject] from tb ) tb</span><br><span class="line">PIVOT </span><br><span class="line">(   </span><br><span class="line">    avg(result)  </span><br><span class="line">    FOR [subject] IN</span><br><span class="line">    (&#39; + @sqlc1 + &#39;)  </span><br><span class="line">) AS T1 </span><br><span class="line">) as t1</span><br><span class="line">left join </span><br><span class="line">(</span><br><span class="line">select [name], &#39;+ @sqlc1 +</span><br><span class="line">&#39; from (select [name], [RefResult], [subject] from tb ) tb</span><br><span class="line">PIVOT </span><br><span class="line">(   </span><br><span class="line">    avg(RefResult)  </span><br><span class="line">    FOR [subject] IN</span><br><span class="line">    ( &#39;+ @sqlc1 + &#39;)  </span><br><span class="line">) AS T2 </span><br><span class="line">) as T2 </span><br><span class="line">on T1.name &#x3D; T2.name&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set @sql &#x3D; @sqls1 + &#39; union all &#39; + @sqls2</span><br><span class="line">exec(@sql)</span><br></pre></td></tr></table></figure>
<h4 id="特殊sql"><a href="#特殊sql" class="headerlink" title="特殊sql"></a>特殊sql</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">       member_id,</span><br><span class="line">       sum(case when member_type &#x3D; 1 then 1 else 0 end) as consignor,</span><br><span class="line">       sum(case when member_type &#x3D; 2 then 1 else 0 end) as tran,</span><br><span class="line">       sum(case when member_type &#x3D; 1 then amount else 0 end) as consignorAmount,</span><br><span class="line">       sum(case when member_type &#x3D; 2 then amount else 0 end) as tranAmount,</span><br><span class="line">       GROUP_CONCAT(case when member_type &#x3D; 1 then id else  end) as consignorfeeChekenIds,</span><br><span class="line">       GROUP_CONCAT(case when member_type &#x3D; 2 then id else 0 end) as tranfeeChekenId,</span><br><span class="line">       from bus_fee_checken</span><br><span class="line">       where is_delete &#x3D; 0</span><br><span class="line">       and status &#x3D; 1 and start_dt &lt;![CDATA[&gt;&#x3D;]]&gt; #&#123;now&#125;</span><br><span class="line">       group by member_id</span><br></pre></td></tr></table></figure>
<h4 id="oracle查看锁表"><a href="#oracle查看锁表" class="headerlink" title="oracle查看锁表"></a>oracle查看锁表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sess.sid, </span><br><span class="line">sess.serial#, </span><br><span class="line">lo.oracle_username, </span><br><span class="line">lo.os_user_name, </span><br><span class="line">ao.object_name, </span><br><span class="line">lo.locked_mode </span><br><span class="line">from v$locked_object lo, </span><br><span class="line">dba_objects ao, </span><br><span class="line">v$session sess </span><br><span class="line">where ao.object_id &#x3D; lo.object_id and lo.session_id &#x3D; sess.sid</span><br></pre></td></tr></table></figure>

<h4 id="oracle执行计划"><a href="#oracle执行计划" class="headerlink" title="oracle执行计划"></a>oracle执行计划</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain plan for sql</span><br><span class="line">SELECT plan_table_output FROM TABLE(DBMS_XPLAN.DISPLAY(&#39;PLAN_TABLE&#39;));</span><br></pre></td></tr></table></figure>

<h4 id="oracle分组最新一条数据"><a href="#oracle分组最新一条数据" class="headerlink" title="oracle分组最新一条数据"></a>oracle分组最新一条数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from (</span><br><span class="line">select msgdata.aae075, tb20.baz177,tb20.BAZ178, row_number() over(partition by tb20.BAZ178 order by msg.AAE036 desc) rn from tb20</span><br><span class="line">                 left join  SIPI_MSG msg on msg.BAZ178&#x3D;tb20.BAZ178  </span><br><span class="line">                 left join SIPI_MSGDATA msgdata  </span><br><span class="line">                 on msg.bae001 &#x3D; msgdata.bae001  </span><br><span class="line">                 where tb20.aae036 between to_date(&#39;20191016000000&#39;,&#39;YYYYMMDDHH24MISS&#39;) AND to_date(&#39;20191019235959&#39;,&#39;YYYYMMDDHH24MISS&#39;) and  tb20.BAZ187&#x3D;&#39;FAIL&#39;) where rn &#x3D;1</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>vue入门</title>
    <url>/2019/06/26/vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="vue中”-”、”-”、”-”意义"><a href="#vue中”-”、”-”、”-”意义" class="headerlink" title="vue中”:”、”.”、”@”意义"></a>vue中”:”、”.”、”@”意义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;:&quot; 是指令 &quot;v-bind&quot;的缩写，&quot;@&quot;是指令&quot;v-on&quot;的缩写；&quot;.&quot;是修饰符</span><br></pre></td></tr></table></figure>

<h3 id="Vue中路径的-和-有何区别"><a href="#Vue中路径的-和-有何区别" class="headerlink" title="Vue中路径的@/和./有何区别"></a>Vue中路径的<code>@/</code>和<code>./</code>有何区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;表示相对路径，具体代表当前目录下的同级目录，遵从的是从后往前找文件</span><br><span class="line">@&#x2F;的意思：</span><br><span class="line">表示的是相对路径(当然这也是简写啦)，因为这个在根目录&#x2F;build&#x2F;webpack.base.conf.js文件中@是配置的，</span><br><span class="line">比如我的配置文件中@就代表src目录，遵从的是从前往后找，比如’@&#x2F;components&#x2F;login’ 就表示的是</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper集群</title>
    <url>/2019/10/24/zookeeper%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="zoo-cfg"><a href="#zoo-cfg" class="headerlink" title="zoo.cfg"></a>zoo.cfg</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器之间或客户端与服务器之间维持心跳的时间间隔</span></span><br><span class="line"><span class="comment"># tickTime以毫秒为单位。</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># 集群中的follower服务器(F)与leader服务器(L)之间的初始连接心跳数</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 快照保存目录</span></span><br><span class="line"><span class="comment"># 不要设置为/tmp，该目录重新启动后会被自动清除</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/home/hadoop/data/zookeeper/data</span></span><br><span class="line"><span class="comment"># 日志保存目录</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">/home/hadoop/data/zookeeper/logs</span></span><br><span class="line"><span class="comment"># 客户端连接端口</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># 客户端最大连接数。</span></span><br><span class="line"><span class="comment"># 根据自己实际情况设置，默认为60个</span></span><br><span class="line"><span class="comment"># maxClientCnxns=60</span></span><br><span class="line"><span class="comment"># 三个接点配置，格式为：</span></span><br><span class="line"><span class="comment">#     server.服务编号=服务地址、LF通信端口、选举端口</span></span><br><span class="line"><span class="meta">server.1</span>=<span class="string">salve1:2888:3888</span></span><br><span class="line"><span class="meta">server.2</span>=<span class="string">slave2:2888:3888</span></span><br><span class="line"><span class="meta">server.3</span>=<span class="string">slave3:2888:3888</span></span><br></pre></td></tr></table></figure>
<h4 id="myid文件"><a href="#myid文件" class="headerlink" title="myid文件"></a>myid文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>
<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server slave1:2181</span><br></pre></td></tr></table></figure>
<h4 id="集群查看"><a href="#集群查看" class="headerlink" title="集群查看"></a>集群查看</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring中bean创建过程</title>
    <url>/2019/07/10/spring%E4%B8%ADbean%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    <span class="comment">//单例</span></span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.trace(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.trace(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">1</span>------------------------------------</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//原型</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">        <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        <span class="comment">//当前beanFactory不包含beanName,从父类中获取</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                        nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//标记为已创建</span></span><br><span class="line">        <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//beanFactory包含beanName</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line">            <span class="comment">//校验bean所依赖的都已创建</span></span><br><span class="line">            <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create bean instance.</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;<span class="comment">//单例</span></span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                        <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                        <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                        <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;<span class="comment">//原型</span></span><br><span class="line">                <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">                Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//根据不同的scope创建bean</span></span><br><span class="line">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                            <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                            <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                            ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> convertedBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                        ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>获取bean实例</li>
</ol>
<ul>
<li>对FactoryBean正确性的验证</li>
<li>对非FactoryBean不做任何处理</li>
<li>对bean进行转换</li>
<li>将从Factory中解析bean的工作委托给getObjectFromFactoryBean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class="line">    <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//名称包含&amp;且实例不为FactoryBean</span></span><br><span class="line">        <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">    <span class="comment">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">    <span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">    <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从缓存中获取</span></span><br><span class="line">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Return bean instance from factory.</span></span><br><span class="line">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">        <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否合成的bean（不是合成的bean会执行postProcessObjectFromFactoryBean）</span></span><br><span class="line">        <span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        <span class="comment">//委托从工厂bean中获取</span></span><br><span class="line">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>从factory获取bean实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例</span></span><br><span class="line">    <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">            Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">                <span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">                Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    object = alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                            <span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">                            <span class="keyword">return</span> object;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//前置校验，添加创建中的bean缓存</span></span><br><span class="line">                        beforeSingletonCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                    <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//后置校验，移除创建中的bean缓存</span></span><br><span class="line">                            afterSingletonCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//缓存factory创建的bean实例</span></span><br><span class="line">                    <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//原型</span></span><br><span class="line">        Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>从factory中获取bean实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(<span class="keyword">final</span> FactoryBean&lt;?&gt; factory, <span class="keyword">final</span> String beanName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object object;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessControlContext acc = getAccessControlContext();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) factory::getObject, acc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> pae.getException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            object = factory.getObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"FactoryBean threw exception on object creation"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not accept a null value for a FactoryBean that's not fully</span></span><br><span class="line">    <span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//正在创建中的bean直接获取实例会返回null</span></span><br><span class="line">        <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">                    beanName, <span class="string">"FactoryBean which is currently in creation returned null from getObject"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        object = <span class="keyword">new</span> NullBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate the bean.</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//合并bean定义</span></span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">    <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">    <span class="comment">//单例 || 循环依赖 || 当前对象正在创建中</span></span><br><span class="line">    <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">            isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                    <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提前暴露自己在singletonFactories</span></span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//开始注入属性</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">                <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                            <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                            <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                            <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                            <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                            <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
获取单例（三级缓存）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="comment">//单例为空且为正在创建中的bean</span></span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="comment">//提前暴露对象（即还没完成创建的对象）</span></span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//从singletonFactory【EarlyReference】提升至二级缓存（创建未实例化完成的对象）</span></span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="comment">//不是public的类是不允许创建，直接抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过回调来【get()】创建对象实例</span></span><br><span class="line">    Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">    <span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过工厂方法创建对象实例</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">    <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="comment">//创建成功实例时会设置resolvedConstructorOrFactoryMethod的值，避免再次创建bean</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resolved = <span class="keyword">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">        <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">            <span class="comment">//如果构造函数中有参数需要注入</span></span><br><span class="line">            <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//普通构造函数直接创建对象</span></span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Candidate constructors for autowiring?</span></span><br><span class="line">    <span class="comment">//通过SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors 来获取构造函数</span></span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    <span class="comment">//构造函数存在/注入类型为构造函数自动注入/包含参数的构造函数/传入参数不为空</span></span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="keyword">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">        <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Preferred constructors for default construction?</span></span><br><span class="line">    ctors = mbd.getPreferredConstructors();</span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过默认的构造函数创建对象</span></span><br><span class="line">    <span class="comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line">    <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">    <span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">    <span class="comment">// to support styles of field injection.</span></span><br><span class="line">    <span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//不是合成的bean</span></span><br><span class="line">    <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性注入</span></span><br><span class="line">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line">        <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            <span class="comment">//通过名称注入</span></span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            <span class="comment">//通过类型注入</span></span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    <span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    PropertyDescriptor[] filteredPds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                pvs = pvsToUse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        &#125;</span><br><span class="line">        checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
创建对象后调用MergedBeanDefinitionPostProcessor对bean合并</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>word单词自动换行</title>
    <url>/2019/09/12/word%E5%8D%95%E8%AF%8D%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p><img src="word1.jpg" alt="原样"><br>修改这个配置就可以了<br><img src="word2.jpg" alt="修改配置"></p>
]]></content>
  </entry>
  <entry>
    <title>任链模式实现的三种方式</title>
    <url>/2019/08/20/%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="servlet中的Filter"><a href="#servlet中的Filter" class="headerlink" title="servlet中的Filter"></a>servlet中的Filter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class ApplicationFilterChain implements FilterChain &#123;</span><br><span class="line">    private int pos &#x3D; 0; &#x2F;&#x2F;当前执行filter的offset</span><br><span class="line">    private int n; &#x2F;&#x2F;当前filter的数量</span><br><span class="line">    private ApplicationFilterConfig[] filters;  &#x2F;&#x2F;filter配置类，通过getFilter()方法获取Filter</span><br><span class="line">    private Servlet servlet</span><br><span class="line">  </span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        if (pos &lt; n) &#123;</span><br><span class="line">            ApplicationFilterConfig filterConfig &#x3D; filters[pos++];</span><br><span class="line">            Filter filter &#x3D; filterConfig.getFilter();</span><br><span class="line">            filter.doFilter(request, response, this);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; filter都处理完毕后，执行servlet</span><br><span class="line">            servlet.service(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dubbo中的Filter"><a href="#Dubbo中的Filter" class="headerlink" title="Dubbo中的Filter"></a>Dubbo中的Filter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static &lt;T&gt; Invoker&lt;T&gt; buildInvokerChain(final Invoker&lt;T&gt; invoker, String key, String group) &#123;</span><br><span class="line">    Invoker&lt;T&gt; last &#x3D; invoker;</span><br><span class="line">    &#x2F;&#x2F;只获取满足条件的Filter</span><br><span class="line">    List&lt;Filter&gt; filters &#x3D; ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);</span><br><span class="line">    if (filters.size() &gt; 0) &#123;</span><br><span class="line">        for (int i &#x3D; filters.size() - 1; i &gt;&#x3D; 0; i --) &#123;</span><br><span class="line">            final Filter filter &#x3D; filters.get(i);</span><br><span class="line">            final Invoker&lt;T&gt; next &#x3D; last;</span><br><span class="line">            last &#x3D; new Invoker&lt;T&gt;() &#123;</span><br><span class="line">                ...</span><br><span class="line">                public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">                    return filter.invoke(next, invocation);</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mybatis中的Plugin"><a href="#Mybatis中的Plugin" class="headerlink" title="Mybatis中的Plugin"></a>Mybatis中的Plugin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Plugin implements InvocationHandler&#123;</span><br><span class="line">    private Object target;</span><br><span class="line">    private Interceptor interceptor;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;      </span><br><span class="line">        if (满足代理条件) &#123;</span><br><span class="line">            return interceptor.intercept(new Invocation(target, method, args));</span><br><span class="line">        &#125;</span><br><span class="line">        return method.invoke(target, args);     </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    &#x2F;&#x2F;对传入的对象进行代理，可能是实际的Executor类，也可能是Plugin代理类</span><br><span class="line">    public static Object wrap(Object target, Interceptor interceptor) &#123;</span><br><span class="line">  </span><br><span class="line">        Class&lt;?&gt; type &#x3D; target.getClass();</span><br><span class="line">        Class&lt;?&gt;[] interfaces &#x3D; getAllInterfaces(type, signatureMap);</span><br><span class="line">        if (interfaces.length &gt; 0) &#123;</span><br><span class="line">            return Proxy.newProxyInstance(</span><br><span class="line">                    type.getClassLoader(),</span><br><span class="line">                    interfaces,</span><br><span class="line">                    new Plugin(target, interceptor, signatureMap));</span><br><span class="line">        &#125;</span><br><span class="line">        return target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>命令记录</title>
    <url>/2019/08/09/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>北京时间同步</title>
    <url>/2019/10/17/%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="ntpdate-客户端"><a href="#ntpdate-客户端" class="headerlink" title="ntpdate 客户端"></a>ntpdate 客户端</h3><h4 id="Linux时间同步办法"><a href="#Linux时间同步办法" class="headerlink" title="Linux时间同步办法"></a>Linux时间同步办法</h4><ul>
<li>删除⾃带的localtime<br>rm -rf /etc/localtime</li>
<li>创建软链接到localtime<br>ln -s /usr/share/zoneinf o/Asia/Shanghai /etc/localtime</li>
<li>安装ntpdate<br>yum install ntpdate<br>ntpdate -u ntp.api.bz<br>ntpdate ntp1.aliyun.com //直接⽤域名同步中国上海时间 是阿⾥云的服务器</li>
</ul>
<h4 id="Windows时间同步办法"><a href="#Windows时间同步办法" class="headerlink" title="Windows时间同步办法"></a>Windows时间同步办法</h4><p><a href="https://jingyan.baidu.com/article/ceb9fb10c0a5af8cad2ba0c8.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ceb9fb10c0a5af8cad2ba0c8.html</a></p>
<ul>
<li>win+R services.msc</li>
<li>查找Windows Time属性修改为自动</li>
<li>点击电脑桌面左下角的时间，在弹出的时钟下方，选择更改日期和时间设置</li>
<li>在Internet时间栏目下，选择更改设置<h3 id="ntp服务端"><a href="#ntp服务端" class="headerlink" title="ntp服务端"></a>ntp服务端</h3>vi /etc/ntp.conf<br>ignore  ：关闭所有的 NTP 联机服务<br>nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。<br>notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网<br>noquery ：不提供客户端的时间查询：用户端不能使用ntpq，ntpc等命令来查询ntp服务器<br>notrap ：不提供trap远端登陆：拒绝为匹配的主机提供模式 6 控制消息陷阱服务。陷阱服务是 ntpdq 控制消息协议的子系统，用于远程事件日志记录程序。<br>nopeer ：用于阻止主机尝试与服务器对等，并允许欺诈性服务器控制时钟<br>kod ： 访问违规时发送 KoD 包。<h4 id="授权访问"><a href="#授权访问" class="headerlink" title="授权访问"></a>授权访问</h4>restrict 127.0.0.1 表示当前主机可以使用这个时间服务<br>restrict 172.16.1.0 mask 255.255.255.0 表示授权172.16.1网络中的全部主机可以使用时间服务<br>restrict 0.0.0.0 mask 0.0.0.0  nomodify notrao 表示所有主机都可以访问这个时间服务<br>restrict default ignore 设置默认策略，允许任意主机进行时间同步<h4 id="server-表示当前NTP服务从哪个主机来获取时间"><a href="#server-表示当前NTP服务从哪个主机来获取时间" class="headerlink" title="server 表示当前NTP服务从哪个主机来获取时间"></a>server 表示当前NTP服务从哪个主机来获取时间</h4></li>
<li>默认的ntp地址<br>server 0.centos.pool.ntp.org iburst<br>server 1.centos.pool.ntp.org iburst<br>server 2.centos.pool.ntp.org iburst<br>server 3.centos.pool.ntp.org iburst</li>
<li>常用的ntp地址<br>server ntp1.aliyun.com     #→阿里云时间服务器（ntp1…21等）<br>server time.nist.gov          #→微软时间服务器<br>server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]</li>
</ul>
<p>其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：<br>◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。<br>◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。<br>◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。<br>◆ mode： 指定数据报文mode字段的值。<br>◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。<br>◆ maxpoll：  指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。<br>◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。</p>
<h4 id="fudge-设置你的ntp优先级"><a href="#fudge-设置你的ntp优先级" class="headerlink" title="fudge 设置你的ntp优先级"></a>fudge 设置你的ntp优先级</h4><p>3.默认的一个内部时钟数据，用在没有外部 NTP 服务器时，使用它为局域网用户提供服务： 外部时间服务器不可用时，以本地时间作为时间服务<br>server    127.127.1.0     # local clock<br>fudge     127.127.1.0 stratum 10<br>fudge<br>0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，<br>往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。<br>ntpd对下层client来说是service server，对于上层server来说它是client。</p>
<h4 id="statsdir-logfile-指定日志文件的位置"><a href="#statsdir-logfile-指定日志文件的位置" class="headerlink" title="statsdir logfile  指定日志文件的位置"></a>statsdir logfile  指定日志文件的位置</h4><p>statsdir /var/log/ntp/<br>logfile /var/log/ntp/ntp.log</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>启动 /etc/init.d/ntpd start<br>停止 /etc/init.d/ntpd stop<br>观察时间同步状况：ntpq -p</p>
<h4 id="查看硬件时间用hwclock或者clock命令"><a href="#查看硬件时间用hwclock或者clock命令" class="headerlink" title="查看硬件时间用hwclock或者clock命令"></a>查看硬件时间用hwclock或者clock命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwclock</span><br><span class="line">clock</span><br><span class="line"></span><br><span class="line">将系统时间写入到硬件时间</span><br><span class="line">hwclock -w</span><br><span class="line">将硬件时间写入到系统时间</span><br><span class="line">hwclock -s</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/quchunhui/p/7658853.html" target="_blank" rel="noopener">https://www.cnblogs.com/quchunhui/p/7658853.html</a><br><a href="https://blog.csdn.net/Evan1911/article/details/88667794" target="_blank" rel="noopener">https://blog.csdn.net/Evan1911/article/details/88667794</a></p>
]]></content>
  </entry>
  <entry>
    <title>安装gcc</title>
    <url>/2019/09/28/%E5%AE%89%E8%A3%85gcc/</url>
    <content><![CDATA[<p><img src="1.png" alt="1.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列</title>
    <url>/2019/10/14/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h4 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h4><ul>
<li>消息（Message）是指在应用之间传送的数据，消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，有消息系统来确保信息的可靠专递，消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布的，这样发布者和使用者都不用知道对方的存在。</li>
</ul>
<h4 id="消息队列产品"><a href="#消息队列产品" class="headerlink" title="消息队列产品"></a>消息队列产品</h4><p><img src="1.bmp" alt="1.bmp"></p>
<h4 id="为什么要用消息队列"><a href="#为什么要用消息队列" class="headerlink" title="为什么要用消息队列"></a>为什么要用消息队列</h4><ul>
<li><p>异步处理<br>串行处理<br><img src="2.png" alt="串行处理"><br>并行处理<br><img src="3.png" alt="并行处理"><br>消息处理<br><img src="4.png" alt="消息处理"></p>
</li>
<li><p>应用解耦<br><img src="5.png" alt="应用解耦"></p>
</li>
<li><p>流量削峰<br><img src="6.png" alt="流量削峰"></p>
</li>
<li><p>日志处理<br><img src="7.png" alt="日志处理"></p>
</li>
<li><p>消息通信<br><img src="8.png" alt="消息通信"></p>
</li>
<li><p>事务处理<br><img src="9.png" alt="事务处理"></p>
</li>
</ul>
<h4 id="使用消息队列有什么问题？"><a href="#使用消息队列有什么问题？" class="headerlink" title="使用消息队列有什么问题？"></a>使用消息队列有什么问题？</h4><ul>
<li><p>顺序消息<br><img src="13.png" alt="顺序消息"></p>
</li>
<li><p>重复消费<br>保证消费的幂等性</p>
</li>
<li><p>消息事务<br><img src="14.png" alt="顺序消息"></p>
</li>
<li><p>消息丢失怎么办</p>
<ul>
<li>分别从Producer发送机制、Broker的持久化机制，以及消费者的offSet机制来最大程度保证消息不易丢失<ul>
<li>从Producer的视角来看：如果消息未能正确的存储在MQ中，或者消费者未能正确的消费到这条消息，都是消息丢失。</li>
<li>从Broker的视角来看：如果消息已经存在Broker里面了，如何保证不会丢失呢（宕机、磁盘崩溃）</li>
<li>从Consumer的视角来看：如果消息已经完成持久化了，但是Consumer取了，但是未消费成功且没有反馈，就是消息丢失<a id="more"></a></li>
</ul>
</li>
<li>从Producer分析：如何确保消息正确的发送到了Broker?<ul>
<li>默认情况下，可以通过同步的方式阻塞式的发送，check SendStatus，状态是OK，表示消息一定成功的投递到了Broker，状态超时或者失败，则会触发默认的2次重试。此方法的发送结果，可能Broker存储成功了，也可能没成功</li>
<li>采取事务消息的投递方式，并不能保证消息100%投递成功到了Broker，但是如果消息发送Ack失败的话，此消息会存储在CommitLog当中，但是对ConsumerQueue是不可见的。可以在日志中查看到这条异常的消息，严格意义上来讲，也并没有完全丢失</li>
<li>RocketMQ支持 日志的索引，如果一条消息发送之后超时，也可以通过查询日志的API，来check是否在Broker存储成功</li>
</ul>
</li>
<li>从Broker分析：如果确保接收到的消息不会丢失?<ul>
<li>消息支持持久化到Commitlog里面，即使宕机后重启，未消费的消息也是可以加载出来的</li>
<li>Broker自身支持同步刷盘、异步刷盘的策略，可以保证接收到的消息一定存储在本地的内存中</li>
<li>Broker集群支持 1主N从的策略，支持同步复制和异步复制的方式，同步复制可以保证即使Master 磁盘崩溃，消息仍然不会丢失</li>
</ul>
</li>
<li>从Cunmser分析：如何确保拉取到的消息被成功消费？<ul>
<li>消费者可以根据自身的策略批量Pull消息</li>
<li>Consumer自身维护一个持久化的offset（对应MessageQueue里面的min offset），标记已经成功消费或者已经成功发回到broker的消息下标</li>
<li>如果Consumer消费失败，那么它会把这个消息发回给Broker，发回成功后，再更新自己的offset</li>
<li>如果Consumer消费失败，发回给broker时，broker挂掉了，那么Consumer会定时重试这个操作</li>
<li>如果Consumer和broker一起挂了，消息也不会丢失，因为consumer 里面的offset是定时持久化的，重启之后，继续拉取offset之前的消息到本地</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Rocketmq介绍"><a href="#Rocketmq介绍" class="headerlink" title="Rocketmq介绍"></a>Rocketmq介绍</h4><ul>
<li>消息事务<br><img src="9.png" alt="消息事务"><br><img src="16.png" alt="消息事务"></li>
</ul>
<p>1.0、 Producer发送消息到RocketMQ，这条消息我们暂且称之为message1 并且是transaction状态的事务消息。<br>1.1、MQ把message1存入数据库，并且是状态是prepared。<br>1.2、RocketMQ回调Producer中的本地事务。（本地事务由三个状态COMMIT_MESSAGE、ROLLBACK_MESSAGE、UNKNOW）。<br>1.2.1 、本地事务处理完成后，无论成功还是失败都会有一个状态，如果成功的话，Producer就会发送COMMIT_MESSAGE状态表示确认消息到RocketMQ上。<br>1.2.2、然后把message1这个消息存储到consumer queue中，并在数据库中把这条prepared的消息标记为commited。<br>1.2.3、这条消息就被Consumer消费了。<br>1.3.1、如果Producer的事务处理返回了一个UNKNOW状态。因为broker会定时的去扫描数据库，如果数据库中的数据状态是commited的，那么就清除这条数据。<br>1.4、如果数据库中数据的状态还是prepared的。那MQ就会主动的去调用Producer中的check方法。<br>1.5.1、check方法再去查本地的数据库看有没有减钱，如果没减钱的话就rollback，<br>1.6.1、rollback后Producer又发了一条ROLLBACK_MESSAGE给MQ。<br>1.7.1、MQ收到这条消息后，就会把MQ的数据库中对应的prepared数据给清除掉。那么这条数据也就不会被Consumer端消费了<br>1.5.2、check方法查本地数据库看有没有减钱，如果减钱了。<br>1.6.2、会给MQ发送一个COMMIT_MESSAGE。<br>1.7.2、MQ还会去查自己的数据库，然后把数据库中对应的数据给清除掉</p>
<ul>
<li><p>客户端事务消息发送<br><img src="15.png" alt="客户端事务消息发送"></p>
</li>
<li><p>消息写入CommitLog<br><img src="10.png" alt="消息写入CommitLog"></p>
</li>
<li><p>消息写入ConsumeQueue<br><img src="11.png" alt="消息写入ConsumeQueue"></p>
</li>
<li><p>Broker端事务提交/回滚<br><img src="12.png" alt="Broker端事务提交/回滚"></p>
</li>
</ul>
<h4 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h4><p><a href="https://www.jianshu.com/p/c26b3af5880f" target="_blank" rel="noopener">RocketMq事务消息</a><br><a href="https://www.jianshu.com/p/453c6e7ff81c" target="_blank" rel="noopener">分布式开放消息系统(RocketMQ)的原理与实践</a><br><a href="https://www.cnblogs.com/happyflyingpig/p/8283525.html" target="_blank" rel="noopener">RocketMQ-事务消费</a></p>
]]></content>
  </entry>
  <entry>
    <title>契约测试</title>
    <url>/2019/11/02/%E5%A5%91%E7%BA%A6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="pact"><a href="#pact" class="headerlink" title="pact"></a>pact</h3><ul>
<li>定义消费者端服务的预期结果<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@org.junit.Ignore;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeerControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	BeerController controller = <span class="keyword">new</span> BeerController(<span class="keyword">new</span> RestTemplate());</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Rule</span></span><br><span class="line">	<span class="keyword">public</span> PactProviderRuleMk2 mockProvider =</span><br><span class="line">			<span class="keyword">new</span> PactProviderRuleMk2(<span class="string">"beer-api-producer-pact"</span>, <span class="string">"localhost"</span>, <span class="number">8083</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Pact</span>(consumer=<span class="string">"beer-api-consumer-pact"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> RequestResponsePact <span class="title">beerNotOk</span><span class="params">(PactDslWithProvider builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> builder</span><br><span class="line">				.given(<span class="string">""</span>)</span><br><span class="line">					.uponReceiving(<span class="string">"Represents a successful scenario of getting a beer"</span>)</span><br><span class="line">					.path(<span class="string">"/check"</span>)</span><br><span class="line">					.method(<span class="string">"POST"</span>)</span><br><span class="line">					.headers(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">					.body(<span class="string">"&#123;\"name\":\"marcin\",\"age\":25&#125;"</span>)</span><br><span class="line">					.willRespondWith()</span><br><span class="line">					.status(<span class="number">200</span>)</span><br><span class="line">					.body(<span class="string">"&#123;\"status\":\"OK\"&#125;"</span>)</span><br><span class="line">					.headers(responseHeaders())</span><br><span class="line">				.given(<span class="string">""</span>)</span><br><span class="line">					.uponReceiving(<span class="string">"Represents an unsuccessful scenario of getting a beer"</span>)</span><br><span class="line">					.path(<span class="string">"/check"</span>)</span><br><span class="line">					.method(<span class="string">"POST"</span>)</span><br><span class="line">					.headers(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">					.body(<span class="string">"&#123;\"name\":\"marcin\",\"age\":10&#125;"</span>)</span><br><span class="line">					.willRespondWith()</span><br><span class="line">					.status(<span class="number">200</span>)</span><br><span class="line">					.body(<span class="string">"&#123;\"status\":\"NOT_OK\"&#125;"</span>)</span><br><span class="line">					.headers(responseHeaders())</span><br><span class="line">				.toPact();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@PactVerification</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTestBeer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// OK</span></span><br><span class="line">		assertEquals(<span class="keyword">this</span>.controller.gimmeABeer(<span class="keyword">new</span> Person(<span class="string">"marcin"</span>, <span class="number">25</span>)), <span class="string">"THERE YOU GO"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// NOT_OK</span></span><br><span class="line">		assertEquals(<span class="keyword">this</span>.controller.gimmeABeer(<span class="keyword">new</span> Person(<span class="string">"marcin"</span>, <span class="number">10</span>)), <span class="string">"GET LOST"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">responseHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>生成PACT文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行测试类,在target中会生成.json的文件</span><br><span class="line">&#123;</span><br><span class="line">    &quot;provider&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;beer-api-producer-pact&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;consumer&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;beer-api-consumer-pact&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;interactions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;description&quot;: &quot;Represents a successful scenario of getting a beer&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">                &quot;path&quot;: &quot;&#x2F;check&quot;,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;marcin&quot;,</span><br><span class="line">                    &quot;age&quot;: 25</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;response&quot;: &#123;</span><br><span class="line">                &quot;status&quot;: 200,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;status&quot;: &quot;OK&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;providerStates&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;description&quot;: &quot;Represents an unsuccessful scenario of getting a beer&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">                &quot;path&quot;: &quot;&#x2F;check&quot;,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;marcin&quot;,</span><br><span class="line">                    &quot;age&quot;: 10</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;response&quot;: &#123;</span><br><span class="line">                &quot;status&quot;: 200,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;status&quot;: &quot;NOT_OK&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;providerStates&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;pactSpecification&quot;: &#123;</span><br><span class="line">            &quot;version&quot;: &quot;3.0.0&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;pact-jvm&quot;: &#123;</span><br><span class="line">            &quot;version&quot;: &quot;3.5.23&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>与提供者服务共享生成的PACT文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运用docker-compose来接收pact文件生成服务,PACT Broker。</span><br></pre></td></tr></table></figure></li>
<li>启动提供程序服务</li>
<li>针对提供者执行请求(maven/gardle运行pactVerify)</li>
<li>检查验证结果</li>
<li>修改maven配置<br><a href="https://github.com/DiUS/pact-jvm/tree/master/provider/pact-jvm-provider-maven" target="_blank" rel="noopener">https://github.com/DiUS/pact-jvm/tree/master/provider/pact-jvm-provider-maven</a><h3 id="spring-cloud-contract"><a href="#spring-cloud-contract" class="headerlink" title="spring-cloud-contract"></a>spring-cloud-contract</h3></li>
<li>编写合同规范（Groovy DSL）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package contracts.beer.rest</span><br><span class="line"></span><br><span class="line">import com.example.ConsumerUtils</span><br><span class="line">import com.example.ProducerUtils</span><br><span class="line">import org.springframework.cloud.contract.spec.Contract</span><br><span class="line"></span><br><span class="line">Contract.make &#123;</span><br><span class="line">	description(&quot;&quot;&quot;</span><br><span class="line">Represents a successful scenario of getting a beer</span><br></pre></td></tr></table></figure>
given:<br>  client is old enough<br>when:<br>  he applies for a beer<br>then:<br>  we’ll grant him the beer<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line">	request &#123;</span><br><span class="line">		method &#39;POST&#39;</span><br><span class="line">		url &#39;&#x2F;check&#39;</span><br><span class="line">		body(</span><br><span class="line">				age: $(ConsumerUtils.oldEnough())</span><br><span class="line">		)</span><br><span class="line">		headers &#123;</span><br><span class="line">			contentType(applicationJson())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	response &#123;</span><br><span class="line">		status 200</span><br><span class="line">		body(&quot;&quot;&quot;</span><br><span class="line">			&#123;</span><br><span class="line">				&quot;status&quot;: &quot;$&#123;value(ProducerUtils.ok())&#125;&quot;</span><br><span class="line">			&#125;</span><br><span class="line">			&quot;&quot;&quot;)</span><br><span class="line">		headers &#123;</span><br><span class="line">			contentType(applicationJson())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在Provider端生成自动验收测试(maven/gradle运行generateContractTests)生成放在target中</li>
<li>生成WireMock JSON存根＆将存根发布到Maven（本地）存储库(maven/gradle clean build install)</li>
<li>在消费者端配置Stub Runner,Stub runner附带嵌入式WireMock，因此在开始测试时，Stub runner将在内部启动WireMock服务器并在其上安装Provider存根。   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@AutoConfigureStubRunner(ids &#x3D; &quot;info.novatec.spring.contract.cloud.example:</span><br><span class="line">&#x2F;&#x2F;+代表查询最新,8082代表端口</span><br><span class="line">provider-service:+:stubs:8082&quot;, workOffline &#x3D; true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(webEnvironment &#x3D; WebEnvironment.MOCK)</span><br><span class="line">@AutoConfigureMockMvc</span><br><span class="line">@AutoConfigureJsonTesters</span><br><span class="line">&#x2F;&#x2F;remove::start[]</span><br><span class="line">@AutoConfigureStubRunner(stubsMode &#x3D; StubRunnerProperties.StubsMode.LOCAL, ids &#x3D; &quot;com.example:beer-api-producer-webflux&quot;)</span><br><span class="line">&#x2F;&#x2F;remove::end[]</span><br><span class="line">@DirtiesContext</span><br><span class="line">public class BeerControllerWebFluxTest extends AbstractTest &#123;</span><br><span class="line"></span><br><span class="line">	@Autowired MockMvc mockMvc;</span><br><span class="line">	@Autowired BeerController beerController;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;remove::start[]</span><br><span class="line">	@StubRunnerPort(&quot;beer-api-producer-webflux&quot;) int producerPort;</span><br><span class="line"></span><br><span class="line">	@Before</span><br><span class="line">	public void setupPort() &#123;</span><br><span class="line">		this.beerController.port &#x3D; this.producerPort;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;remove::end[]</span><br><span class="line">	@Test public void should_give_me_a_beer_when_im_old_enough() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;remove::start[]</span><br><span class="line">		this.mockMvc.perform(MockMvcRequestBuilders.post(&quot;&#x2F;beer&quot;)</span><br><span class="line">				.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.content(this.json.write(new Person(&quot;marcin&quot;, 22)).getJson()))</span><br><span class="line">				.andExpect(status().isOk())</span><br><span class="line">				.andExpect(content().string(&quot;THERE YOU GO&quot;));</span><br><span class="line">		&#x2F;&#x2F;remove::end[]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test public void should_reject_a_beer_when_im_too_young() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;remove::start[]</span><br><span class="line">		this.mockMvc.perform(MockMvcRequestBuilders.post(&quot;&#x2F;beer&quot;)</span><br><span class="line">				.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.content(this.json.write(new Person(&quot;marcin&quot;, 17)).getJson()))</span><br><span class="line">				.andExpect(status().isOk())</span><br><span class="line">				.andExpect(content().string(&quot;GET LOST&quot;));</span><br><span class="line">		&#x2F;&#x2F;remove::end[]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行消费者测试 - Stub Runner嵌入了WireMock</li>
<li>检查验证结果</li>
<li>在消费者端配置Stub Runner在<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><a href="https://blog.csdn.net/weixin_39527812/article/details/80143599" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39527812/article/details/80143599</a></li>
</ul>
]]></content>
      <tags>
        <tag>契约测试</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列对比</title>
    <url>/2019/07/19/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>语言</th>
<th>文档</th>
<th>协议</th>
<th>存储</th>
<th>事务</th>
</tr>
</thead>
<tbody><tr>
<td>kafka</td>
<td>Scala</td>
<td>资料数量中等。有Kafka作者自己写的书，网上资料也有一些。</td>
<td>自己定义的一套…（基于TCP）</td>
<td>内存、磁盘、数据库。支持大量堆积。</td>
<td>支持</td>
</tr>
<tr>
<td>rabbitmq</td>
<td>erlang</td>
<td>资料数量多。有一些不错的书，网上资料多。</td>
<td>AMQP</td>
<td>内存、磁盘。支持少量堆积。</td>
<td>支持</td>
</tr>
<tr>
<td>rocketmq</td>
<td>java</td>
<td>资料数量少。专门写RocketMQ的书目前有了两本；网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。</td>
<td>自己定义的一套</td>
<td>磁盘。支持大量堆积。</td>
<td>支持</td>
</tr>
<tr>
<td>activemq</td>
<td>java</td>
<td>资料数量多。没有专门写ActiveMQ的书，网上资料多。</td>
<td>OpenWire、STOMP、REST、XMPP、AMQP</td>
<td>内存、磁盘、数据库。支持少量堆积。</td>
<td>支持</td>
</tr>
<tr>
<td>zeromq</td>
<td>c</td>
<td>资料数量少。专门写ZeroMQ的书较少，网上的资料多是一些代码的实现和简单介绍。</td>
<td>TCP、UDP</td>
<td>消息发送端的内存或者磁盘中。不支持持久化。</td>
<td>不支持</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>原码补码反码</title>
    <url>/2019/07/27/%E5%8E%9F%E7%A0%81%E8%A1%A5%E7%A0%81%E5%8F%8D%E7%A0%81/</url>
    <content><![CDATA[<p>我们知道日常生活中使用的数分为整数和实数，整数的小数点固定在数的最右边，可以省略不写，而实数的小数点则不固定。<br>在计算机中只能识别和表示“0”和“1”，而无法识别小数点，因此要想使得计算机能够处理日常使用的数据，小数点的问题是不可避免的。<br>关于计算机系统中实数的表示，在下篇文章中会讲解。本篇博客我们讲解的是整数在计算机系统中如何表示。　　<br>在各种大学教材，各种网站论坛中，对于整数编码表示方法的正确打开姿势（姿势要帅）如下：</p>
<h2 id="机器数"><a href="#机器数" class="headerlink" title="机器数"></a>机器数</h2><p>机器数（computer number）是数字在计算机中的二进制表示形式。机器数有2个特点：<br>①、符号数字化。因为计算机硬件只认识两种物理状态（用0和1表示），因此数据的正负号在机器里就用一位二进制0或者1来区分。在计算机用一个数的最高位存放符号, 0代表符号“+”，以1代表符号“-”。<br>②、机器数的大小受机器字长的限制。机器内部设备一次能表示的二进制位数叫机器的字长，一台机器的字长是固定的。字长8位叫一个字节（Byte），机器字长一般都是字节的整数倍，如字长8位、16位、32位、64位。<br>比如在字长为8的计算机中，十进制数+5，其机器数为00000101；十进制数-5，其机器数为10000101。</p>
<h2 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h2><p>计算机机器数真正的值称为真值。因为机器数的最高位是符号位，所以我们在计算真值的时候要分区分开。<br>比如上面讲的机器数10000101，单纯作为一个二进制数，我们转换为十进制是133。但是其真值是不计算符号位的，其最高位的1表示”-“。所以10000101的真值为-5。</p>
<h2 id="机器数的原码、反码、补码三种形式"><a href="#机器数的原码、反码、补码三种形式" class="headerlink" title="机器数的原码、反码、补码三种形式"></a>机器数的原码、反码、补码三种形式</h2><p>前面我们讲过机器数是在计算机中的二进制表示形式，但是在计算机中，这种表现形式又分为原码、反码、补码等三种最常用的形式。<br>ps：下面举例都是字长为8。<br><strong>①、原码</strong><br>原码=符号位+真值<br>　　比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+5]原码&#x3D;0 0000101</span><br><span class="line">[-5]原码&#x3D;1 0000101</span><br></pre></td></tr></table></figure>
<p>原码表示与真值对应直观，而且转换也简单。但是用原码进行加减运算的时候，会出现以下问题：<br>使用原码计算表达式：1 - 1 = 0<br>1 - 1 = 1 + （-1）= [00000001]原 + [10000001]原 = [10000010]原 = -2<br>注意：计算机是没有减法器，只有加法器，减法运算可以转换为加上那个数的负数。<br>我们发现通过原码计算1 - 1 表达式结果居然是 -2。所以早期计算机机器数采用原码编码的时候，在进行原码加减运算时，必须先判定是否是两个异号数相加或两个同号数相减，<br>若是，则必须判定两个数的绝对值大小，根据判断结果决定运算结果符号，并用绝对值大的数减去绝对值小的数。也就是说用这样一种形式进行加运算时，负数的符号位不能与其数值部分一道参加运算，而必须利用单独的线路确定符号位。<br>很显然，这样设计电路就很复杂，这是不经济实用的，为了解决这个问题，反码产生了。</p>
<p><strong>②、反码</strong><br>反码：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。<br>　　我们用反码来计算 1 - 1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 - 1 &#x3D; 1 + (-1) &#x3D; [0000 0001]原 + [1000 0001]原&#x3D; [0000 0001]反 + [1111 1110]反 &#x3D; [1111 1111]反 &#x3D; [1000 0000]原 &#x3D; -0</span><br></pre></td></tr></table></figure>
<p>　　看上去结果好像是正确的了，但是大家发现没，结果是-0，虽然对于0的符号没有什么实际意义。但是在计算机中，0如果用原码和反码表示会有两种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+0]&#x3D;[0000 0000]原&#x3D;[0000 0000]反</span><br><span class="line">[-0]&#x3D;[1000 0000]原&#x3D;[1111 1111]反</span><br></pre></td></tr></table></figure>
<p>两种编码就两种编码吧，只不过是多占用一个计算机表示数的编码形式。只要结果是正确的，我们还是能够忍受的，然而。。。。<br>请用反码计算表达式 2 -1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 -1 &#x3D; 2 + (-1) &#x3D; [0000 0010]原 + [1000 0001]原 &#x3D; [0000 0010]反 + [1111 1110]反 &#x3D; [0000 0000]反 &#x3D; [0000 0000]原 &#x3D; +0</span><br></pre></td></tr></table></figure>
<p>是不是很奇怪，原码计算 2 - 1 得到的结果居然是 0 。其实稍微分析计算过程我们也知道，再用反码进行加法运算的时候发生了进位，而由于字长为8，进位就直接省略了，便造成了错误。这肯定是不被允许的，所以采用反码的计算机解决办法如下：<br>反码的符号位相加后，如果有进位出现，则要把它送回到最低位去相加（循环进位）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 -1 &#x3D; 2 + (-1) &#x3D; [0000 0010]原 + [1000 0001]原 &#x3D; [0000 0010]反 + [1111 1110]反+[0000 0001]循环进位 &#x3D; [0000 0001]反 &#x3D; [0000 0001]原 &#x3D; +1</span><br><span class="line">13 - 6 &#x3D; 13 + （-6）&#x3D; [0000 1101]原 + [1000 0110]原 &#x3D; [0000 1101]反 +[1111 1001]反+[0000 0001]循环进位&#x3D;[0000 0111]反 &#x3D; [0000 0111]原 &#x3D;+7</span><br></pre></td></tr></table></figure>
<p>采用反码运算虽然较好的解决了原码运算所遇到的困难或问题，但由于循环进位需要二次算术相加，延长了计算时间，这同样给电路带来麻烦。这时候补码登场了。<br><strong>③、补码</strong><br>补码：正数的补码与原码相同，负数的补码等于其反码的末位加1<br>　　我们来看下面这个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 - 1 &#x3D; 1</span><br><span class="line">2 -1 &#x3D; 2 + (-1) &#x3D; [0000 0010]原 + [1000 0001]原 &#x3D; [0000 0010]反 + [1111 1110]反 &#x3D; [0000 0010]补 + [1111 1111]补 &#x3D; [0000 0001]补 &#x3D; [0000 0001]原 &#x3D;+1</span><br><span class="line">9 + 12 &#x3D; 21</span><br><span class="line">9 + 12 &#x3D; [0000 1001]原 + [0000 1100]原 &#x3D; [0000 1001]补 + [0000 1100]补 &#x3D; [0001 0101]补 &#x3D; [0001 0101]原 &#x3D; 21</span><br></pre></td></tr></table></figure>
<p>我们发现补码运算就很简单了，产生的进位直接舍去，而且不做多余的操作也解决了进位的问题。还有 +0 和 -0 的表示，在原码和反码都有两种形式，但是补码却只有一种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+0]&#x3D;[0000 0000]原&#x3D;[0000 0000]反&#x3D;[0000 0000]补</span><br><span class="line">[-0]&#x3D;[1000 0000]原&#x3D;[1111 1111]反&#x3D;[0000 0000]补</span><br></pre></td></tr></table></figure>
<p>就这样我们完美的解决了计算机中整数运算的问题。计算机的机器数采用补码的形式，我们在做算术运算的时候，既不需要额外的判断，又能得到准确的结果。<br>看上去本文应该结束了，然而……<br>请求出 127+1 的值</p>
<h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>接着上面抛出的问题，127+1的值，我们现在程序中看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> x = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">byte</span> y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> k = (<span class="keyword">byte</span>) (x+y);</span><br><span class="line">    System.out.println(k); <span class="comment">//-128</span></span><br><span class="line">    System.out.println(Byte.MIN_VALUE+<span class="string">"~"</span>+Byte.MAX_VALUE); <span class="comment">//-128~127</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>byte在计算机正好是一个字节，也就是8位二进制序列。我们发现127+1结果不是128，反而是-128，这就是结果发生了溢出。因为byte表示数的范围是-128-127,128超出了这个范围。用补码计算如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 + 127 &#x3D; [0000 0001]原 + [0111 1111]原 &#x3D; [0000 0001]补 + [0111 1111]补 &#x3D; [1000 0000]补</span><br></pre></td></tr></table></figure>
<p>我们发现这个数的符号位没有发生进位，但是数值最高位发生了进位。在看前面的2-1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 -1 &#x3D; 2 + (-1) &#x3D; [0000 0010]原 + [1000 0001]原 &#x3D; [0000 0010]补 + [1111 1111]补 &#x3D; [0000 0001]补 &#x3D; [0000 0001]原 &#x3D;+1</span><br></pre></td></tr></table></figure>
<p>这个表达式符号位和数值最高位发生了进位，但是结果却是正确的。总结如下：<br><strong>只有一个高位进位或者符号位进位就为溢出的规则。</strong><br>溢出是每种编码在运算时都不可避免的，一般来讲结果超过字长所表示数的范围都会发生溢出。而判断机器是正常进位还是溢出的基本依据，在微型机中可用异或电路来实现上述的判断。<br>在实际编码中解决办法也很简单，就是将结果用更大范围的编码形式接收即可。比如两个byte类型的数相加，我们用 int 来接收即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> x = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">byte</span> y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = x+y;</span><br><span class="line">    System.out.println(k); <span class="comment">//128</span></span><br><span class="line">    System.out.println(Byte.MIN_VALUE+<span class="string">"~"</span>+Byte.MAX_VALUE); <span class="comment">//-128~127</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以我们可以说用补码进行运算，在不考虑溢出的情况下，结果都是正确的。确实也是这样，但是……<br>请求出 -128 的补码？</p>
<h2 id="剧情反转"><a href="#剧情反转" class="headerlink" title="剧情反转"></a>剧情反转</h2><p>　　上面的给出的问题，-128 的补码，我们首先想到去求它的原码，嗯，原码应该是 [1000 0000]，不对，第一位不是符号位吗，[1000 0000]应该表示 -0。<br>那应该怎么用原码表示 -128呢，我们发现字长为 8 的计算机用原码是无法表示的，反码也是一样。我们看看补码，用 -127- 1 的表达式结果来计算 -128 的补码：<br>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补<br>-128的补码形式为 [1000 0000]，我们能通过算术表达式得到某个数的补码形式，但是为什么直接就求不出来？那么计算机自己是怎么实现的呢？<br>再来看这样一个问题：我们日常使用的钟表，比如现在钟表指向的是 10点钟，我要将钟表调整到 6 点钟，则有两种拨法：</p>
<p>①、顺时针将时针拨动 8 格<br>②、逆时针将时针拨动 4 (12-8) 格<br>由此给大家普及一个概念叫 “模”，钟表便是一个典型的模运算系统，其模数为12。<br>同理，对于十进制两位数，在将结果百位舍掉的情况下，50可以用60-10得到，或者60+90得到。这里的90也就是100-10得来的，那么我们就说十进制两位数运算系统的模数为100。<br>我们判定：两个相加等于模的数互为补数。<br>在模表示的范围内做减法运算，可以将“X－Y”的减法变更为“X＋Y的补数“的加法，当然这里不考虑结果溢出。<br>上面我们举的例子都是大数减小数，如果是小数减大数会怎样？<br>如果是10-80，结果应该是-70。但是如果按照 10+（100-20）的说法，结果应该是30。很明显，30和-70不是同一个结果，而且也没有产生百位进位。那我们应该怎么办呢？<br>解决办法很简单，就是让这两个数相等，而且这正好解决了负数的表示方法，-70的绝对值的补数正好是30。<br>但是问题又来了，这里的30已经表示正数30了，现在又表示负数-70，那我们怎么知道它到底表示哪个数？<br>为了解决这个问题，我们给这套规则规定一个范围，原来是0～99的正数，现在既然要用部分正数来代替负数了，那就要规定一个范围来使得一个数只代表一个含义，正好一人一半，0～49这个区间就代表正数，50～99的区间就用来代表各自补数的负值，</p>
<p>例：98就代表－2<br>所以0-99的编码数可以表示的数的范围为 -50-49。<br>我们解决了十进制两位数的减法运算，那么在字长为 8 的计算机系统中，我们又该如何呢？<br>8位二进制数可以表示的数为2的8次方，0-255，一共 256 个数，0也要占用一位数。所以我们说 256 是8 位二进制数的模，这和上面说的十进制两位数0-99，模为100是一样的。<br>我们按照前面讲的逻辑，一半的数0-127，代表其正数本身，另一半的数128-255表示其补数的负值，即-1<del>-128。<br>所以而 “X－Y”的减法 就用 “X＋Y的补数” 的加法来表示，即将减法的形式转换为加法的形式了，而且计算结果还是正确的。<br>注意：这里还是一样，不考虑结果的溢出，也就是计算值和结算结果都必须在-128</del>127之间，一旦超过这个范围，结果就不准了，这也是程序员日常编码说的int=int+int，如果结果大于int类型表示的范围，那得出来的结果肯定不准。<br>由此我们得出来的结论是：<br>计算机编码其实并没有什么所谓的符号位，但是由于计算机没有减法运算，为了将负数变为某个可以运算的编码来进行加法运算，补码产生了。这也间接说明了正数的补码是不变的，而负数的解决办法是首位不变，其余的取反再加1。<br>我们上面说的补码怎么得来的，<strong>就是 模-绝对值 。</strong><br>所以这个时候我说让你求 -128的补码，你马上就会知<br>256 - |-128|＝128 而128的二进制补码是不是就是 [1 0 0 0 0 0 0 0]<br>让你求 -1 的补码，你马上就会知<br>256 - |-1| = 255，其255的二进制补码形式就是[1111 1111]<br>注意：关于这样求补码的具体数学证明，请参考《计算机组成与系统结构》。
　　</p>
<h2 id="为何这样求补码"><a href="#为何这样求补码" class="headerlink" title="为何这样求补码"></a>为何这样求补码</h2><p>计算机里的129即表示-127，相当于模256为一圈，顺时针的129则和逆时针127即-127是一样的。<br>故可以得到以下结论：<br><strong>负数的补码为模减去该数的绝对值。</strong><br>本篇文章你可以直接从第 5 点开始看，忘掉计算机编码的什么首位符号位，忘掉计算机补码是由原码取反加1，回归简单直白的理解。计算机是机器，硬件能理解的只有高低电平，也就是0或者1。<br>它知道什么是符号位吗？这些规则只不过是为了更好的完成减法运算所yy出来的。</p>
<p>作者：IT可乐<br>链接：<a href="https://www.imooc.com/article/21360" target="_blank" rel="noopener">https://www.imooc.com/article/21360</a><br>来源：慕课网<br>本文原创发布于慕课网 ，转载请注明出处，谢谢合作</p>
]]></content>
      <tags>
        <tag>计算机语言</tag>
      </tags>
  </entry>
  <entry>
    <title>翻墙</title>
    <url>/2020/02/14/%E7%BF%BB%E5%A2%99/</url>
    <content><![CDATA[<h5 id="v2ray服务端"><a href="#v2ray服务端" class="headerlink" title="v2ray服务端"></a>v2ray服务端</h5><p><a href="https://github.com/Jrohy/multi-v2ray" target="_blank" rel="noopener">https://github.com/Jrohy/multi-v2ray</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L -s https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;v2ray&#x2F;v2ray-core&#x2F;master&#x2F;release&#x2F;install-release.sh &gt; install-release.sh</span><br><span class="line">bash install-release.sh</span><br><span class="line">systemctl start v2ray</span><br><span class="line">systemctl enable v2ray</span><br></pre></td></tr></table></figure>
<h5 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;63064&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>
<h5 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br></pre></td></tr></table></figure>
<h5 id="v2ray客户端"><a href="#v2ray客户端" class="headerlink" title="v2ray客户端"></a>v2ray客户端</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;install.direct&#x2F;go.sh &amp;&amp; sudo bash go.sh --local .&#x2F;v2ray-linux-64.zip</span><br></pre></td></tr></table></figure>
<h4 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在服务端查看配置</span><br><span class="line">cat &#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br><span class="line"></span><br><span class="line">修改客户端配置sudo gedit &#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;inbounds&quot;: [&#123;</span><br><span class="line">    &quot;port&quot;: 1080,  &#x2F;&#x2F; SOCKS 代理端口，在浏览器中需配置代理并指向这个端口</span><br><span class="line">    &quot;listen&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;udp&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;outbounds&quot;: [&#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;vnext&quot;: [&#123;</span><br><span class="line">        &quot;address&quot;: &quot;149.28.**.**&quot;, &#x2F;&#x2F; 服务器地址，请修改为你自己的服务器 ip 或域名</span><br><span class="line">        &quot;port&quot;: 63064,  &#x2F;&#x2F; 服务器端口</span><br><span class="line">        &quot;users&quot;: [&#123; &quot;id&quot;: &quot;*****-42a6-4e42-9f5b-1779eae25a3d&quot; &#125;]&#x2F;&#x2F;要与服务端保持一致</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">    &quot;tag&quot;: &quot;direct&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;routing&quot;: &#123;</span><br><span class="line">    &quot;domainStrategy&quot;: &quot;IPOnDemand&quot;,</span><br><span class="line">    &quot;rules&quot;: [&#123;</span><br><span class="line">      &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">      &quot;ip&quot;: [&quot;geoip:private&quot;],</span><br><span class="line">      &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">启动客户端</span><br><span class="line">sudo service v2ray restart</span><br></pre></td></tr></table></figure>
<h4 id="浏览器安装插件SwitchyOmega"><a href="#浏览器安装插件SwitchyOmega" class="headerlink" title="浏览器安装插件SwitchyOmega"></a>浏览器安装插件SwitchyOmega</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置proxy</span><br><span class="line">协议socket5 代理服务127.0.0.1 端口10800</span><br><span class="line"></span><br><span class="line">设置auto switch</span><br><span class="line">添加规则并自动更新</span><br><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;gfwlist&#x2F;gfwlist&#x2F;master&#x2F;gfwlist.txt</span><br><span class="line">删除上面两个无效的规则</span><br><span class="line">修改规则列表规则为:proxy</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>网络数据包传输过程</title>
    <url>/2020/02/05/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>首先：OSI参考模型包含七层：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。这里有必要先介绍一下这七层每层的作用。</p>
<p>物理层：这里物理层绝对不是指链接计算机的具体的物理设备和具体的传输媒体，比如双绞线，同轴电缆，光缆等等。物理层负责的是怎么样尽可能的屏蔽掉这些传输媒体间存在差异，使物理层上面的链路层感觉不到这些差异。物理层的主要任务包括：做一些硬件特性的规定，比如：电缆两端的电压多大，借口所用接线器的形状是什么样等等。物理层之间传送的是Bit流。</p>
<p>数据链路层：数据链路层的主要任务是：对下，加强物理层传输原始bit流的功能，使之对应的网络层显现为一条无错线路。对上：将网络成提交下来的IP数据报封装成数据帧，按顺序发送出去并处理接收方回送的确认帧。对中：发送和接收ARP,RARP数据帧。数据链路层传输的是数据帧。</p>
<p>网络层：IP层提供的是不可靠，无连接的数据报传送服务。负责的关键任务是：将运输层产生的报文段或用户数据报封装成分组或包，并确认源端到目的端的路由如何选择。</p>
<p>传输层：应用层的不同进程的报文通过端口向下交到运输层  ，然后传输层再交给网络层传输，当这些报文送到目的端后，传输层再根据就通过不同的端口提交给应用层的不同进程，总之就是：传输层使的不同的应用进程之间的通信好像是水平进行的一样。另外，传输层还提供对收到的报文进行差错检测，为Ip层报文传输提供可靠保证等功能。</p>
<p>会话层：允许不同机器上的用户建立会话关系，并同时获得会话同步，说白了就是，当传输一个很大的文件时，中间出现断网什么的，那么重新连接后，会话层协议使得传输了一半的文件继续传输，而不用重传整个文件。</p>
<p>表示层：由于不同的计算机体系结构使用的数据编码方式不一样，如IBM主机使用的是EBCDIC编码，而大部分PC主机使用的ASCII码，所以表示层就是用来完成这些编码之间的转化。</p>
<p>应用层：包含大量人们普遍需要的协议。为解决具体问题而彼此通信的进程就成为应用进程，应用层协议就是用来规定应用进程在通信时遵循的规则。TCI/IP协议簇里的应用层协议一般都遵循客户-服务器方式。</p>
<p>以上为整个osi参考模型的概述。下面，结合上面的概述，描述一个数据是如何传播的。这里把数据传播分到两个部分来说，数据从应用层到传输层为一个部分，物理层到网络层为另一个部分。　</p>
<p>应用层到传输层：将数据包传给网络层，网络层封装成IP数据包。　</p>
<p>网络层到物理层传输的数据的情况：</p>
<p>网络层的IP数据包是如何传输，IP数据报中有：源IP地址，目的IP地址。IP数据报需从主机A上传送到主机B上，主机A首先查找路由表，判断目的主机是否与自己在同一个网段内，</p>
<p>if（在同一个网段内，则主机A查询自己的ARP表，看是否有该目的IP地址对应的MAC地址的记录){ 　　　　　　<br>  if(有){<br>  则将该MAC地址作为目的MAC地址，封装数据帧，传送给主机B，<br>  　　　　　else{<br>  则发送一个ARP请求广播给网段内的所有主机，来查询该目的IP地址的MAC地址，收到ARP请求报文的各个主机如果发现该IP地址是自己的IP地址，则返回一个ARP应答报文告诉主机A自己的　　　　　　　　　　　　MAC地址，如果发现不是自己的IP地址，则丢弃该报文。主机A收到这个应答报文后，就按照返回的MAC地址，将IP数据包封装成帧，然后发送到主机B上。（补充：一般为了减少网络中的报文量，通信双方会维护一个各自的ARP表，把一次通信中获得IP MAC地址对保存在缓冲的ARP表中，但是ARP表有一个老化机制，删除一段时间内不用的IP MAC地址对。）<br>  }<br>}else if(搜索路由表，发现了能与目的网络号相匹配的表目，则把报文发给改表目指定的下一站的路由器或直接连接的网络接口。){<br>　　报文发送到下一站时，数据帧的目的MAC地址是下一个站路由器或者网络接口的MAC地址，而IP头部的目的IP地址是主机B的IP地址。<br>这里要指出的是：ARP请求报文以下一站路由器或网络接口的IP地址为目的IP地址，寻找真的目的MAC地址。换句话，ARP请求报文只负责IP数据报传输过程中每一跳中的目的MAC地址查询。<br>}else(搜索路由表，寻找标为“默认”的表目，把报文发送给该表目指定的下一站路由器。){<br>　　报文发送到下一站时，数据帧的目的MAC地址是下一个站路由器的MAC地址，而IP头部的目的IP地址是主机B的IP地址。<br>}</p>
<p>数据帧在每两个网络设备间传递时，是转换成bit流在传输媒体上传输。链路层提供了如停止等待协议等机制，控制了bit流在传输媒体上的无措传输。</p>
<h4 id="nat转换过程"><a href="#nat转换过程" class="headerlink" title="nat转换过程"></a>nat转换过程</h4><p>sudo cat /proc/net/nf_conntrack</p>
<h4 id="记住"><a href="#记住" class="headerlink" title="记住"></a>记住</h4><p>只要跨网段了（跨广播域），mac肯定是要变化的，IP地址只有在Nat时候会改变，否则在从source IP到destination IP过程中是不变的。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>(<a href="https://blog.csdn.net/wukai_std/article/details/78663678)[https://blog.csdn.net/wukai_std/article/details/78663678]" target="_blank" rel="noopener">https://blog.csdn.net/wukai_std/article/details/78663678)[https://blog.csdn.net/wukai_std/article/details/78663678]</a></p>
]]></content>
  </entry>
  <entry>
    <title>spring_config源码</title>
    <url>/2019/07/04/spring-config%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>部分摘抄自[<a href="https://blog.csdn.net/qq_34203492/article/details/83865450]" target="_blank" rel="noopener">https://blog.csdn.net/qq_34203492/article/details/83865450]</a></p>
<ol>
<li>PropertySourceBootstrapConfiguration<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    CompositePropertySource composite = <span class="keyword">new</span> CompositePropertySource(</span><br><span class="line">            BOOTSTRAP_PROPERTY_SOURCE_NAME);</span><br><span class="line">    AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.propertySourceLocators);</span><br><span class="line">    <span class="keyword">boolean</span> empty = <span class="keyword">true</span>;</span><br><span class="line">    ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">    <span class="keyword">for</span> (PropertySourceLocator locator : <span class="keyword">this</span>.propertySourceLocators) &#123;</span><br><span class="line">        PropertySource&lt;?&gt; source = <span class="keyword">null</span>;</span><br><span class="line">        source = locator.locate(environment);</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"Located property source: "</span> + source);</span><br><span class="line">        composite.addPropertySource(source);</span><br><span class="line">        empty = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!empty) &#123;</span><br><span class="line">        MutablePropertySources propertySources = environment.getPropertySources();</span><br><span class="line">        String logConfig = environment.resolvePlaceholders(<span class="string">"$&#123;logging.config:&#125;"</span>);</span><br><span class="line">        LogFile logFile = LogFile.get(environment);</span><br><span class="line">        <span class="keyword">if</span> (propertySources.contains(BOOTSTRAP_PROPERTY_SOURCE_NAME)) &#123;</span><br><span class="line">            propertySources.remove(BOOTSTRAP_PROPERTY_SOURCE_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        insertPropertySources(propertySources, composite);</span><br><span class="line">        reinitializeLoggingSystem(environment, logConfig, logFile);</span><br><span class="line">        <span class="comment">//初始化日志等级        </span></span><br><span class="line">        setLogLevels(applicationContext, environment);</span><br><span class="line">        handleIncludedProfiles(environment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="comment">//记录容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line">        <span class="comment">//xml解析在获取beanFactory之后，将配置文件解析成一个个Bean，并且注册到BeanFactory中，注意这里只是注册进去，并没有初始化</span></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="comment">//设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean，这里都是spring里面的特殊处理</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化，具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类，</span></span><br><span class="line">            <span class="comment">//来完成一些其他的操作</span></span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//调用BeanDefinitionRegistryPostProcessor 各个实现类的 postProcessBeanDefinitionRegistry和postProcessBeanFactory(factory)，下面会进行解析</span></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//这个方法注册 BeanPostProcessor 的实现类，和上面的BeanFactoryPostProcessor 是有区别的，</span></span><br><span class="line">            <span class="comment">//这个方法调用的其实是PostProcessorRegistrationDelegate类的registerBeanPostProcessors方法；</span></span><br><span class="line">            <span class="comment">//这个类里面有个内部类BeanPostProcessorChecker，BeanPostProcessorChecker里面有两个方法postProcessBeforeInitialization和postProcessAfterInitialization，</span></span><br><span class="line">            <span class="comment">//这两个方法分别在 Bean 初始化之前和初始化之后得到执行</span></span><br><span class="line">             <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//初始化当前 ApplicationContext 的 MessageSource，国际化处理</span></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化当前 ApplicationContext 的事件广播器</span></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//注册事件监听器，监听器需要实现 ApplicationListener 接口</span></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//初始化所有的 singleton beans（单例bean），懒加载（non-lazy-init）的除外</span></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                        <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>prepareBeanFactory<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Tell the internal bean factory to use the context's class loader etc.</span></span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line">    <span class="comment">//设置忽略自动装配的接口</span></span><br><span class="line">    <span class="comment">// Configure the bean factory with context callbacks.</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册可以解析的自动装配</span></span><br><span class="line">    <span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line">    <span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前BeanFactory包含loadTimeWeaver Bean，说明存在类加载期织入AspectJ，</span></span><br><span class="line">    <span class="comment">//则把当前BeanFactory交给类加载期BeanPostProcessor实现类LoadTimeWeaverAwareProcessor来处理，从而实现类加载期织入AspectJ的目的。</span></span><br><span class="line">    <span class="comment">//在编译期进行织入</span></span><br><span class="line">    <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">        <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册当前容器环境environment组件Bean</span></span><br><span class="line">    <span class="comment">// Register default environment beans.</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册系统配置systemProperties组件Bean</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册系统环境systemEnvironment组件Bean</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>invokeBeanFactoryPostProcessors的调用过程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void invokeBeanFactoryPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br><span class="line">    Set&lt;String&gt; processedBeans &#x3D; new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    if (beanFactory instanceof BeanDefinitionRegistry) &#123;</span><br><span class="line">        BeanDefinitionRegistry registry &#x3D; (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors &#x3D; new LinkedList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors &#x3D; new LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        &#x2F;&#x2F; 开始实例和调用已实例化的BeanDefinitionRegistryPostProcessor</span><br><span class="line">        for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                BeanDefinitionRegistryPostProcessor registryProcessor &#x3D;</span><br><span class="line">                        (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">                registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryProcessors.add(registryProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">        &#x2F;&#x2F; uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">        &#x2F;&#x2F; Separate between BeanDefinitionRegistryPostProcessors that implement</span><br><span class="line">        &#x2F;&#x2F; PriorityOrdered, Ordered, and the rest.</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors &#x3D; new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 获取未实例化并且实现PriorityOrdered的BeanDefinitionRegistryPostProcessor进行实例化和调用</span><br><span class="line">        &#x2F;&#x2F; First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><br><span class="line">        String[] postProcessorNames &#x3D;</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 获取未实例化并且实现Ordered的BeanDefinitionRegistryPostProcessor进行实例化和调用</span><br><span class="line">        &#x2F;&#x2F; Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><br><span class="line">        postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 获取未实例化的BeanDefinitionRegistryPostProcessor进行实例化和调用</span><br><span class="line">        &#x2F;&#x2F; Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><br><span class="line">        boolean reiterate &#x3D; true;</span><br><span class="line">        while (reiterate) &#123;</span><br><span class="line">            reiterate &#x3D; false;</span><br><span class="line">            postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">            for (String ppName : postProcessorNames) &#123;</span><br><span class="line">                if (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    reiterate &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">            registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">            currentRegistryProcessors.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;调用所有BeanDefinitionRegistryPostProcessor的postProcessBeanFactory方法</span><br><span class="line">        &#x2F;&#x2F; Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><br><span class="line">        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">        </span><br><span class="line">         &#x2F;&#x2F;调用所有BeanFactoryPostProcessor的postProcessBeanFactory方法</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; Invoke factory processors registered with the context instance.</span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;继续调用未执行过的调用所有BeanFactoryPostProcessor的postProcessBeanFactory方法</span><br><span class="line">    &#x2F;&#x2F; Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">    &#x2F;&#x2F; uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">    String[] postProcessorNames &#x3D;</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);</span><br><span class="line">    &#x2F;&#x2F;继续调用未执行过BeanFactoryPostProcessor的postProcessBeanFactory方法</span><br><span class="line">    &#x2F;&#x2F; Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span><br><span class="line">    &#x2F;&#x2F; Ordered, and the rest.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors &#x3D; new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">    for (String ppName : postProcessorNames) &#123;</span><br><span class="line">        if (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            &#x2F;&#x2F; skip - already processed in first phase above</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors &#x3D; new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Finally, invoke all other BeanFactoryPostProcessors.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;post-processors可能修改了元数据，所以清空元数据缓存</span><br><span class="line">    &#x2F;&#x2F; Clear cached merged bean definitions since the post-processors might have</span><br><span class="line">    &#x2F;&#x2F; modified the original metadata, e.g. replacing placeholders in values...</span><br><span class="line">    beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注册BeanPostProcessors<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></span><br><span class="line">    <span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></span><br><span class="line">    <span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></span><br><span class="line">    <span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">    <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            priorityOrderedPostProcessors.add(pp);</span><br><span class="line">            <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">                internalPostProcessors.add(pp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//首先，注册实现PriorityOrdered的BeanPostProcessors</span></span><br><span class="line">    <span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接下来，注册实现Ordered的BeanPostProcessors</span></span><br><span class="line">    <span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        orderedPostProcessors.add(pp);</span><br><span class="line">        <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//现在，注册常规的BeanPostProcessors</span></span><br><span class="line">    <span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        nonOrderedPostProcessors.add(pp);</span><br><span class="line">        <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最后，注册MergedBeanDefinitionPostProcessor</span></span><br><span class="line">    <span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">    sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></span><br><span class="line">    <span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>初始化MessageSource<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// Make MessageSource aware of parent MessageSource.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.messageSource <span class="keyword">instanceof</span> HierarchicalMessageSource) &#123;</span><br><span class="line">            HierarchicalMessageSource hms = (HierarchicalMessageSource) <span class="keyword">this</span>.messageSource;</span><br><span class="line">            <span class="keyword">if</span> (hms.getParentMessageSource() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Only set parent context as parent MessageSource if no parent MessageSource</span></span><br><span class="line">                <span class="comment">// registered already.</span></span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Using MessageSource ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Use empty MessageSource to be able to accept getMessage calls.</span></span><br><span class="line">        DelegatingMessageSource dms = <span class="keyword">new</span> DelegatingMessageSource();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        <span class="keyword">this</span>.messageSource = dms;</span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="keyword">this</span>.messageSource);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"No '"</span> + MESSAGE_SOURCE_BEAN_NAME + <span class="string">"' bean, using ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>初始化ApplicationEventMulticaster<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventMulticaster =</span><br><span class="line">                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Using ApplicationEventMulticaster ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"No '"</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="string">"' bean, using "</span> +</span><br><span class="line">                    <span class="string">"["</span> + <span class="keyword">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注册监听器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先注册静态指定的侦听器</span></span><br><span class="line">    <span class="comment">// Register statically specified listeners first.</span></span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册ApplicationListener的实现类</span></span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish early application events now that we finally have a multicaster...</span></span><br><span class="line">    Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="keyword">this</span>.earlyApplicationEvents;</span><br><span class="line">    <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (earlyEventsToProcess != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">            getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@Bean 覆盖策略<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isOverriddenByExistingDefinition</span><span class="params">(BeanMethod beanMethod, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BeanDefinition existingBeanDef = <span class="keyword">this</span>.registry.getBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is the existing bean definition one that was created from a configuration class?</span></span><br><span class="line">    <span class="comment">// -&gt; allow the current bean method to override, since both are at second-pass level.</span></span><br><span class="line">    <span class="comment">// However, if the bean method is an overloaded case on the same configuration class,</span></span><br><span class="line">    <span class="comment">// preserve the existing bean definition.</span></span><br><span class="line">    <span class="comment">//如果两个@Bean位于不同的配置类中，可以覆盖，如果相同的类，通过方法重载的方式配置，是不能被覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (existingBeanDef <span class="keyword">instanceof</span> ConfigurationClassBeanDefinition) &#123;</span><br><span class="line">        ConfigurationClassBeanDefinition ccbd = (ConfigurationClassBeanDefinition) existingBeanDef;</span><br><span class="line">        <span class="keyword">return</span> ccbd.getMetadata().getClassName().equals(</span><br><span class="line">                beanMethod.getConfigurationClass().getMetadata().getClassName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A bean definition resulting from a component scan can be silently overridden</span></span><br><span class="line">    <span class="comment">// by an @Bean method, as of 4.2...</span></span><br><span class="line">    <span class="comment">//扫描的Bean能够被@Bean覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (existingBeanDef <span class="keyword">instanceof</span> ScannedGenericBeanDefinition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Has the existing bean definition bean marked as a framework-generated bean?</span></span><br><span class="line">    <span class="comment">// -&gt; allow the current bean method to override it, since it is application-level</span></span><br><span class="line">    <span class="keyword">if</span> (existingBeanDef.getRole() &gt; BeanDefinition.ROLE_APPLICATION) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// At this point, it's a top-level override (probably XML), just having been parsed</span></span><br><span class="line">    <span class="comment">// before configuration class processing kicks in...</span></span><br><span class="line">    <span class="comment">//xml可以通过配置allowBeanDefinitionOverriding属性，来标识允不允许重复，默认为true.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registry <span class="keyword">instanceof</span> DefaultListableBeanFactory &amp;&amp;</span><br><span class="line">            !((DefaultListableBeanFactory) <span class="keyword">this</span>.registry).isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),</span><br><span class="line">                beanName, <span class="string">"@Bean definition illegally overridden by existing bean definition: "</span> + existingBeanDef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(String.format(<span class="string">"Skipping bean definition for %s: a definition for bean '%s' "</span> +</span><br><span class="line">                <span class="string">"already exists. This top-level bean definition is considered as an override."</span>,</span><br><span class="line">                beanMethod, beanName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ConfigurationClassPostProcessor<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父接口：</span><br><span class="line">AttributeAccessor, BeanMetadataElement </span><br><span class="line">子接口： </span><br><span class="line">AnnotatedBeanDefinition </span><br><span class="line">子类: </span><br><span class="line">AbstractBeanDefinition, AnnotatedGenericBeanDefinition, ChildBeanDefinition, GenericBeanDefinition, RootBeanDefinition, ScannedGenericBeanDefinition, ConfigurationClassBeanDefinition</span><br><span class="line"></span><br><span class="line">GenericBeanDefinition: 通用的bean实现，自2.5以后新加入的bean文件配置属性定义类，是ChildBeanDefinition和RootBeanDefinition更好的替代者，</span><br><span class="line">ScannedGenericBeanDefinition: 被包扫描到的bean定义</span><br><span class="line">AnnotatedGenericBeanDefinition: 查找类注解初始化的定义</span><br><span class="line">RootBeanDefinition: 代表一个从配置源（XML，Java Config等）中生成的BeanDefinition</span><br><span class="line">ChildBeanDefinition: 可以从父BeanDefinition中集成构造方法，属性等。</span><br><span class="line"></span><br><span class="line">被@Component注解都会转化成ScannedGenericBeanDefinition</span><br><span class="line">被@Bean注解都会转化成ConfigurationClassBeanDefinition</span><br></pre></td></tr></table></figure></li>
<li>bean注册<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            <span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">                        existingDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with a different definition: replacing ["</span> + existingDefinition +</span><br><span class="line">                        <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with an equivalent definition: replacing ["</span> + existingDefinition +</span><br><span class="line">                        <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">            <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">                <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                removeManualSingletonName(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Still in startup registration phase</span></span><br><span class="line">            <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            removeManualSingletonName(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>autowire<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, @Nullable String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable Set&lt;String&gt; autowiredBeanNames, @Nullable TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    InjectionPoint previousInjectionPoint = ConstructorResolver.setCurrentInjectionPoint(descriptor);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object shortcut = descriptor.resolveShortcut(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (shortcut != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> shortcut;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对@Value的属性，做注入</span></span><br><span class="line">        Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">        Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String strVal = resolveEmbeddedValue((String) value);</span><br><span class="line">                BeanDefinition bd = (beanName != <span class="keyword">null</span> &amp;&amp; containsBean(beanName) ? getMergedBeanDefinition(beanName) : <span class="keyword">null</span>);</span><br><span class="line">                value = evaluateBeanDefinitionString(strVal, bd);</span><br><span class="line">            &#125;</span><br><span class="line">            TypeConverter converter = (typeConverter != <span class="keyword">null</span> ? typeConverter : getTypeConverter());</span><br><span class="line">            <span class="keyword">return</span> (descriptor.getField() != <span class="keyword">null</span> ?</span><br><span class="line">                    converter.convertIfNecessary(value, type, descriptor.getField()) :</span><br><span class="line">                    converter.convertIfNecessary(value, type, descriptor.getMethodParameter()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对数组、容器类型的处理</span></span><br><span class="line">        <span class="comment">//因为是数组或容器，Sprng可以直接把符合类型的bean都注入到数组或容器中，处理逻辑是：</span></span><br><span class="line">        <span class="comment">//1.确定容器或数组的组件类型</span></span><br><span class="line">        <span class="comment">//2.调用findAutowireCandidates方法，获取与组件类型匹配的Map(beanName -&gt; bean实例)</span></span><br><span class="line">        <span class="comment">//3.将符合beanNames添加到autowiredBeanNames中</span></span><br><span class="line">        <span class="comment">//在调用findAutowireCandidates的时候,addCandidateEntry中如果是MultiElementDescriptor || containsSingleton 调用descriptor.resolveCandidate 将bean注入返回值中</span></span><br><span class="line">        Object multipleBeans = resolveMultipleBeans(descriptor, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        <span class="keyword">if</span> (multipleBeans != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> multipleBeans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">        <span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isRequired(descriptor)) &#123;</span><br><span class="line">                raiseNoMatchingBeanFound(type, descriptor.getResolvableType(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String autowiredBeanName;</span><br><span class="line">        Object instanceCandidate;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果发现同一个属性有多个bean,使用@primary或者@Priority决定使用哪个</span></span><br><span class="line">        <span class="keyword">if</span> (matchingBeans.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            autowiredBeanName = determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">            <span class="keyword">if</span> (autowiredBeanName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isRequired(descriptor) || !indicatesMultipleBeans(type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> descriptor.resolveNotUnique(type, matchingBeans);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// In case of an optional Collection/Map, silently ignore a non-unique case:</span></span><br><span class="line">                    <span class="comment">// possibly it was meant to be an empty collection of multiple regular beans</span></span><br><span class="line">                    <span class="comment">// (before 4.3 in particular when we didn't even look for collection beans).</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            instanceCandidate = matchingBeans.get(autowiredBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We have exactly one match.</span></span><br><span class="line">            Map.Entry&lt;String, Object&gt; entry = matchingBeans.entrySet().iterator().next();</span><br><span class="line">            autowiredBeanName = entry.getKey();</span><br><span class="line">            instanceCandidate = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (autowiredBeanNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            autowiredBeanNames.add(autowiredBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (instanceCandidate <span class="keyword">instanceof</span> Class ?</span><br><span class="line">                descriptor.resolveCandidate(autowiredBeanName, type, <span class="keyword">this</span>) : instanceCandidate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">findAutowireCandidates</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">            <span class="keyword">this</span>, requiredType, <span class="keyword">true</span>, descriptor.isEager());</span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(candidateNames.length);</span><br><span class="line">    <span class="comment">//如果已经解析过了直接装载进去</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; autowiringType : <span class="keyword">this</span>.resolvableDependencies.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (autowiringType.isAssignableFrom(requiredType)) &#123;</span><br><span class="line">            Object autowiringValue = <span class="keyword">this</span>.resolvableDependencies.get(autowiringType);</span><br><span class="line">            <span class="comment">//key值是我们需要的类型，但value值未必。</span></span><br><span class="line">          <span class="comment">//value可能是ObjectFactory，就得调用它的 getObject() 来获取真正的bean.</span></span><br><span class="line">            autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType);</span><br><span class="line">            <span class="keyword">if</span> (requiredType.isInstance(autowiringValue)) &#123;</span><br><span class="line">                result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不是自己依赖自己 ， 并且符合装配候选，就塞入result。</span></span><br><span class="line">      <span class="comment">//何为符合装配候选（isAutowireCandidate）呢？稍后我们再详细分析。</span></span><br><span class="line">    <span class="keyword">for</span> (String candidate : candidateNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSelfReference(beanName, candidate) &amp;&amp; isAutowireCandidate(candidate, descriptor)) &#123;</span><br><span class="line">            addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.isEmpty() &amp;&amp; !indicatesMultipleBeans(requiredType)) &#123;</span><br><span class="line">        <span class="comment">// Consider fallback matches if the first pass failed to find anything...</span></span><br><span class="line">        DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch();</span><br><span class="line">        <span class="keyword">for</span> (String candidate : candidateNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isSelfReference(beanName, candidate) &amp;&amp; isAutowireCandidate(candidate, fallbackDescriptor)) &#123;</span><br><span class="line">                addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Consider self references as a final pass...</span></span><br><span class="line">            <span class="comment">// but in the case of a dependency collection, not the very same bean itself.</span></span><br><span class="line">            <span class="keyword">for</span> (String candidate : candidateNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isSelfReference(beanName, candidate) &amp;&amp;</span><br><span class="line">                        (!(descriptor <span class="keyword">instanceof</span> MultiElementDescriptor) || !beanName.equals(candidate)) &amp;&amp;</span><br><span class="line">                        isAutowireCandidate(candidate, fallbackDescriptor)) &#123;</span><br><span class="line">                    addCandidateEntry(result, candidate, descriptor, requiredType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSelfReference</span><span class="params">(@Nullable String beanName, @Nullable String candidateName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (beanName != <span class="keyword">null</span> &amp;&amp; candidateName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            <span class="comment">//自我依赖或者跟class类名一致</span></span><br><span class="line">            <span class="comment">//@Autowired</span></span><br><span class="line">            <span class="comment">//private Test test;</span></span><br><span class="line">            <span class="comment">//@Bean</span></span><br><span class="line">            <span class="comment">//public Test test() &#123;</span></span><br><span class="line">            <span class="comment">//    return new Test();</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            (beanName.equals(candidateName) || (containsBeanDefinition(candidateName) &amp;&amp;</span><br><span class="line">                    beanName.equals(getMergedLocalBeanDefinition(candidateName).getFactoryBeanName()))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addCandidateEntry</span><span class="params">(Map&lt;String, Object&gt; candidates, String candidateName,</span></span></span><br><span class="line"><span class="function"><span class="params">        DependencyDescriptor descriptor, Class&lt;?&gt; requiredType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (descriptor <span class="keyword">instanceof</span> MultiElementDescriptor) &#123;</span><br><span class="line">        Object beanInstance = descriptor.resolveCandidate(candidateName, requiredType, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> NullBean)) &#123;</span><br><span class="line">            candidates.put(candidateName, beanInstance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (containsSingleton(candidateName) || (descriptor <span class="keyword">instanceof</span> StreamDependencyDescriptor &amp;&amp;</span><br><span class="line">            ((StreamDependencyDescriptor) descriptor).isOrdered())) &#123;</span><br><span class="line">        Object beanInstance = descriptor.resolveCandidate(candidateName, requiredType, <span class="keyword">this</span>);</span><br><span class="line">        candidates.put(candidateName, (beanInstance <span class="keyword">instanceof</span> NullBean ? <span class="keyword">null</span> : beanInstance));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        candidates.put(candidateName, getType(candidateName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">(String beanName, DependencyDescriptor descriptor, AutowireCandidateResolver resolver)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchBeanDefinitionException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);</span><br><span class="line">    <span class="comment">//已定义BeanDefinition</span></span><br><span class="line">    <span class="keyword">if</span> (containsBeanDefinition(beanDefinitionName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor, resolver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//已创建单例</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> isAutowireCandidate(beanName, <span class="keyword">new</span> RootBeanDefinition(getType(beanName)), descriptor, resolver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从父类中查找</span></span><br><span class="line">    BeanFactory parent = getParentBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">        <span class="comment">// No bean definition found in this factory -&gt; delegate to parent.</span></span><br><span class="line">        <span class="keyword">return</span> ((DefaultListableBeanFactory) parent).isAutowireCandidate(beanName, descriptor, resolver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        <span class="comment">// If no DefaultListableBeanFactory, can't pass the resolver along.</span></span><br><span class="line">        <span class="keyword">return</span> ((ConfigurableListableBeanFactory) parent).isAutowireCandidate(beanName, descriptor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">(String beanName, RootBeanDefinition mbd,</span></span></span><br><span class="line"><span class="function"><span class="params">        DependencyDescriptor descriptor, AutowireCandidateResolver resolver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);</span><br><span class="line">    resolveBeanClass(mbd, beanDefinitionName);</span><br><span class="line">    <span class="keyword">if</span> (mbd.isFactoryMethodUnique &amp;&amp; mbd.factoryMethodToIntrospect == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstructorResolver(<span class="keyword">this</span>).resolveFactoryMethodIfPossible(mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.isAutowireCandidate(</span><br><span class="line">            <span class="keyword">new</span> BeanDefinitionHolder(mbd, beanName, getAliases(beanDefinitionName)), descriptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取类型<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException &#123;</span><br><span class="line">    String beanName = transformedBeanName(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check manually registered singletons.</span></span><br><span class="line">    Object beanInstance = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (beanInstance != <span class="keyword">null</span> &amp;&amp; beanInstance.getClass() != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> FactoryBean &amp;&amp; !BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getTypeForFactoryBean((FactoryBean&lt;?&gt;) beanInstance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance.getClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No singleton instance found -&gt; check bean definition.</span></span><br><span class="line">    BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">        <span class="comment">// No bean definition found in this factory -&gt; delegate to parent.</span></span><br><span class="line">        <span class="keyword">return</span> parentBeanFactory.getType(originalBeanName(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check decorated bean definition, if any: We assume it'll be easier</span></span><br><span class="line">    <span class="comment">// to determine the decorated bean's type than the proxy's type.</span></span><br><span class="line">    BeanDefinitionHolder dbd = mbd.getDecoratedDefinition();</span><br><span class="line">    <span class="keyword">if</span> (dbd != <span class="keyword">null</span> &amp;&amp; !BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        RootBeanDefinition tbd = getMergedBeanDefinition(dbd.getBeanName(), dbd.getBeanDefinition(), mbd);</span><br><span class="line">        Class&lt;?&gt; targetClass = predictBeanType(dbd.getBeanName(), tbd);</span><br><span class="line">        <span class="keyword">if</span> (targetClass != <span class="keyword">null</span> &amp;&amp; !FactoryBean<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">targetClass</span>)) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> targetClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; beanClass = predictBeanType(beanName, mbd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check bean class whether we're dealing with a FactoryBean.</span></span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; FactoryBean<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">            <span class="comment">// If it's a FactoryBean, we want to look at what it creates, not at the factory class.</span></span><br><span class="line">            <span class="keyword">return</span> getTypeForFactoryBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> beanClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (!BeanFactoryUtils.isFactoryDereference(name) ? beanClass : <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ignoredDependencyTypes，ignoredDependencyInterfaces在autowire时忽略注入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void autowireByName(</span><br><span class="line">			String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line"></span><br><span class="line">    String[] propertyNames &#x3D; unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        if (containsBean(propertyName)) &#123;</span><br><span class="line">            Object bean &#x3D; getBean(propertyName);</span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Added autowiring by name from bean name &#39;&quot; + beanName +</span><br><span class="line">                        &quot;&#39; via property &#39;&quot; + propertyName + &quot;&#39; to bean named &#39;&quot; + propertyName + &quot;&#39;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Not autowiring property &#39;&quot; + propertyName + &quot;&#39; of bean &#39;&quot; + beanName +</span><br><span class="line">                        &quot;&#39; by name: no matching bean found&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">    Set&lt;String&gt; result &#x3D; new TreeSet&lt;&gt;();</span><br><span class="line">    PropertyValues pvs &#x3D; mbd.getPropertyValues();</span><br><span class="line">    PropertyDescriptor[] pds &#x3D; bw.getPropertyDescriptors();</span><br><span class="line">    for (PropertyDescriptor pd : pds) &#123;</span><br><span class="line">        if (pd.getWriteMethod() !&#x3D; null &amp;&amp; !isExcludedFromDependencyCheck(pd) &amp;&amp; !pvs.contains(pd.getName()) &amp;&amp;</span><br><span class="line">                !BeanUtils.isSimpleProperty(pd.getPropertyType())) &#123;</span><br><span class="line">            result.add(pd.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return StringUtils.toStringArray(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected boolean isExcludedFromDependencyCheck(PropertyDescriptor pd) &#123;</span><br><span class="line">    return (AutowireUtils.isExcludedFromDependencyCheck(pd) ||</span><br><span class="line">            this.ignoredDependencyTypes.contains(pd.getPropertyType()) ||</span><br><span class="line">            AutowireUtils.isSetterDefinedInInterface(pd, this.ignoredDependencyInterfaces));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>BeanPostProcessor的五大接口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface BeanPostProcessor &#123;</span><br><span class="line">    &#x2F;&#x2F;该方法在bean实例化完毕（且已经注入完毕），在afterPropertiesSet或自定义init方法执行之前</span><br><span class="line">    @Nullable</span><br><span class="line">    default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;在afterPropertiesSet或自定义init方法执行之后</span><br><span class="line">    @Nullable</span><br><span class="line">    default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor &#123;</span><br><span class="line">    &#x2F;&#x2F;这个方法用来在对象实例化前直接返回一个对象（如代理对象）来代替通过内置的实例化流程创建对象；</span><br><span class="line">    @Nullable</span><br><span class="line">    default Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;在对象实例化完毕执行populateBean之前 如果返回false则spring不再对对应的bean实例进行自动依赖注入。</span><br><span class="line">    default boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;这里是在spring处理完默认的成员属性，应用到指定的bean之前进行回调，可以用来检查和修改属性，最终返回的PropertyValues会应用到bean中</span><br><span class="line">    &#x2F;&#x2F;@Autowired、@Resource等就是根据这个回调来实现最终注入依赖的属性的。</span><br><span class="line">    @Nullable</span><br><span class="line">    default PropertyValues postProcessPropertyValues(</span><br><span class="line">            PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        return pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public interface SmartInstantiationAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessor &#123;</span><br><span class="line">    &#x2F;&#x2F;用来返回目标对象的类型（比如代理对象通过raw class获取proxy type 用于类型匹配）</span><br><span class="line">    @Nullable</span><br><span class="line">    default Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;这里提供一个拓展点用来解析获取用来实例化的构造器（比如未通过bean定义构造器以及参数的情况下，会根据这个回调来确定构造器）</span><br><span class="line">    @Nullable</span><br><span class="line">    default Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName)</span><br><span class="line">            throws BeansException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取要提前暴露的bean的引用，用来支持单例对象的循环引用（一般是bean自身，如果是代理对象则需要取用代理引用）</span><br><span class="line">    default Object getEarlyBeanReference(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface DestructionAwareBeanPostProcessor extends BeanPostProcessor &#123;</span><br><span class="line">    &#x2F;&#x2F;这里实现销毁对象的逻辑</span><br><span class="line">    void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException;</span><br><span class="line">    &#x2F;&#x2F;判断是否需要处理这个对象的销毁</span><br><span class="line">    default boolean requiresDestruction(Object bean) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这个相当于InstantiationAwareBeanPostProcessor的扩展版本，增加了一个对Bean类型预测的回调，但这个主要是Spring框架内部用的，用户还是用InstantiationAwareBeanPostProcessor即可</span><br><span class="line">public interface MergedBeanDefinitionPostProcessor extends BeanPostProcessor &#123;</span><br><span class="line">    &#x2F;&#x2F;在bean实例化完毕后调用 可以用来修改merged BeanDefinition的一些properties 或者用来给后续回调中缓存一些meta信息使用</span><br><span class="line">    &#x2F;&#x2F;这个算是将merged BeanDefinition暴露出来的一个回调</span><br><span class="line">    void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于BeanPostProcessor中各个回调调用的顺序"><a href="#关于BeanPostProcessor中各个回调调用的顺序" class="headerlink" title="关于BeanPostProcessor中各个回调调用的顺序"></a>关于BeanPostProcessor中各个回调调用的顺序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(beanClass, beanName)</span><br><span class="line"> .   该方法在创建对象之前会先掉用，如果有返回实例则直接使用不会去走下面创建对象的逻辑，并在之后执行</span><br><span class="line"> .       BeanPostProcessor.postProcessAfterInitialization(result, beanName)</span><br><span class="line">2. SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors(beanClass, beanName)</span><br><span class="line"> .   如果需要的话，会在实例化对象之前执行</span><br><span class="line">3. MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition(mbd, beanType, beanName)</span><br><span class="line"> .   在对象实例化完毕 初始化之前执行</span><br><span class="line">4. InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)</span><br><span class="line"> .   在bean创建完毕初始化之前执行</span><br><span class="line">5. InstantiationAwareBeanPostProcessor.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName)</span><br><span class="line"> .   在bean的property属性注入完毕 向bean中设置属性之前执行</span><br><span class="line">6. BeanPostProcessor.postProcessBeforeInitialization(result, beanName)</span><br><span class="line"> .   在bean初始化（自定义init或者是实现了InitializingBean.afterPropertiesSet()）之前执行</span><br><span class="line">7. BeanPostProcessor.postProcessAfterInitialization(result, beanName)</span><br><span class="line"> .   在bean初始化（自定义init或者是实现了InitializingBean.afterPropertiesSet()）之后执行</span><br><span class="line">8. 其中DestructionAwareBeanPostProcessor方法的postProcessBeforeDestruction(Object bean, String beanName)会在销毁对象前执行</span><br></pre></td></tr></table></figure></li>
<li>注解扫描入口ConfigurationClassPostProcessor<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">		SingletonBeanRegistry sbr = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">			sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>.localBeanNameGeneratorSet &amp;&amp; sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) &#123;</span><br><span class="line">				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">				<span class="keyword">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">				<span class="keyword">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//开始扫描@Configuration</span></span><br><span class="line">		<span class="comment">// Parse each @Configuration class</span></span><br><span class="line">		ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">				<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;BeanDefinitionHolder&gt;(configCandidates);</span><br><span class="line">		Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;ConfigurationClass&gt;(configCandidates.size());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">		    <span class="comment">//循环解析</span></span><br><span class="line">			parser.parse(candidates);</span><br><span class="line">			parser.validate();</span><br><span class="line"></span><br><span class="line">			Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;ConfigurationClass&gt;(parser.getConfigurationClasses());</span><br><span class="line">			configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">						registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">						<span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">			alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">			candidates.clear();</span><br><span class="line">			<span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">				String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">				Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(candidateNames));</span><br><span class="line">				Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">				<span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">						BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">						<span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="keyword">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">								!alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">							candidates.add(<span class="keyword">new</span> BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				candidateNames = newCandidateNames;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line">		<span class="keyword">if</span> (sbr != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line">			((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li>springboot 中@Conditional中生成拦截使用到类<code>ConditionEvaluator</code></li>
<li>springcloud在存在bootstrap.yml会创建上下文 <code>BootstrapApplicationListener</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class="line">    ConfigurableEnvironment environment = event.getEnvironment();</span><br><span class="line">    <span class="keyword">if</span> (!environment.getProperty(<span class="string">"spring.cloud.bootstrap.enabled"</span>, Boolean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">true</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// don't listen to events in a bootstrap context</span></span><br><span class="line">    <span class="keyword">if</span> (environment.getPropertySources().contains(BOOTSTRAP_PROPERTY_SOURCE_NAME)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    String configName = environment</span><br><span class="line">            .resolvePlaceholders(<span class="string">"$&#123;spring.cloud.bootstrap.name:bootstrap&#125;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ApplicationContextInitializer&lt;?&gt; initializer : event.getSpringApplication()</span><br><span class="line">            .getInitializers()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> ParentContextApplicationContextInitializer) &#123;</span><br><span class="line">            context = findBootstrapContext(</span><br><span class="line">                    (ParentContextApplicationContextInitializer) initializer,</span><br><span class="line">                    configName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">        context = bootstrapServiceContext(environment, event.getSpringApplication(),</span><br><span class="line">                configName);</span><br><span class="line">    &#125;</span><br><span class="line">    apply(context, event.getSpringApplication(), environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SharedMetadataReaderFactoryContextInitializer CachingMetadataReaderFactoryPostProcessor</span><br><span class="line">ConfigurationWarningsApplicationContextInitializer ConfigurationWarningsPostProcessor</span><br><span class="line">ConfigFileApplicationContextInitializer ConfigFileApplicationListener PropertySourceOrderingPostProcessor</span><br></pre></td></tr></table></figure></li>
<li>springboot启动注入<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建上下文容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigServletWebServerApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建AnnotatedReader</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">    Assert.notNull(environment, <span class="string">"Environment must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.registry = registry;</span><br><span class="line">    <span class="keyword">this</span>.conditionEvaluator = <span class="keyword">new</span> ConditionEvaluator(registry, environment, <span class="keyword">null</span>);</span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注入AnnotationConfigProcessors</span></span><br><span class="line"><span class="comment">//支持如下：</span></span><br><span class="line"><span class="comment">//1：ConfigurationClassPostProcessor（@Configuration，）</span></span><br><span class="line"><span class="comment">//2：AutowiredAnnotationBeanPostProcessor</span></span><br><span class="line"><span class="comment">//3：CommonAnnotationBeanPostProcessor（JSR-250）</span></span><br><span class="line"><span class="comment">//4：PersistenceAnnotationBeanPostProcessor（JPA support）</span></span><br><span class="line"><span class="comment">//5：EventListenerMethodProcessor</span></span><br><span class="line"><span class="comment">//6：DefaultEventListenerFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">registerAnnotationConfigProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    <span class="keyword">if</span> (beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(ConfigurationClassPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(AutowiredAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span></span><br><span class="line">    <span class="keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(CommonAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span></span><br><span class="line">    <span class="keyword">if</span> (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                    AnnotationConfigUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()))</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Cannot load optional framework class: "</span> + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(EventListenerMethodProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(DefaultEventListenerFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> beanDefs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConfigurationClassPostProcessor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">        BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Bean definition has already been processed as a configuration class: "</span> + beanDef);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果符合一个配置类型的java类定义，带有@Configuration且proxyBeanMethods=false为full</span></span><br><span class="line">        <span class="comment">//带有@Component、@ComponentScan、@Import、@ImportResource之一或方法上有@Bean为lite</span></span><br><span class="line">        <span class="comment">//加入configCandidates集合，后面根据优先级实例化配置bean</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">            configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Return immediately if no @Configuration classes were found</span></span><br><span class="line">    <span class="keyword">if</span> (configCandidates.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据类定义上的@Order注解排序</span></span><br><span class="line">    <span class="comment">// Sort by previously determined @Order value, if applicable</span></span><br><span class="line">    configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">        <span class="keyword">int</span> i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">    SingletonBeanRegistry sbr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">        sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.localBeanNameGeneratorSet) &#123;</span><br><span class="line">            <span class="comment">//如果AnnotationConfigWebApplicationContext设置了beanNameGenerator，则使用该beanNameGenerator</span></span><br><span class="line">            <span class="comment">//否则组件扫描bean name是简单类名首字母小写，被导入的bean name是类的全限定名</span></span><br><span class="line">            BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(</span><br><span class="line">                    AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">            <span class="keyword">if</span> (generator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">                <span class="keyword">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse each @Configuration class</span></span><br><span class="line">    ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">            <span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">            <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">    Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parser.parse(candidates);</span><br><span class="line">        parser.validate();</span><br><span class="line"></span><br><span class="line">        Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">        configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">                    registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">                    <span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析@Bean</span></span><br><span class="line">        <span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">        alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">        candidates.clear();</span><br><span class="line">        <span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">            String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">            Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">            Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">                    BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">                    <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="keyword">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">                            !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">                        candidates.add(<span class="keyword">new</span> BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidateNames = newCandidateNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line">    <span class="keyword">if</span> (sbr != <span class="keyword">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">        sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line">        <span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line">        <span class="comment">// for a shared cache since it'll be cleared by the ApplicationContext.</span></span><br><span class="line">        ((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkConfigurationClassCandidate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String className = beanDef.getBeanClassName();</span><br><span class="line">    <span class="keyword">if</span> (className == <span class="keyword">null</span> || beanDef.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationMetadata metadata;</span><br><span class="line">    <span class="keyword">if</span> (beanDef <span class="keyword">instanceof</span> AnnotatedBeanDefinition &amp;&amp;</span><br><span class="line">            className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) &#123;</span><br><span class="line">        <span class="comment">// Can reuse the pre-parsed metadata from the given BeanDefinition...</span></span><br><span class="line">        metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) beanDef).hasBeanClass()) &#123;</span><br><span class="line">        <span class="comment">// Check already loaded Class if present...</span></span><br><span class="line">        <span class="comment">// since we possibly can't even load the class file for this Class.</span></span><br><span class="line">        Class&lt;?&gt; beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass();</span><br><span class="line">        <span class="keyword">if</span> (BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">BeanPostProcessor</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">AopInfrastructureBean</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">EventListenerFactory</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>)) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        metadata = AnnotationMetadata.introspect(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">            metadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Could not find class file for introspecting configuration annotations: "</span> +</span><br><span class="line">                        className, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    <span class="comment">//@Configuration注解，且不是代理类</span></span><br><span class="line">    <span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; !Boolean.FALSE.equals(config.get(<span class="string">"proxyBeanMethods"</span>))) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (config != <span class="keyword">null</span> || isConfigurationCandidate(metadata)) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// It's a full or lite configuration candidate... Let's determine the order value, if any.</span></span><br><span class="line">    Integer order = getOrder(metadata);</span><br><span class="line">    <span class="keyword">if</span> (order != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanDef.setAttribute(ORDER_ATTRIBUTE, order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//parser.parse(candidates)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                    <span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(@Nullable String className, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Assert.notNull(className, <span class="string">"No bean class name for configuration class bean definition"</span>);</span><br><span class="line">    MetadataReader reader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(reader, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Class&lt;?&gt; clazz, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(clazz, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(AnnotationMetadata metadata, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(metadata, beanName));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processConfigurationClass</span><span class="params">(ConfigurationClass configClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//根据@Conditional注解Condition的实现类判断此configClass是否应该跳过</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果同一个配置类被处理两次，两次都属于被导入的则合并导入类，返回。如果配置类不是被导入的，则移除旧使用新的配置类</span></span><br><span class="line">    ConfigurationClass existingClass = <span class="keyword">this</span>.configurationClasses.get(configClass);</span><br><span class="line">    <span class="keyword">if</span> (existingClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (existingClass.isImported()) &#123;</span><br><span class="line">                existingClass.mergeImportedBy(configClass);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Otherwise ignore new imported config class; existing non-imported class overrides it.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Explicit bean definition found, probably replacing an import.</span></span><br><span class="line">            <span class="comment">// Let's remove the old one and go with the new one.</span></span><br><span class="line">            <span class="keyword">this</span>.configurationClasses.remove(configClass);</span><br><span class="line">            <span class="keyword">this</span>.knownSuperclasses.values().removeIf(configClass::equals);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用configuration，父类</span></span><br><span class="line">    <span class="comment">// Recursively process the configuration class and its superclass hierarchy.</span></span><br><span class="line">    SourceClass sourceClass = asSourceClass(configClass);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sourceClass = doProcessConfigurationClass(configClass, sourceClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sourceClass != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.configurationClasses.put(configClass, configClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">        <span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line">        processMemberClasses(configClass, sourceClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">annotation</span>.<span class="title">PropertySource</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"Ignoring @PropertySource annotation on ["</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    <span class="string">"]. Reason: Environment must implement ConfigurableEnvironment"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans<span class="class">.<span class="keyword">class</span>, <span class="title">ComponentScan</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !<span class="keyword">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    <span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            <span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line">            <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                <span class="keyword">if</span> (bdCand == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @Import annotations</span></span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">    AnnotationAttributes importResource =</span><br><span class="line">            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (importResource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String[] resources = importResource.getStringArray(<span class="string">"locations"</span>);</span><br><span class="line">        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(<span class="string">"reader"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">            String resolvedResource = <span class="keyword">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    <span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process default methods on interfaces</span></span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process superclass, if any</span></span><br><span class="line">    <span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        <span class="keyword">if</span> (superclass != <span class="keyword">null</span> &amp;&amp; !superclass.startsWith(<span class="string">"java"</span>) &amp;&amp;</span><br><span class="line">                !<span class="keyword">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            <span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line">            <span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processMemberClasses</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Collection&lt;SourceClass&gt; memberClasses = sourceClass.getMemberClasses();</span><br><span class="line">    <span class="keyword">if</span> (!memberClasses.isEmpty()) &#123;</span><br><span class="line">        List&lt;SourceClass&gt; candidates = <span class="keyword">new</span> ArrayList&lt;&gt;(memberClasses.size());</span><br><span class="line">        <span class="keyword">for</span> (SourceClass memberClass : memberClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &amp;&amp;</span><br><span class="line">                    !memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) &#123;</span><br><span class="line">                candidates.add(memberClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        OrderComparator.sort(candidates);</span><br><span class="line">        <span class="keyword">for</span> (SourceClass candidate : candidates) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.importStack.contains(configClass)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.problemReporter.error(<span class="keyword">new</span> CircularImportProblem(configClass, <span class="keyword">this</span>.importStack));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.importStack.push(configClass);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.importStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(Set&lt;ConfigurationClass&gt; configurationModel)</span> </span>&#123;</span><br><span class="line">    TrackedConditionEvaluator trackedConditionEvaluator = <span class="keyword">new</span> TrackedConditionEvaluator();</span><br><span class="line">    <span class="keyword">for</span> (ConfigurationClass configClass : configurationModel) &#123;</span><br><span class="line">        loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Conditional校验</span></span><br><span class="line">    <span class="keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">        String beanName = configClass.getBeanName();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.registry.removeBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">        registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">        loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Import</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitionForImportedConfigurationClass</span><span class="params">(ConfigurationClass configClass)</span> </span>&#123;</span><br><span class="line">    AnnotationMetadata metadata = configClass.getMetadata();</span><br><span class="line">    AnnotatedGenericBeanDefinition configBeanDef = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(metadata);</span><br><span class="line"></span><br><span class="line">    ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef);</span><br><span class="line">    configBeanDef.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    String configBeanName = <span class="keyword">this</span>.importBeanNameGenerator.generateBeanName(configBeanDef, <span class="keyword">this</span>.registry);</span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);</span><br><span class="line"></span><br><span class="line">    BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(configBeanDef, configBeanName);</span><br><span class="line">    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">    <span class="keyword">this</span>.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());</span><br><span class="line">    configClass.setBeanName(configBeanName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Registered bean definition for imported class '"</span> + configBeanName + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForBeanMethod</span><span class="params">(BeanMethod beanMethod)</span> </span>&#123;</span><br><span class="line">    ConfigurationClass configClass = beanMethod.getConfigurationClass();</span><br><span class="line">    MethodMetadata metadata = beanMethod.getMetadata();</span><br><span class="line">    String methodName = metadata.getMethodName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do we need to mark the bean as skipped by its condition?</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        configClass.skippedBeanMethods.add(methodName);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configClass.skippedBeanMethods.contains(methodName)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Assert.state(bean != <span class="keyword">null</span>, <span class="string">"No @Bean annotation attributes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Consider name and any aliases</span></span><br><span class="line">    List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(bean.getStringArray(<span class="string">"name"</span>)));</span><br><span class="line">    String beanName = (!names.isEmpty() ? names.remove(<span class="number">0</span>) : methodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register aliases even when overridden</span></span><br><span class="line">    <span class="keyword">for</span> (String alias : names) &#123;</span><br><span class="line">        <span class="keyword">this</span>.registry.registerAlias(beanName, alias);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Has this effectively been overridden before (e.g. via XML)?</span></span><br><span class="line">    <span class="keyword">if</span> (isOverriddenByExistingDefinition(beanMethod, beanName)) &#123;</span><br><span class="line">        <span class="comment">//@Configuration与@Bean同名</span></span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),</span><br><span class="line">                    beanName, <span class="string">"Bean name derived from @Bean method '"</span> + beanMethod.getMetadata().getMethodName() +</span><br><span class="line">                    <span class="string">"' clashes with bean name for containing configuration class; please make those names unique!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConfigurationClassBeanDefinition beanDef = <span class="keyword">new</span> ConfigurationClassBeanDefinition(configClass, metadata);</span><br><span class="line">    beanDef.setResource(configClass.getResource());</span><br><span class="line">    beanDef.setSource(<span class="keyword">this</span>.sourceExtractor.extractSource(metadata, configClass.getResource()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metadata.isStatic()) &#123;</span><br><span class="line">        <span class="comment">// static @Bean method</span></span><br><span class="line">        beanDef.setBeanClassName(configClass.getMetadata().getClassName());</span><br><span class="line">        beanDef.setFactoryMethodName(methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// instance @Bean method</span></span><br><span class="line">        beanDef.setFactoryBeanName(configClass.getBeanName());</span><br><span class="line">        beanDef.setUniqueFactoryMethodName(methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    beanDef.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line">    beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.</span><br><span class="line">            SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);</span><br><span class="line"></span><br><span class="line">    Autowire autowire = bean.getEnum(<span class="string">"autowire"</span>);</span><br><span class="line">    <span class="keyword">if</span> (autowire.isAutowire()) &#123;</span><br><span class="line">        beanDef.setAutowireMode(autowire.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> autowireCandidate = bean.getBoolean(<span class="string">"autowireCandidate"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!autowireCandidate) &#123;</span><br><span class="line">        beanDef.setAutowireCandidate(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String initMethodName = bean.getString(<span class="string">"initMethod"</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(initMethodName)) &#123;</span><br><span class="line">        beanDef.setInitMethodName(initMethodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String destroyMethodName = bean.getString(<span class="string">"destroyMethod"</span>);</span><br><span class="line">    beanDef.setDestroyMethodName(destroyMethodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Consider scoping</span></span><br><span class="line">    ScopedProxyMode proxyMode = ScopedProxyMode.NO;</span><br><span class="line">    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanDef.setScope(attributes.getString(<span class="string">"value"</span>));</span><br><span class="line">        proxyMode = attributes.getEnum(<span class="string">"proxyMode"</span>);</span><br><span class="line">        <span class="keyword">if</span> (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">            proxyMode = ScopedProxyMode.NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Replace the original bean definition with the target one, if necessary</span></span><br><span class="line">    BeanDefinition beanDefToRegister = beanDef;</span><br><span class="line">    <span class="keyword">if</span> (proxyMode != ScopedProxyMode.NO) &#123;</span><br><span class="line">        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(</span><br><span class="line">                <span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName), <span class="keyword">this</span>.registry,</span><br><span class="line">                proxyMode == ScopedProxyMode.TARGET_CLASS);</span><br><span class="line">        beanDefToRegister = <span class="keyword">new</span> ConfigurationClassBeanDefinition(</span><br><span class="line">                (RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(String.format(<span class="string">"Registering bean definition for @Bean method %s.%s()"</span>,</span><br><span class="line">                configClass.getMetadata().getClassName(), beanName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.registry.registerBeanDefinition(beanName, beanDefToRegister);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@ImportSource</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsFromImportedResources</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String, Class&lt;? extends BeanDefinitionReader&gt;&gt; importedResources)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Class&lt;?&gt;, BeanDefinitionReader&gt; readerInstanceCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    importedResources.forEach((resource, readerClass) -&gt; &#123;</span><br><span class="line">        <span class="comment">// Default reader selection necessary?</span></span><br><span class="line">        <span class="keyword">if</span> (BeanDefinitionReader<span class="class">.<span class="keyword">class</span> </span>== readerClass) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.endsWithIgnoreCase(resource, <span class="string">".groovy"</span>)) &#123;</span><br><span class="line">                <span class="comment">// When clearly asking for Groovy, that's what they'll get...</span></span><br><span class="line">                readerClass = GroovyBeanDefinitionReader<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Primarily ".xml" files but for any other extension as well</span></span><br><span class="line">                readerClass = XmlBeanDefinitionReader<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BeanDefinitionReader reader = readerInstanceCache.get(readerClass);</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Instantiate the specified BeanDefinitionReader</span></span><br><span class="line">                reader = readerClass.getConstructor(BeanDefinitionRegistry<span class="class">.<span class="keyword">class</span>).<span class="title">newInstance</span>(<span class="title">this</span>.<span class="title">registry</span>)</span>;</span><br><span class="line">                <span class="comment">// Delegate the current ResourceLoader to it if possible</span></span><br><span class="line">                <span class="keyword">if</span> (reader <span class="keyword">instanceof</span> AbstractBeanDefinitionReader) &#123;</span><br><span class="line">                    AbstractBeanDefinitionReader abdr = ((AbstractBeanDefinitionReader) reader);</span><br><span class="line">                    abdr.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">                    abdr.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">                &#125;</span><br><span class="line">                readerInstanceCache.put(readerClass, reader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">"Could not instantiate BeanDefinitionReader class ["</span> + readerClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO SPR-6310: qualify relative path locations as done in AbstractContextLoader.modifyLocations</span></span><br><span class="line">        reader.loadBeanDefinitions(resource);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="function"><span class="params">			Environment environment, @Nullable ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.registry = registry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">        registerDefaultFilters();</span><br><span class="line">    &#125;</span><br><span class="line">    setEnvironment(environment);</span><br><span class="line">    setResourceLoader(resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里有解析 _**@PropertySource**_ **_@ComponentScan_** _**@Import**_ _**@ImportResource**_ _**@Bean**_</span></span><br><span class="line"><span class="comment">//在扫描过程中使用到 ``ClassPathScanningCandidateComponentProvider````他自动注入拦截Component组件</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    ClassLoader cl = ClassPathScanningCandidateComponentProvider<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(<span class="string">"javax.annotation.ManagedBean"</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">        logger.debug(<span class="string">"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="comment">// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(<span class="string">"javax.inject.Named"</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">        logger.debug(<span class="string">"JSR-330 'javax.inject.Named' annotation found and supported for component scanning"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring configuration</tag>
      </tags>
  </entry>
</search>
